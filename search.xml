<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Git】相关问题</title>
      <link href="/2020/02/01/gitproblems/"/>
      <url>/2020/02/01/gitproblems/</url>
      
        <content type="html"><![CDATA[<h1 id="Git提交问题"><a href="#Git提交问题" class="headerlink" title="Git提交问题"></a>Git提交问题</h1><p>今天提交Git时本地提示提交上去，但是github上没有记录。之前我使用的是HTTPS的方式提交，今天改为SSH提交。</p><a id="more"></a><h2 id="生成-SSH-密钥"><a href="#生成-SSH-密钥" class="headerlink" title="生成 SSH 密钥"></a>生成 SSH 密钥</h2><p>打开Git Bash，输出以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure><p>这是用来检查有没有已经存在的密钥。</p><p>如果提示不存在目录。就使用 <code>ssh-keygen</code> 生成密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span></span><br><span class="line"><span class="comment"># Creates a new ssh key using the provided email</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/you/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><p>第一次回车确认路径，第二次回车输入passphrase，这个可以是空。第三次回车确认passphrase。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /home/you/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">…………………此处是密钥内容…………………… your_email@example.com</span><br></pre></td></tr></table></figure><hr><h2 id="绑定Deploy-keys"><a href="#绑定Deploy-keys" class="headerlink" title="绑定Deploy keys"></a>绑定Deploy keys</h2><p>找到刚刚路径下生成的<code>id_rsa.pub</code>文件，用vscode打开，复制全部公钥。然后去github对应的仓库的设置里绑定<strong>Deploy keys</strong>。（<strong>Settings –&gt; Deploy keys –&gt; Add deploy key</strong>）</p><p>测试配置是否成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="权限过大问题"><a href="#权限过大问题" class="headerlink" title="权限过大问题"></a>权限过大问题</h3><p>我在win10 20 04的版本上到这一步测试时报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">Permissions 0644 <span class="keyword">for</span> <span class="string">'/Users/sailfish/.ssh/id_rsa'</span> are too open.</span><br><span class="line">It is required that your private key files are NOT accessible by others.</span><br><span class="line">This private key will be ignored.</span><br><span class="line">Load key <span class="string">"/Users/sailfish/.ssh/id_rsa"</span>: bad permissions</span><br><span class="line">git@ip<span class="string">'s password:</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br></pre></td></tr></table></figure><p>看样子应该是权限过大问题。网上搜索得到了一个解决的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">chmod 700 id_rsa</span><br></pre></td></tr></table></figure><p>再次测试，发现并没有用。估计在linux下才管用吧。</p><p>经过探索，我在win下需要设置.ssh文件夹的访问权限。下图所示。</p><p><img src="https://i.loli.net/2020/02/01/c174UIBNTQ8fgkD.png" alt="image.png"></p><p>设置好上面的后，再测试配置。正常提示如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi stefan! You have successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><hr><h2 id="提交博客"><a href="#提交博客" class="headerlink" title="提交博客"></a>提交博客</h2><p>到提交博客时报错如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Please tell me who you are.</span><br><span class="line">Run</span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">"you@example.com"</span></span><br><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line"></span><br><span class="line">to <span class="built_in">set</span> your account<span class="string">'s default identity.</span></span><br><span class="line"><span class="string">Omit --global to set the identity only in this repository.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fatal: unable to auto-detect email address (got '</span>name@stefan.(none)<span class="string">')</span></span><br></pre></td></tr></table></figure><p>首先按照提示来设置全局的git 配置，发现没有用。</p><p>于是剑走偏锋，直接设置博客目录下的.git目录下的config文件。在该文件后面加几行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">email=your email</span><br><span class="line">name=your name</span><br></pre></td></tr></table></figure><p>再次Deploy，终于解决问题了。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HTTP协议】安卓网络编程基础</title>
      <link href="/2020/01/21/http/"/>
      <url>/2020/01/21/http/</url>
      
        <content type="html"><![CDATA[<h1 id="安卓网络编程基础-Http协议"><a href="#安卓网络编程基础-Http协议" class="headerlink" title="安卓网络编程基础-Http协议"></a>安卓网络编程基础-Http协议</h1><p>Http即HyperText Transfer Protocol，也就是超文本传输协议。</p><a id="more"></a><h2 id="Http协议定义"><a href="#Http协议定义" class="headerlink" title="Http协议定义"></a>Http协议定义</h2><p><img src="https://i.loli.net/2020/01/21/oLqODzW1AgZdeim.png" alt="image.png"></p><p>协议就是约定的意思，内容是Http相关的格式。</p><p>http协议是基于TCP/IP协议之上的应用层协议。</p><hr><h2 id="Http工作流程"><a href="#Http工作流程" class="headerlink" title="Http工作流程"></a>Http工作流程</h2><p><img src="https://i.loli.net/2020/01/21/ESAVaboPjNOX34g.png" alt="image.png"></p><p>客户端发起一个请求，然后服务器处理请求，做出响应。</p><p>这个流程是一定的，换句话说，请求一定是客户端请求，响应一定是服务端响应。</p><p>不可以是服务端向客户端发起请求，也不可以是客户端做出响应。</p><blockquote><p>特殊情况：这个服务器跟另外一个服务器通过http请求。</p></blockquote><p>这种情况是有的，但是当发起请求那一刻，它就被当作客户端。</p><hr><h2 id="Http不保存状态"><a href="#Http不保存状态" class="headerlink" title="Http不保存状态"></a>Http不保存状态</h2><p>当一个请求，一个响应完成时，那么一个http的请求就完成了。当然也有特殊情况，就是无网了，你发不起请求。然后服务器处理超时了，你也得不到结果。</p><p>http是无状态协议，也就是不保存状态。一次请求完成后，下一次再发起请求，又是新的。该设置什么内容设置什么内容，要给什么参数给什么参数。</p><p>http无状态，那怎么知道这个请求用户已经登录了呢？登录状态保存在哪里呢？所以就引入了cookies这个东西了。在cookies里可以保存一个令牌(token)，每次请求的时候，把这个令牌作为参数给服务器校验，这样子就可以知道这个用户的登录状态。</p><hr><h2 id="Http请求方式"><a href="#Http请求方式" class="headerlink" title="Http请求方式"></a>Http请求方式</h2><ul><li>get</li><li>post</li><li>put</li><li>delete</li><li>head</li><li>trace</li><li>options</li><li>connect</li></ul><p>一般而言常用的是get和post。通常情况下：</p><ul><li>get：用于请求数据 </li><li>post：用于提交数据 </li><li>put：用于更新数据 </li><li>delete：用于删除数据</li></ul><p>同一个接口，不同的请求方式作用就不一样。</p><blockquote><p>RESTful:(Representational State Transfer)RESTFUL是一种网络应用程序的设计风格和开发方式，基于HTTP，可以使用XML格式定义或JSON格式定义。RESTFUL适用于移动互联网厂商作为业务使能接口的场景，实现第三方OTT调用移动网络资源的功能，动作类型为新增、变更、删除所调用资源。</p></blockquote><hr><h2 id="Http响应码"><a href="#Http响应码" class="headerlink" title="Http响应码"></a>Http响应码</h2><p>响应码是服务器给客户端结果码。</p><p><img src="https://i.loli.net/2020/01/21/1YsiSPfAl6kDr4U.png" alt="image.png"></p><hr><h2 id="Http请求格式"><a href="#Http请求格式" class="headerlink" title="Http请求格式"></a>Http请求格式</h2><p><img src="https://i.loli.net/2020/01/21/z3cDxCI4BnqkrNL.png" alt="image.png"></p><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p><img src="https://i.loli.net/2020/01/21/lx5WyNCp3iK4kJU.png" alt="image.png"></p><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><ul><li>Host 要访问的主机</li><li>Connection 连接保持，http1.1有，1.0没有这个。keep-alive可以提高效率，在一定时间里不断开tcp连接，进行下一个请求</li><li>Content-Length 内容长度，指的是后面请求正文的数据长度</li><li>Accept 响应内容格式，也就是返回内容格式</li><li>Origin 这个是源（不是标准http里的内容，这里是chrome加的）</li><li>User-Agent 用户客户端相关的信息，比如说浏览器，操作系统信息之类的</li><li>Content-Type 提交的内容类型</li><li>Referer 来源，访问入口。</li><li>Accept-Encoding 响应内容的编码格式</li><li>Accept-Language 响应内容的语言</li><li>Cookie cookies</li></ul><p>使用抓包软件进行抓包：</p><p><img src="https://i.loli.net/2020/01/21/ldbyAs1TOEViBLS.png" alt="image.png"></p><hr><h2 id="Http响应格式"><a href="#Http响应格式" class="headerlink" title="Http响应格式"></a>Http响应格式</h2><ul><li>响应行</li><li>响应头</li><li>空行</li><li>响应体</li></ul><p><img src="https://i.loli.net/2020/01/21/tnG1YP4mNMKaoWV.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【爱情公寓五】人生下一站</title>
      <link href="/2020/01/16/NextStopOfLife/"/>
      <url>/2020/01/16/NextStopOfLife/</url>
      
        <content type="html"><![CDATA[<p>从《爱情公寓四》在2014年开播后，到如今2020年历经6年，《爱情公寓五》近几天终于开播了。</p><p>而很多人看了《爱情公寓五》的前几集后就吐槽爱情公寓变味了，已经不一样了。</p><p>可是，为什么一定要和原来一样呢？</p><hr><blockquote><p>错觉的地久天长，其实是一无所有。——《虹之间》</p></blockquote><hr><a id="more"></a><h2 id="爱的回归线"><a href="#爱的回归线" class="headerlink" title="爱的回归线"></a>爱的回归线</h2><p><img src="https://i.loli.net/2020/01/14/HONAtyfbmihQu3C.png" alt="ai _1_.png"></p><p><img src="https://i.loli.net/2020/01/14/1RTnfOblw4SDhag.png" alt="ai _2_.png"></p><p>第一集，美嘉说：“<strong>如果你不愿意发朋友圈，那就别发了。我愿意给你更多时间准备，我想从你的角度思考问题</strong>。”</p><p>子乔说：”<strong>我不会回避我的过去，但我也希望我有新的未来。我知道，我身边这个女生是我想共度余生的人。</strong>“</p><p><img src="https://i.loli.net/2020/01/14/LZzNkFXSTgKwsYd.png" alt="ai _4_.png"></p><p><img src="https://i.loli.net/2020/01/14/P3NdMVyavXIxz4e.png" alt="ai _5_.png"></p><p>当熟悉的《爱的回归线》bgm响起来，很多回忆渐渐浮现。</p><p>那个喜欢party的美嘉，那个在酒吧扇吕子乔大嘴巴，喊着“我一口盐汽水喷死你”的美嘉。那个没有正式工作、撩妹却不懂责任的吕子乔。还有那个拼命抢回美嘉手链的吕子乔。</p><hr><h2 id="离开-amp-告别"><a href="#离开-amp-告别" class="headerlink" title="离开&amp;告别"></a>离开&amp;告别</h2><p>在戏外，《爱情公寓》系列一直被贴上“抄袭”的标签，（这点并不是我这篇博客想表达的重点），这也导致了一些最初的演员的离开。比如王传君和金世佳。</p><p>在戏内，宛瑜和展博为了梦想离开；关谷和悠悠为了爱情离开。寥寥数笔交代了曾小贤去了阿拉善，缺席了大部分剧情。</p><p>这些当初人物的离开或许是很多人觉得变味的原因之一吧。觉得已经不一样了……</p><p>可是，为什么一定要和原来一样呢？</p><p>毕竟，每个人都在长大啊。</p><p>子乔和美嘉总要长大，如果子乔和原来一样，能做个好爸爸吗？</p><p>小贤和一菲总要长大，如果曾老师一直很原来一样，迷迷糊糊 ，一菲能把自己交给他吗？</p><p>有的人又说了，关谷和悠悠不见了，展博和宛瑜离开了 。但是，如果你想想那些曾经陪你看爱情公寓的朋友们，他们12号晚上和你一起等着爱5的开播吗。这就不一定了。因为我们总会不断地告别很多人，我们也会离开很多人。</p><p>爱情公寓的10年就正好像我们的10年，总有人要离开，总有人要长大。</p><p>如果30多的子乔，美嘉，曾老师，一菲，还和10年前一样打打闹闹，那才是真正的开玩笑。</p><p>爱情公寓总有人要离去，80 90 00总要一代一代的交替着。</p><p>就如上面写的，</p><p>宛瑜和展博为了梦想离开；关谷和悠悠为了爱情离开；</p><p>可以想到的是，</p><p>一菲和小贤装修房子后说不定会离开；美嘉和子乔有孩子后说不定会离开。</p><p>他们的离开好像是告诉我们：一个时代的结束，我们要长大。</p><p>留下的像极了美嘉的咖喱酱，像极了一菲的大力，像极了子乔的赵海棠。他们也会长大，为了各自的理由离开。</p><hr><h2 id="人生下一站"><a href="#人生下一站" class="headerlink" title="人生下一站"></a>人生下一站</h2><p>有人说，<strong>试着把清晰度调到标清，把自己调到几年前的模式，你就会发现，爱情公寓还是那个爱情公寓</strong>。</p><p>我们一开始就接受了剧里没工作也可以不断撩妹的吕子乔，没收听率而且意外频发的《你的月亮我的心》也不会被砍等等许多“不合现实”的设定。这些设定在现实生活中就如同乌托邦一样不存在。</p><p>在剧情里，所有困难都不算困难，用爱发电是合理的，朋友不会因为离开而变得生疏，爱情也不会因为房子存款而变化。</p><p>或许可以这么猜测：</p><blockquote><p> 我们觉得以前的《爱情公寓》好看，是因为那时候我们还没长大，我们还相信,也许有一天我们会遇到那样一群人， 会过上那样的生活。</p></blockquote><p>六年后的现在，经历了时间的我们能一眼识破童话和现实的区别。换句话说，我们变得越来越“不懂味”了。</p><p>如果可以的话，就用这最后一季和10年前的自己好好挥手告别吧。而后，好好的迎接人生的下一个阶段吧。</p><p>他们都开始走向人生下一站了。</p><p>我们也要去下一站了。</p><p><img src="https://i.loli.net/2020/01/14/psAEjb9kteD7Uo2.png" alt="ai _6_.png"></p><p><img src="https://i.loli.net/2020/01/14/i2DhrWAay9XlpkM.png" alt="ai _7_.png"></p><p>用了10年的时间，不就是等一个结局吗？</p><p>可是，人生哪里有标准结局。</p><p>无论怎样，美嘉还在子乔身边 ，一菲还在小贤身边，宛瑜还在展博身边，悠悠还在关谷身边，张伟的身边有了大力。</p><p>虽然…，现实中自己身边的人早已离开。</p><p>无论怎样，至少留一点时间给自己吧。假装还不曾长大，假装在花瓣来的地方，真的有个叫爱情公寓的地方，情侣入住，房租减半，水电全免。在那里，爱可以发电，朋友是永远不会过时的陪伴。</p><hr><h2 id="2020-02-01更"><a href="#2020-02-01更" class="headerlink" title="2020.02.01更"></a>2020.02.01更</h2><hr><blockquote><p>安培冲过欧姆，寻找着法拉，充电到一个伏特，电键已断，我以库仑之名涌出，化为焦耳，为了你，烟消云散。当我作为自变量趋近于正无穷时，得到的函数值，就是你。</p></blockquote><hr><p>今天看到大结局了。之前还说到 “宛瑜和展博为了梦想离开；关谷和悠悠为了爱情离开；一菲和小贤装修房子后说不定会离开；美嘉和子乔有孩子后说不定会离开。”  结果第34集就给出了爱情公寓要被拆迁的剧情，这是所有人都得走的节奏啊。</p><p>以前的每一集或多或少都有一些能戳中笑点的地方，但是唯独第34集中的看似搞笑的笑点却莫名戳中泪点。</p><h3 id="剧情脑补——2022年"><a href="#剧情脑补——2022年" class="headerlink" title="剧情脑补——2022年"></a>剧情脑补——2022年</h3><p>上海浦东新区伟大律师事务所</p><p>“王总放心，这个案子绝对没有问题。”张伟微笑着跟面前这个富贵逼人的老总握手。</p><p>“诸葛律师的推荐果然没错，这次非常感谢张律师了，那我就先告辞了。”</p><p>“王总我再梳理梳理案件，就不亲自送你下去了，小刘，送王总下去。” 张伟微笑道。张伟目送王总离开办公室后便急忙打开手机想给赵海棠打个电话，他想知道大力回来了吗？他有些慌张急促，看向桌子上的戒指盒，平日的自信沉稳荡然无存。</p><p>“咚，咚。”有敲门声传来，张伟不耐烦地说道:“不好意思，下午有很重要的事，请先去预约。”</p><p>出乎意料的是，门直接被打开，张伟抬起头来，目光却瞬间呆滞，一位年轻女子走进来，面带笑意，眼里星河荡漾，坐到那把熟悉的椅子上，眼睛里写满了柔情和喜悦</p><p>张伟觉得大力又瘦了，可能是柏林没有一菲的蛋炒饭和他亲手煮的控盐泡面，又可能是大力在柏林很想他。张伟突然发现自己的超能力好像回来了，他听到了大力砰砰的急促的心跳声:</p><p><strong>“我叫诸葛大力，今年22岁，性别女，取向你，身高162，体重44，喜欢跟你约会逛街看电影，目前研究生毕业，我原本没有计划在22岁结婚，可这次回来我想让你做我老公。”</strong></p><hr><p>小草渴求雨露，花儿盼望阳光，地球静候彗星，我偷偷地看着你。</p><p>雨露滋润小草，阳光温暖花朵，彗星亲吻地球，我远远地看着你</p><p>小草承接雨露，花儿祝福阳光，地球告别彗星，我默默地看着你。</p><hr><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在我心里，爱情公寓就像一个乌托邦一样，正是因为现世中有着这么多的不如愿，才更突出了这个故事的可贵。在我心里它早已不是一个简单的喜剧故事，而是一个陪伴自己的挚友，正因为他一路来陪你走过风风雨雨看遍落花流水，人们才会如此渴望他有着一个美好的结局。即使暂时分离也无所谓，请记住，花瓣飘来的地方，那里就是爱情公寓。</p><p>当花瓣飘落地平线的时候，我们终将离去，再漫长的欢聚也有尽头，世上哪有不散温柔。当花瓣再次飞扬天空的时候，最好的朋友还会重逢，回忆点燃的灯火它永不熄灭，最爱的人是永远的守候。谨以此篇献给那些逝去的光阴，再见，爱情公寓；再见，青春。</p><p><img src="https://i.loli.net/2020/02/01/EshzGLa8XD2NYAq.png" alt="image.png"></p><p><img src="https://i.loli.net/2020/02/01/UpyFqz82341janT.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【HTTP】Get和Post的区别</title>
      <link href="/2020/01/13/GetAndPost/"/>
      <url>/2020/01/13/GetAndPost/</url>
      
        <content type="html"><![CDATA[<h1 id="Get和Post的区别"><a href="#Get和Post的区别" class="headerlink" title="Get和Post的区别"></a>Get和Post的区别</h1><p>Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。GET一般用于<strong>获取/查询</strong>资源信息，而POST一般用于<strong>更新</strong>资源信息。</p><a id="more"></a><h2 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h2><p>根据HTTP规范，GET用于信息获取，而且应该是<strong>安全的</strong>和<strong>幂等的</strong>。</p><p>（1）安全的意味着该操作用于获取信息而非修改信息。GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p><p>（2）幂等的意味着对同一URL的多个请求应该返回同样的结果。</p><blockquote><p>幂等（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。幂等有一下几种定义：对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)=abs(abs(a))。对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x。</p></blockquote><p>在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。</p><h2 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h2><p>根据HTTP规范，POST表示可能修改变服务器上的资源的请求。继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。</p><h2 id="表面现像"><a href="#表面现像" class="headerlink" title="表面现像"></a>表面现像</h2><p>上面是原理性的区别，我们再从表面现像上面看看GET和POST的区别：</p><p>（1）1.GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&amp;相连，如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0%E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p><p>POST把提交的数据则放置在是HTTP包的包体中。</p><p>（2）提交数据大小区别</p><p>1.<br>因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系了。而实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于一些浏览器理论上没有长度限制，其限制取决于操作系统的支持。</p><p>2.</p><p>POST是没有大小限制的，HTTP协议规范也没有进行大小限制，POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。</p><h2 id="安全性区别"><a href="#安全性区别" class="headerlink" title="安全性区别"></a>安全性区别</h2><p>POST的安全性要比GET的安全性高。注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为：</p><p>(1)登录页面有可能被浏览器缓存；</p><p>(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Ubuntu】Ubuntu的一些问题及解决方案汇总</title>
      <link href="/2020/01/07/ubuntuProblems/"/>
      <url>/2020/01/07/ubuntuProblems/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu小毛病问题汇总"><a href="#Ubuntu小毛病问题汇总" class="headerlink" title="Ubuntu小毛病问题汇总"></a>Ubuntu小毛病问题汇总</h1><p>无论是把Ubuntu作为开发工具还是作为日常使用的环境，总会碰到很多问题。虽然这些问题通过谷歌或者百度查找可以解决，但是通常而言后面如果再遇到这个问题又忘记具体解决方案或者命令了。所以特别开一个博客用来记录我遇到的一些问题及解决方案。</p><hr><blockquote><p>If I have to do a summary for this thing, so I would say, we have create our own demons.——《Iron Man3》</p></blockquote><hr><a id="more"></a><h2 id="外接显示器问题"><a href="#外接显示器问题" class="headerlink" title="外接显示器问题"></a>外接显示器问题</h2><p>我的笔记本屏幕分辨率是1920×1080，外接显示器的分辨率是3840×2160。当我在Ubuntu下配置好显卡GTX1060的驱动后，我的外接显示器的分辨率竟然只能设置为2560×1440，看起来很难受。如果把分辨率设置成3840×2160，那外接显示器直接就没反应了。只能等20秒后自动重置。</p><p>虽然这个2560×1440勉强够用，但是本着解决问题的精神。经过我的尝试，在3840×2160下刷新率不能设置为60hz，当设置为59.94hz时就可以了。</p><p><img src="https://i.loli.net/2020/01/07/4uUTIzwoGd2ViKv.png" alt="image.png"></p><p>这是Reddit网站上一个人的回答。</p><p>好了，现在分辨率可以了，但是因为缩放是100%，导致字特别小，在win10下我设置的缩放是150%。但是在Ubuntu设置里只有100%和200%缩放，200%太大，100%又太小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsettings set org.gnome.mutter experimental-features &quot;[&apos;x11-randr-fractional-scaling&apos;]&quot;</span><br></pre></td></tr></table></figure><p>解决方案就是上面的命令，用来开启缩放设置的实验性的功能。</p><p><img src="https://i.loli.net/2020/01/07/vtkRiZq3MC4SAJ7.png" alt="2020-01-07 14-50-41屏幕截图.png"></p><h2 id="终端流量走代理"><a href="#终端流量走代理" class="headerlink" title="终端流量走代理"></a>终端流量走代理</h2><p>有的时候在终端使用git非常慢，所以想走代理流量，但是终端流量默认不走代理的。需要命令开启。</p><p>如果你是SSR,并且走的http的代理端口是12333，想执行wget或者curl来下载国外的东西，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:12333</span><br></pre></td></tr></table></figure><p>如果是https那么就经过如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export https_proxy=http://127.0.0.1:12333</span><br></pre></td></tr></table></figure><p>以上命令是临时的，仅仅对你当前的终端生效。</p><blockquote><p>不定期更新</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Ubuntu】Ubuntu和Win10双系统安装教程</title>
      <link href="/2020/01/06/installUbuntu/"/>
      <url>/2020/01/06/installUbuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu和Win10双系统安装教程"><a href="#Ubuntu和Win10双系统安装教程" class="headerlink" title="Ubuntu和Win10双系统安装教程"></a>Ubuntu和Win10双系统安装教程</h1><p>前段时间我想更新一下我电脑里Ubuntu系统的内核，删除一些没用的内核，结果手贱的我多删了些东西导致网卡驱动没有了。虽然说可以有方法解决，但是我想着干脆再重装得了，顺便做一个教程记录安装的过程。</p><hr><blockquote><p>Today is the first day…of what’s left of you life.——《Iron Man 3》</p></blockquote><hr><a id="more"></a><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><ul><li>一台可以上网的电脑</li><li>一个至少4GB的U盘</li><li>电脑内存至少4G</li><li>电脑处理器至少双核</li></ul><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>1.首先需要下载Ubuntu镜像文件。</p><p><a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener">点击这里去Ubuntu官方下载</a>。</p><p><img src="https://i.loli.net/2020/01/06/Q3DlMhGUJqW4HYx.png" alt="image.png"></p><p>我下载的是19.10版本，这是目前新版本Ubuntu。当然你可以下载18.04.3长期支持版。系统当然是用新不用旧了。如果你觉得官方的下载链接很慢，你也可以点击下面的下载链接，下载种子后用迅雷进行下载。速度很快。</p><p><a href="https://www.lanzous.com/i8hq8pe" target="_blank" rel="noopener">点击这里去下载19.10的种子文件</a>，提取密码:1024。</p><hr><p>2.下载U盘刻录软件。</p><p>这里有很多的工具可以进行刻录，我打算使用一个体积小但是功能强的小软件 Universal USB Installer。</p><p><a href="https://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/#button" target="_blank" rel="noopener">点击这里去官网下载</a>。</p><p><img src="https://i.loli.net/2020/01/06/HNOcKi8tZS9WRVY.png" alt="image.png"></p><p>找到“<strong>Download</strong>”下载即可。</p><h2 id="刻录U盘"><a href="#刻录U盘" class="headerlink" title="刻录U盘"></a>刻录U盘</h2><p>经过上面的两次下载，那么在你下载的路径下应该有ubuntu-19.10-desktop-amd64.iso文件和Universal-USB-Installer-1.9.9.0.exe软件。</p><blockquote><p>注意：刻录U盘会格式化你的U盘，请务必提前备份U盘里重要的数据！</p></blockquote><p>首先双击U盘刻录软件Universal-USB-Installer-1.9.9.0.exe。</p><p><img src="https://i.loli.net/2020/01/06/NmlPyhdAMQkcq8n.png" alt="image.png"></p><p><img src="https://i.loli.net/2020/01/06/9FkLtbuNi7Dvxhs.png" alt="image.png"></p><p>点击下方的”<strong>Create</strong>“即可开始刻录。刻录过程截图如下图，等几分钟即可。</p><p><img src="https://i.loli.net/2020/01/06/QHbqygGrBYT7kzc.png" alt="20200106142425.png"></p><hr><h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><p>如果你想把你用来主力工作的操作系统换成Ubuntu的话，那你就没有必要看这一章，请直接跳到安装就行。这一步是为了安装Windows和Ubuntu双系统。也就是说你以后可以选择进入哪一个系统。</p><p>首先打开windows10自带的磁盘管理如下图。</p><p><img src="https://i.loli.net/2020/01/06/7oL6ZezVtI12bWc.png" alt="image.png"></p><p>选一个你想安装Ubuntu的磁盘，然后右击这个磁盘，选择压缩卷。压缩卷的意思就是说分出多少空间出去。官方建议至少将Ubuntu安装在有25GB的空闲磁盘上。我这里就分75GB吧，因为还要安装编程软件什么的。这一步根据你的情况分。分完后会多出一块未使用灰色的区域，那说明这一步已经可以了。</p><hr><h2 id="正式安装Ubuntu"><a href="#正式安装Ubuntu" class="headerlink" title="正式安装Ubuntu"></a>正式安装Ubuntu</h2><p>1.首先百度或者谷歌查找你电脑品牌型号进入BIOS的快捷键。这一步就不多说了。不同的电脑进入BIOS的快捷键不一样。设置U盘为第一启动方式并关闭secure boot。然后重启电脑，从U盘启动。</p><p><img src="https://i.loli.net/2020/01/06/xsXztTYmBflKWj5.png" alt="image.png"></p><p>从U盘启动后就是这个样子了。可以直接选择第三个“Install Ubuntu” 选项来进行安装，也可以和我一样选默认的第一个选项也行。第一个选项是体验Ubuntu。但是实际上体验的时候可以选择安装。那么我这里选择第一个后就回车。</p><p><img src="https://i.loli.net/2020/01/06/l7vPK1EkJpF3Txa.png" alt="image.png"></p><p>然后桌面上有三个图标，双击第三个图标“Install Ubuntu 19.10”就可以进行安装了。</p><p><img src="https://i.loli.net/2020/01/06/LK8mPuqQSghvafY.png" alt="image.png"></p><p>前面的语言选择你喜爱的语言。到这里的时候，请选择“其他选项”。下图注意序号三，这里请选择你挂载的/boot的设备，如果这里你选的默认的位置，那么你使用的就是Ubuntu引导win10。那你以后想卸载删除Ubuntu的时候将是一个麻烦事。</p><p><img src="https://i.loli.net/2020/01/06/6JSpAXW7zsmtkGf.png" alt="image.png"></p><p>点击的“+”创建4个主要的基础分区（这里之前未分配的75G就是给ubuntu系统的75G），按以下参数设置4个主要的基础分区：</p><p><img src="https://i.loli.net/2020/01/06/fQe7aBZUoKWS6nJ.png" alt="image.png"></p><p>上图空间分配大小是参考，实际你分配的时候务必大于或者等于这么多。上面的表格主要是给你参考选择分区类型和挂载点。大小任你决定。</p><p>安装完成后，设置用户名和密码。</p><p><img src="https://i.loli.net/2020/01/06/bUWMEL6pQ9tOjZP.png" alt="image.png"></p><p>然后一直点击下一步，等待安装就行了。</p><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里双系统的教程就结束了，当电脑开机的时候可以进行系统选择。至于安装Ubuntu后进行驱动更新，换国内源等事情下期有缘再见。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Zigbee和STM32】智能家居系统</title>
      <link href="/2020/01/05/intelligentHome/"/>
      <url>/2020/01/05/intelligentHome/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Zigbee和STM32的智能家居系统"><a href="#基于Zigbee和STM32的智能家居系统" class="headerlink" title="基于Zigbee和STM32的智能家居系统"></a>基于Zigbee和STM32的智能家居系统</h1><p>新的一年开始了，这个学期也差不多告一段落了，近段时间一直忙于做课程设计。空闲的时间相对于前几个星期来说有很多。毕竟一年结束了，本来在脑海了构想了很多话，想做一个关于过去一年里总结的博客， 但是这几天工作效率出奇的低，一直没能开始动手。现在先对Zigbee课程设计做一个总结当作热身吧。</p><hr><blockquote><p>Part of the journey is the end. ——Tony Stark</p></blockquote><hr><blockquote><p>结束亦是旅途的一部分。——Tony Stark</p></blockquote><hr><a id="more"></a><h2 id="设计方案概述"><a href="#设计方案概述" class="headerlink" title="设计方案概述"></a>设计方案概述</h2><p><img src="https://i.loli.net/2020/01/05/xWCUSgyoGIcALqB.png" alt="image.png"></p><p>​    终端节点开发板采集温度等数据后发给协调器，协调器通过串口与STM32开发板相连接，STM32通过串口发给电脑。电脑使用我们自己开发的C#串口程序接收数据，将结果显示在电脑上。另一方面我们打算尝试开发板连接STM32端，将数据也发给STM32，STM32接ESP8266WiFi模块后发送数据至云平台，然后使用自己开发的手机端app接收云平台传来的数据，并上发数据给云平台，云平台将手机端的控制指令下发给32端，32端控制开发板亮灯或其他操作。</p><hr><h2 id="DHT11采集温度"><a href="#DHT11采集温度" class="headerlink" title="DHT11采集温度"></a>DHT11采集温度</h2><p>​    在之前的实验中，当我使用<strong>DHT11</strong>在<strong>协议栈</strong>下总是无法正常采集温度，原因是DHT11需要有严格的时序，需要延时精确的10微秒等时间。而协议栈下会有很多事件打断定时器，从而无法产生精确的时间。</p><p>​    这一次，我询问了一些高手，终于发现了解决问题的关键。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay_us</span><span class="params">()</span> <span class="comment">//1 us延时</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MicroWait(<span class="number">1</span>);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay_10us</span><span class="params">()</span> <span class="comment">//10 us延时</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MicroWait(<span class="number">10</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay_ms</span><span class="params">(uint Time)</span><span class="comment">//n ms延时</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> i;</span><br><span class="line">  <span class="keyword">while</span>(Time--)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">      Delay_10us();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    没错，这里用的不是定时器计时，而是用的一个叫MicroWait(10)的函数。我们进这个函数看。发现这个函数事实上是另一个Onboard_wait(t)函数。这个函数是由开发板本身提供的onboard函数。这样一来就可以使用DHT11采集温湿度了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MicroWait(t) Onboard_wait(t)</span></span><br></pre></td></tr></table></figure><hr><h2 id="终端节点"><a href="#终端节点" class="headerlink" title="终端节点"></a>终端节点</h2><p>终端节点要做的就两件事情，一个是采集温度然后发送给协调器，另一个事情就是接收来自协调器的控制命令并执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenericApp_SendTheMessage</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    DHT11();   <span class="comment">//温度采集 </span></span><br><span class="line">    HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);</span><br><span class="line">    uint8 Temp[<span class="number">2</span>];</span><br><span class="line">    Temp[<span class="number">0</span>] = wendu_shi+<span class="number">0x30</span>;</span><br><span class="line">    Temp[<span class="number">1</span>] = wendu_ge+<span class="number">0x30</span>;</span><br><span class="line">    uint8 humidity[<span class="number">2</span>];</span><br><span class="line">    humidity[<span class="number">0</span>] = shidu_shi+<span class="number">0x30</span>;</span><br><span class="line">    humidity[<span class="number">1</span>] = shidu_ge+<span class="number">0x30</span>;</span><br><span class="line">    <span class="comment">/*******串口打印*********/</span></span><br><span class="line">    HalUARTWrite(<span class="number">0</span>,<span class="string">"Temp:"</span>,<span class="number">5</span>);</span><br><span class="line">    HalUARTWrite(<span class="number">0</span>,Temp,<span class="number">2</span>);</span><br><span class="line">    HalUARTWrite(<span class="number">0</span>,<span class="string">"  Hum:"</span>,<span class="number">6</span>);</span><br><span class="line">    HalUARTWrite(<span class="number">0</span>,humidity,<span class="number">2</span>);</span><br><span class="line">    HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);</span><br><span class="line">     AF_DataRequest( &amp;GenericApp_DstAddr, &amp;GenericApp_epDesc,</span><br><span class="line">                       GENERICAPP_CLUSTERID,</span><br><span class="line">                       <span class="number">2</span>,</span><br><span class="line">                       humidity,</span><br><span class="line">                       &amp;GenericApp_TransID,</span><br><span class="line">                       AF_DISCV_ROUTE, </span><br><span class="line">                       AF_DEFAULT_RADIUS ) ;</span><br><span class="line">     </span><br><span class="line">     AF_DataRequest( &amp;GenericApp_DstAddr, &amp;GenericApp_epDesc,</span><br><span class="line">                       GENERICAPP_TEMPCLUSTER,</span><br><span class="line">                       <span class="number">2</span>,</span><br><span class="line">                       Temp,</span><br><span class="line">                       &amp;GenericApp_TransID,</span><br><span class="line">                       AF_DISCV_ROUTE, </span><br><span class="line">                       AF_DEFAULT_RADIUS ) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在终端节点加入协调器的网络后，进入面的GenericApp_SendTheMessage()函数里，在这个函数里调用DHT11()函数采集温度和湿度信息，把温度存到Temp数组里，湿度存到humidity数组里。然后设计两个簇分别将温度和湿度发送给协调器，这样设计的目的是为了方便协调器处理不同数据。</p><p>同时，终端节点需要接收来自协调器的控制信息，例如控制LED灯：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenericApp_MessageMSGCB</span><span class="params">(afIncomingMSGPacket_t *pkt )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">7</span>];</span><br><span class="line">  <span class="keyword">switch</span>(pkt-&gt;clusterId)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">case</span> (GENERICAPP_CLUSTERID):</span><br><span class="line">    osal_memcpy(buf,pkt -&gt; cmd.Data,<span class="number">7</span>);</span><br><span class="line">     <span class="keyword">if</span>(osal_memcmp(buf,<span class="string">"LED_ON"</span>,<span class="number">7</span>))</span><br><span class="line">     &#123;</span><br><span class="line">      HalLedSet(HAL_LED_2,HAL_LED_MODE_ON); </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(osal_memcmp(buf,<span class="string">"LED_OFF"</span>,<span class="number">7</span>))</span><br><span class="line">     &#123;</span><br><span class="line">      HalLedSet(HAL_LED_2,HAL_LED_MODE_ON);</span><br><span class="line">     &#125;</span><br><span class="line">  <span class="keyword">case</span> GENERICAPP_BROADCAST_CID:</span><br><span class="line">    osal_memcpy(buf,pkt -&gt; cmd.Data,<span class="number">7</span>);</span><br><span class="line">     <span class="keyword">if</span>(osal_memcmp(buf,<span class="string">"LED_ON"</span>,<span class="number">6</span>))</span><br><span class="line">     &#123;</span><br><span class="line">      HalLedSet(HAL_LED_2,HAL_LED_MODE_ON); </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(osal_memcmp(buf,<span class="string">"LED_OFF"</span>,<span class="number">7</span>))</span><br><span class="line">     &#123;</span><br><span class="line">      HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="协调器"><a href="#协调器" class="headerlink" title="协调器"></a>协调器</h2><p>协调器收到来自终端节点的消息时，需要将数据交给32端。这里使用的是串口进行通信。也就是分簇进行消息处理，然后写到串口。这样温湿度数据就被交给32端了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenericApp_MessageMSGCB</span><span class="params">( afIncomingMSGPacket_t *pkt )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> ( pkt-&gt;clusterId )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> GENERICAPP_CLUSTERID: </span><br><span class="line">      HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);</span><br><span class="line">      osal_memcpy(humid, pkt-&gt;cmd.Data, <span class="number">2</span>);</span><br><span class="line">      HalUARTWrite(<span class="number">0</span>, humid, <span class="number">2</span>);</span><br><span class="line">      HalUARTWrite(<span class="number">0</span>, tmp, <span class="number">2</span>);</span><br><span class="line">      Delay_ms(<span class="number">500</span>);</span><br><span class="line">      HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> GENERICAPP_TEMPCLUSTER: </span><br><span class="line">      HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);</span><br><span class="line">      HalUARTWrite(<span class="number">0</span>, humid, <span class="number">2</span>);</span><br><span class="line">      osal_memcpy(tmp, pkt-&gt;cmd.Data, <span class="number">2</span>);</span><br><span class="line">      HalUARTWrite(<span class="number">0</span>, tmp, <span class="number">2</span>);</span><br><span class="line">      HalUARTWrite(<span class="number">0</span>,<span class="string">" \n"</span>,osal_strlen(<span class="string">" \n"</span>));</span><br><span class="line">      Delay_ms(<span class="number">500</span>);</span><br><span class="line">      HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时从串口接到32端发来的控制信息时，需要转发给终端节点，巧妙的地方在于，因为使用的是串口通信，这里就使用串口回调函数，关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rxCB</span><span class="params">(uint8 port, uint8 event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  osal_memset(uartbuf, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">  HalUARTRead(<span class="number">0</span>, uartbuf, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> (osal_memcmp(uartbuf, <span class="string">"LED_ON"</span>, <span class="number">6</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    AF_DataRequest(&amp;GenericApp_DstAddr, &amp;GenericApp_epDesc,</span><br><span class="line">                   GENERICAPP_BROADCAST_CID,</span><br><span class="line">                   (byte)osal_strlen(uartbuf) + <span class="number">1</span>,</span><br><span class="line">                   (byte *)&amp;uartbuf,</span><br><span class="line">                   &amp;GenericApp_TransID,</span><br><span class="line">                   AF_DISCV_ROUTE, AF_DEFAULT_RADIUS);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (osal_memcmp(uartbuf, <span class="string">"LED_OFF"</span>, <span class="number">7</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    AF_DataRequest(&amp;GenericApp_DstAddr, &amp;GenericApp_epDesc,</span><br><span class="line">                   GENERICAPP_BROADCAST_CID,</span><br><span class="line">                   (byte)osal_strlen(uartbuf) + <span class="number">1</span>,</span><br><span class="line">                   (byte *)&amp;uartbuf,</span><br><span class="line">                   &amp;GenericApp_TransID,</span><br><span class="line">                   AF_DISCV_ROUTE, AF_DEFAULT_RADIUS);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="STM32端"><a href="#STM32端" class="headerlink" title="STM32端"></a>STM32端</h2><p>STM32端首先初始化中断分组，串口2，3。进行时钟初始化等，关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NVIC_Priority_Group_Configuration();  </span><br><span class="line">SYSTICK_init();    </span><br><span class="line">uart_init(<span class="number">115200</span>);  </span><br><span class="line">delay_init();  </span><br><span class="line">LCD_Init();  </span><br><span class="line">rtc_init(<span class="literal">NULL</span>);  </span><br><span class="line">USART3_Init(<span class="number">115200</span>);  </span><br><span class="line">USART2_Init(<span class="number">115200</span>);</span><br></pre></td></tr></table></figure><p>然后就是与云平台通信，事实上，ESP8266是通过串口和STM32进行通信。所以上面初始化的两个串口，一个是用于与协调器通信，另一个是用于ESP8266。与云平台通信的核心代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cloud_task</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *temp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int8_t</span> tempint=<span class="number">0</span>,humidint=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">uint32_t</span> lastTime;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int8_t</span> erroCount=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int8_t</span> error=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">if</span>(F_AT_RX_FINISH)</span><br><span class="line"> &#123; </span><br><span class="line"> <span class="built_in">printf</span>(AT_RX_BUF);</span><br><span class="line"> USER_DataAnalysisProcess((<span class="keyword">char</span> *)AT_RX_BUF);</span><br><span class="line"> <span class="built_in">memset</span>(IpData, <span class="number">0x00</span>, <span class="number">128</span>);</span><br><span class="line"> ClrAtRxBuf();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>((<span class="keyword">uint32_t</span>)(SYSTICK_get_time()-lastTime&gt;=<span class="number">500</span>)&amp;&amp;(<span class="keyword">uint32_t</span>)(SYSTICK_get_time()-lastTime&lt;=<span class="number">501</span>))</span><br><span class="line"> &#123;</span><br><span class="line">    RTC_Get();</span><br><span class="line">  tmp[<span class="number">0</span>]=USART2_RX_BUF[<span class="number">2</span>];</span><br><span class="line">  tmp[<span class="number">1</span>]=USART2_RX_BUF[<span class="number">3</span>];</span><br><span class="line">  tmp[<span class="number">2</span>]=<span class="string">'\0'</span>;</span><br><span class="line">  <span class="built_in">sscanf</span>(tmp, <span class="string">"%d"</span>, &amp;tempint);</span><br><span class="line">  humid[<span class="number">0</span>]=USART2_RX_BUF[<span class="number">0</span>];</span><br><span class="line">  humid[<span class="number">1</span>]=USART2_RX_BUF[<span class="number">1</span>];</span><br><span class="line">  humid[<span class="number">2</span>]=<span class="string">'\0'</span>;</span><br><span class="line">  <span class="built_in">sscanf</span>(humid, <span class="string">"%d"</span>, &amp;humidint);</span><br><span class="line">  USART2_RX_STA=<span class="number">0</span>;</span><br><span class="line">  <span class="built_in">sprintf</span>(str,<span class="string">"%d-%d-%d %d:%d:%d"</span>,calendar.w_year,calendar.w_month,calendar.w_date,calendar.hour,calendar.min,calendar.sec);</span><br><span class="line"><span class="keyword">if</span>(tempint!=<span class="number">0</span>)</span><br><span class="line">error=SE_SendSensor((<span class="keyword">char</span> *)<span class="string">"temperature"</span>, tempint, (<span class="keyword">char</span> *)str);</span><br><span class="line">   ClrAtRxBuf();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">uint32_t</span>)(SYSTICK_get_time()-lastTime&gt;=<span class="number">1000</span>))</span><br><span class="line"> &#123;</span><br><span class="line">    lastTime=SYSTICK_get_time();</span><br><span class="line">  RTC_Get();</span><br><span class="line">  tmp[<span class="number">0</span>]=USART2_RX_BUF[<span class="number">2</span>];</span><br><span class="line">  tmp[<span class="number">1</span>]=USART2_RX_BUF[<span class="number">3</span>];</span><br><span class="line">  <span class="built_in">sscanf</span>(tmp, <span class="string">"%d"</span>, &amp;tempint);</span><br><span class="line">  humid[<span class="number">0</span>]=USART2_RX_BUF[<span class="number">0</span>];</span><br><span class="line">  humid[<span class="number">1</span>]=USART2_RX_BUF[<span class="number">1</span>];</span><br><span class="line">  <span class="built_in">sscanf</span>(humid, <span class="string">"%d"</span>, &amp;humidint);</span><br><span class="line">  USART2_RX_STA=<span class="number">0</span>; </span><br><span class="line">  <span class="built_in">sprintf</span>(str,<span class="string">"%d-%d-%d %d:%d:%d"</span>,calendar.w_year,calendar.w_month,calendar.w_date,calendar.hour,calendar.min,calendar.sec);</span><br><span class="line"><span class="keyword">if</span>(humidint!=<span class="number">0</span>)</span><br><span class="line">error=SE_SendSensor((<span class="keyword">char</span> *)<span class="string">"humidity"</span>, humidint, (<span class="keyword">char</span> *)str);</span><br><span class="line">   ClrAtRxBuf();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的函数是不断轮询F_AT_RX_FINISH，如果有内容就对内容进行解析。</p><p>一方面是USER_DataAnalysisProcess函数用于解析云平台发来的控制信息。另一方面，就是调用SE_SendSensor函数把采集到的数据进行上传到云平台。</p><p>解析开关灯，其实是解析一种json格式的数据，关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USER_DataAnalysisProcess</span><span class="params">(<span class="keyword">char</span> *RxBuf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *cmdid = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">uint8_t</span> TxetBuf[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strstr</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)RxBuf, (<span class="keyword">const</span> <span class="keyword">char</span> *)PING_REQ) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ESP8266_IpSend((<span class="keyword">char</span> *)PING_RSP, <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)PING_RSP)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">DBG_B_INFO(<span class="string">"心跳包失败\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">DBG_B_INFO(<span class="string">"心跳包\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strstr</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)RxBuf, (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="string">"\"t\":5"</span>) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strstr</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)RxBuf, (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="string">"\"apitag\":\"bool_work\""</span>) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(TxetBuf,<span class="number">0x00</span>,<span class="number">128</span>);</span><br><span class="line"><span class="keyword">if</span>((<span class="built_in">strstr</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)RxBuf, (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="string">"\"data\":1"</span>) != <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">DBG_B_INFO(<span class="string">"开灯"</span>);</span><br><span class="line">  u2_printf(<span class="string">"LED_ON"</span>);</span><br><span class="line">cmdid = USER_GetJsonValue((<span class="keyword">char</span> *)RxBuf, (<span class="keyword">char</span> *)<span class="string">"cmdid"</span>);</span><br><span class="line"><span class="built_in">sprintf</span>((<span class="keyword">char</span> *)TxetBuf,<span class="string">"&#123;\"t\":6,\"cmdid\":%s,\"status\":0,\"data\":1&#125;"</span>,cmdid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ESP8266_IpSend((<span class="keyword">char</span> *)TxetBuf, <span class="built_in">strlen</span>((<span class="keyword">char</span> *)TxetBuf)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">DBG_B_INFO(<span class="string">"发送响应失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((<span class="built_in">strstr</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)RxBuf, (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="string">"\"data\":0"</span>) != <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">DBG_B_INFO(<span class="string">"关灯"</span>);</span><br><span class="line">  u2_printf(<span class="string">"LED_OFF"</span>);</span><br><span class="line">cmdid = USER_GetJsonValue((<span class="keyword">char</span> *)RxBuf, (<span class="keyword">char</span> *)<span class="string">"cmdid"</span>);</span><br><span class="line"><span class="built_in">sprintf</span>((<span class="keyword">char</span> *)TxetBuf,<span class="string">"&#123;\"t\":6,\"cmdid\":%s,\"status\":0,\"data\":0&#125;"</span>,cmdid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ESP8266_IpSend((<span class="keyword">char</span> *)TxetBuf, <span class="built_in">strlen</span>((<span class="keyword">char</span> *)TxetBuf)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">DBG_B_INFO(<span class="string">"发送响应失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这部分的代码可以进行拓展，例如说可以加入控制继电器等等。稍加改动即可。值得注意的是这里需要事先设置好云平台那边的apitag，apitag一定要一致才可正常收发数据。安卓端也是同理。</p><p>32端除了与云平台进行通信，还要动态刷新LCD显示屏。这部分关键代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LCD_ShowString(<span class="number">30</span>,<span class="number">60</span>,<span class="number">200</span>,<span class="number">16</span>,<span class="number">16</span>,<span class="string">"Temperature:"</span>);     </span><br><span class="line">LCD_ShowString(<span class="number">130</span>,<span class="number">60</span>,<span class="number">200</span>,<span class="number">16</span>,<span class="number">16</span>,tmp);   </span><br><span class="line">LCD_ShowString(<span class="number">30</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">16</span>,<span class="number">16</span>,<span class="string">"Humidity:"</span>);</span><br><span class="line">LCD_ShowString(<span class="number">120</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">16</span>,<span class="number">16</span>,humid);</span><br><span class="line">LCD_ShowString(<span class="number">30</span>,<span class="number">280</span>,<span class="number">200</span>,<span class="number">16</span>,<span class="number">16</span>,<span class="string">"(c) Security Plus Inc."</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="安卓端"><a href="#安卓端" class="headerlink" title="安卓端"></a>安卓端</h2><p>安卓端这边的设计一时半会也讲不清，这里先假设你有一定的云平台开发经验。下面链接是我之前暑假期间写的，可以先去看看。</p><p>传送门：<a href="https://stefancharles.xyz/2019/09/04/Android_Code_newland_one/">新大陆安卓端笔记(一)</a></p><p>我这里就主要写下关键的部分。安卓端主要使用新大陆的SDK进行通信。可以显示温度和湿度信息到仪表盘上，并且可以控制灯和风扇等。</p><p>关键的获取温度代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    netWorkBusiness.getSensor(deviceID, <span class="string">"temperature"</span>, <span class="keyword">new</span> NCallBack&lt;BaseResponseEntity&lt;SensorInfo&gt;&gt;() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(<span class="keyword">final</span> Call&lt;BaseResponseEntity&lt;SensorInfo&gt;&gt; call, <span class="keyword">final</span> Response&lt;BaseResponseEntity&lt;SensorInfo&gt;&gt; response)</span> </span>&#123;  </span><br><span class="line">            BaseResponseEntity baseResponseEntity = response.body();  </span><br><span class="line">            <span class="keyword">if</span> (baseResponseEntity != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">final</span> Gson gson = <span class="keyword">new</span> Gson();  </span><br><span class="line">                JSONObject jsonObject;  </span><br><span class="line">                String msg = gson.toJson(baseResponseEntity);  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    jsonObject = <span class="keyword">new</span> JSONObject(msg);   <span class="comment">//解析数据.  </span></span><br><span class="line">                    JSONObject resultObj = (JSONObject) jsonObject.get(<span class="string">"ResultObj"</span>);  </span><br><span class="line">                    String TempValue = resultObj.getString(<span class="string">"Value"</span>);  </span><br><span class="line">                    temperature_d = Double.valueOf(TempValue).intValue();  </span><br><span class="line">                    temperature = (<span class="keyword">int</span>) temperature_d;  </span><br><span class="line">                    mDeviceTempHum.setTemp(temperature);<span class="comment">//显示温度数据到仪表盘  </span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (JSONException e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>控制终端节点的关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">btn_light.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(!light_state)&#123;  </span><br><span class="line">            control(deviceID,<span class="string">"bool_work"</span>,<span class="number">1</span>);  <span class="comment">// 开灯.  </span></span><br><span class="line">            btn_light.setCompoundDrawablesWithIntrinsicBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, R.drawable.power_on);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>&#123;  </span><br><span class="line">            control(deviceID,<span class="string">"bool_work"</span>,<span class="number">0</span>);  <span class="comment">//关灯.  </span></span><br><span class="line">            btn_light.setCompoundDrawablesWithIntrinsicBounds(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,R.drawable.power_off);  </span><br><span class="line">        &#125;  </span><br><span class="line">        light_state = !light_state;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h2><h3 id="安卓端-1"><a href="#安卓端-1" class="headerlink" title="安卓端"></a>安卓端</h3><p><img src="https://i.loli.net/2020/01/05/NjdCRkQiU6ZrL7h.png" alt="image.png"></p><p>登录界面如上图。登录界面可以左右滑动切换背景。</p><p>这里有点意思的是，我使用的账号的调用API的密钥过期了，而我没有重新申请一个。导致我获取温度的时候一直失败，但是诡异的是我可以正常登录进去。我仔细检查了apitag等参数也没有问题，但是问题依然没解决。我以为新大陆那边改了api，于是我进调试模式试图获取一下登录后的用户token，这时回给我的不是token，而是过期提示。我这才发现密钥已经过期，重新申请后就正常获取温度了。</p><p><img src="https://i.loli.net/2020/01/05/SI3xKtlJZ6vanLs.png" alt="image.png"></p><p><img src="https://i.loli.net/2020/01/05/Hi89ODCdNRVtyY5.png" alt="image.png"></p><p>当密钥过期后不会返回token，我寻思着应该是这里返回的state依然和正常登录一样的，导致安卓端调用登录api时发现返回状态是成功登录，但是没有检查token是否返回数值。</p><p><img src="https://i.loli.net/2020/01/05/FZTsP8RBXfyWGlO.png" alt="image.png"></p><p>登录成功后，进入主界面，可以看到温度和湿度信息，并通过下面的两个按钮来控制灯和风扇。按钮有两种状态，红色按钮代表关闭，绿色按钮代表开启。点击“查看历史温度”可以查看历史温度或者湿度的曲线图。</p><hr><h3 id="C-端串口老助手"><a href="#C-端串口老助手" class="headerlink" title="C#端串口老助手"></a>C#端串口老助手</h3><p><img src="https://i.loli.net/2020/01/05/KJLgE3d6PeSvNtM.png" alt="image.png"></p><p>这里串口线接到终端节点上，接32端时还是有很多问题，这里待解决。</p><hr><h2 id="总体概览"><a href="#总体概览" class="headerlink" title="总体概览"></a>总体概览</h2><p><img src="https://i.loli.net/2020/01/05/3B2VpwUR97kn68Y.png" alt="image.png"></p><p>总体连接图就是这样的了。这几天实验室空调坏了，实验室温度只有18度。</p><p>经过我们小组成员的努力，改进了终端节点LED的响应速度。但是实际上的响应速度还是有点不理想，没有完美。主要原因可能是它使用的轮询的方式接收来自云平台的消息，而不是采用中断方式，这一点可以以后进行改进。</p><p>在云平台的网页端也可以看到温湿度变化趋势。</p><p><img src="https://i.loli.net/2020/01/05/k84dyCIOaWhvPgt.png" alt="image.png"></p><hr><h2 id="与本文不搭边的结语"><a href="#与本文不搭边的结语" class="headerlink" title="与本文不搭边的结语"></a>与本文不搭边的结语</h2><p>“Part of the journey is the end”，中文翻译大致是“结束亦是旅途的一部分。”。我个人感觉，如果把这句话翻译成中文倒缺了一点意味。</p><p>这句话是出自于电影《复仇者联盟-终局之战》里钢铁侠Stark在进行时空跳跃前给大家留下的全息留言中的一句话。以防这一次他离开就再也回不来而留下的“Last Words”。当我第一次在电影院听到他说这句话的时候，我听出了这句话里面的遗憾和不舍。对他自己而言，他已经有了一个完美的家庭，有一个爱他三千遍的小女儿。为了peter和其他消失的人能够“复活”，他冒着失去他所拥有的人的风险，如果他自己没能回来，那不能陪伴遗憾和不舍自然会有。对我们观众而言，从十年前的《钢铁侠1》开始到如今这个系列最后的完结，感觉就像几年前而已，没想到时间过得这么快，没想到都要面临Iron Man的离开，至少对我来说，我是感觉到深深的不舍和遗憾。</p><p>于是我把这句话设成了我的QQ的签名，再也没改过，这一晃差不多一年又过去了。这次考完考试的我又突然想再看一遍《 Endgame》。而这一次当我再看到那句话的时候，我又读到了新的意味，那是一种释然。告别的释然。遗憾和不舍中又带着告别的释然。我想到了什么，但是我又具体形容不出这种感觉。</p><p>我的意思是，一年的时间已经告一段落，每个人或多或少have lost something。这是一种结束，我试图让我自己看明白一个道理——结束也是旅途的一部分。我也试图让我自己面对结束的时候，尽力挥手告别就好。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zigbee </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C#】串口老助手</title>
      <link href="/2019/12/28/UartHelper/"/>
      <url>/2019/12/28/UartHelper/</url>
      
        <content type="html"><![CDATA[<h1 id="自制C-端串口老助手"><a href="#自制C-端串口老助手" class="headerlink" title="自制C#端串口老助手"></a>自制C#端串口老助手</h1><p>因为我打算在Zigbee课程设计中使用到电脑通过串口线与Zigbee开发板相连接，所以准备自己写一个C#端的串口老助手。方便我们后面进行工作。</p><hr><blockquote><p>Don’t forget the things you once have owned.</p><p>Treasure the things you can’t get.</p><p>Don’t give up the things belong yo you.</p><p>Keep those lost things in memory.</p></blockquote><hr><a id="more"></a><h2 id="SerialPort-类"><a href="#SerialPort-类" class="headerlink" title="SerialPort 类"></a>SerialPort 类</h2><p>在.NET Framework 2.0以上里提供了SerialPort类，该类主要实现串口数据通信等。<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.ports.serialport?view=netframework-4.8" target="_blank" rel="noopener">点击这里去官方介绍</a>。</p><p>其实大部分工作.Net已经帮我们做好了。所以总体来说，我们要做的事情其实很简单。</p><h2 id="串口操作步骤"><a href="#串口操作步骤" class="headerlink" title="串口操作步骤"></a>串口操作步骤</h2><p>首先实例化串口对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SerialPort serialPort = new SerialPort();</span><br></pre></td></tr></table></figure><p>对串口的配置操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">serialPort.PortName = &quot;COM3&quot;;//串口名</span><br><span class="line">serialPort.BaudRate = 9600;//波特率</span><br><span class="line">serialPort.DataBits = 8;//数据位</span><br><span class="line">serialPort.Parity = Parity.None;//校验位</span><br><span class="line">serialPort.StopBits = StopBits.One;//停止位</span><br><span class="line">serialPort.ReadTimeout = 1000;//读串口延时</span><br><span class="line">serialPort.WriteTimeout = 1000;//写串口延时</span><br></pre></td></tr></table></figure><p>打开和关闭串口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">serialPort.Open();//打开串口</span><br><span class="line">serialPort.Close();//关闭串口</span><br></pre></td></tr></table></figure><p>读写串口数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Byte[] InputBuf = new Byte[128];</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">serialPort.Read(InputBuf, 0, serialPort.BytesToRead);</span><br><span class="line">System.Threading.Thread.Sleep(50);</span><br><span class="line">ASCIIEncoding encoding = new ASCIIEncoding();</span><br><span class="line">textBoxReceive.Text += encoding.GetString(InputBuf);</span><br><span class="line">&#125;</span><br><span class="line">catch (System.Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox.Show(ex.ToString());</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是，一开始我用的ReadLine()方法，而ReadLine()是阻塞的，直至遇到一个换行符后返回。在读取数据时，如果一直没有遇到换行符，那么在等待ReadTimeout时间后，抛出一个TimeoutException。默认情况下，ReadTimeout为InfiniteTimeout。这样，ReadLine一直处于阻塞状态，直至有新一行数据到达。</p><p>这也就导致我一开始测试的时候一直提示在这里TimeoutException。可以在Zigbee开发板里的串口回调函数加入一换行符解决这个问题，但是在硬件端做这件事麻烦很多，而且传输了一些不是很有必要数据。所以我这里换一种方式，直接调用serialPort.Read方法读到一个Byte[]数组里。后面再转String输出到textBox里。</p><p>另外，WriteLine()方法也是阻塞的，如果另一方不能及时接收数据，就会引起TimeoutException异常。<br>由于ReadLine()和WriteLine()方法都是阻塞式的，在程序使用SerialPort 进行串口通讯时，一般应该把读写操作交由其他线程处理，避免因为阻塞而导致程序不响应。</p><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p>为了方便我们进行操作，我们画一个简单的界面。界面按喜好随意布置。</p><p><img src="https://i.loli.net/2019/12/28/FeNius4oTkE7fWv.png" alt="image.png"></p><p>上图是一个Demo。左边是5个label和5个combobox，用来自由选择串口号，波特率等。当串口不处于打开状态时，这些combobox的enable才置true，否则置false。这里就在“打开/关闭串口”的button里的click事件写相关判断即可。</p><p>参考代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">private void buttonOpenCloseCom_Click(object sender, EventArgs e)</span><br><span class="line"> &#123;</span><br><span class="line">     if (!serialPort.IsOpen)//串口处于关闭状态</span><br><span class="line">     &#123;</span><br><span class="line">         </span><br><span class="line">         try</span><br><span class="line">         &#123;</span><br><span class="line">             </span><br><span class="line">             if (comboBoxCom.SelectedIndex == -1)</span><br><span class="line">             &#123;</span><br><span class="line">                 MessageBox.Show(&quot;Error: 无效的端口,请重新选择&quot;, &quot;Error&quot;);</span><br><span class="line">                 return;</span><br><span class="line">             &#125;</span><br><span class="line">             string strSerialName    = comboBoxCom.SelectedItem.ToString();</span><br><span class="line">             string strBaudRate      = comboBoxBaudRate.SelectedItem.ToString();</span><br><span class="line">             string strDataBit       = comboBoxDataBit.SelectedItem.ToString();</span><br><span class="line">             string strCheckBit      = comboBoxCheckBit.SelectedItem.ToString();</span><br><span class="line">             string strStopBit       = comboBoxStopBit.SelectedItem.ToString();</span><br><span class="line"></span><br><span class="line">             Int32 iBaudRate = Convert.ToInt32(strBaudRate);</span><br><span class="line">             Int32 iDataBit  = Convert.ToInt32(strDataBit);</span><br><span class="line"></span><br><span class="line">             serialPort.PortName = strSerialName;//串口号</span><br><span class="line">             serialPort.BaudRate = iBaudRate;//波特率</span><br><span class="line">             serialPort.DataBits = iDataBit;//数据位</span><br><span class="line"></span><br><span class="line">             </span><br><span class="line"></span><br><span class="line">             switch (strStopBit)            //停止位</span><br><span class="line">             &#123;</span><br><span class="line">                 case &quot;1&quot;:</span><br><span class="line">                     serialPort.StopBits = StopBits.One;</span><br><span class="line">                     break;</span><br><span class="line">                 case &quot;1.5&quot;:</span><br><span class="line">                     serialPort.StopBits = StopBits.OnePointFive;</span><br><span class="line">                     break;</span><br><span class="line">                 case &quot;2&quot;:</span><br><span class="line">                     serialPort.StopBits = StopBits.Two;</span><br><span class="line">                     break;</span><br><span class="line">                 default:</span><br><span class="line">                     MessageBox.Show(&quot;Error：停止位参数错误&quot;, &quot;Error&quot;);</span><br><span class="line">                     break;</span><br><span class="line">             &#125;</span><br><span class="line">             switch (strCheckBit)             //校验位</span><br><span class="line">             &#123;</span><br><span class="line">                 case &quot;None&quot;:</span><br><span class="line">                     serialPort.Parity = Parity.None;</span><br><span class="line">                     break;</span><br><span class="line">                 case &quot;Odd&quot;:</span><br><span class="line">                     serialPort.Parity = Parity.Odd;</span><br><span class="line">                     break;</span><br><span class="line">                 case &quot;Even&quot;:</span><br><span class="line">                     serialPort.Parity = Parity.Even;</span><br><span class="line">                     break;</span><br><span class="line">                 default:</span><br><span class="line">                     MessageBox.Show(&quot;Error：校验位参数错误&quot;, &quot;Error&quot;);</span><br><span class="line">                     break;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             if (saveDataFile != null)</span><br><span class="line">             &#123;</span><br><span class="line">                 saveDataFS = File.Create(saveDataFile);</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             //打开串口</span><br><span class="line">             serialPort.Open();</span><br><span class="line"></span><br><span class="line">             //打开串口后设置将不再有效</span><br><span class="line">             comboBoxCom.Enabled = false;</span><br><span class="line">             comboBoxBaudRate.Enabled = false;</span><br><span class="line">             comboBoxDataBit.Enabled = false;</span><br><span class="line">             comboBoxCheckBit.Enabled = false;</span><br><span class="line">             comboBoxStopBit.Enabled = false;</span><br><span class="line">             radioButtonSendDataASCII.Enabled = false;</span><br><span class="line">             radioButtonSendDataHex.Enabled = false;</span><br><span class="line">             radioButtonReceiveDataASCII.Enabled = false;</span><br><span class="line">             radioButtonReceiveDataHEX.Enabled = false;</span><br><span class="line">             buttonSendData.Enabled = true;</span><br><span class="line">             Button_Refresh.Enabled = false;</span><br><span class="line"></span><br><span class="line">             buttonOpenCloseCom.Text = &quot;关闭串口&quot;;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">         catch(System.Exception ex)</span><br><span class="line">         &#123;</span><br><span class="line">             MessageBox.Show(&quot;Error:&quot; + ex.Message, &quot;Error&quot;);</span><br><span class="line">             return;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     else //串口处于打开状态</span><br><span class="line">     &#123;</span><br><span class="line">         </span><br><span class="line">         serialPort.Close();//关闭串口</span><br><span class="line">         //串口关闭时设置有效</span><br><span class="line">         comboBoxCom.Enabled = true;</span><br><span class="line">         comboBoxBaudRate.Enabled = true;</span><br><span class="line">         comboBoxDataBit.Enabled = true;</span><br><span class="line">         comboBoxCheckBit.Enabled = true;</span><br><span class="line">         comboBoxStopBit.Enabled = true;</span><br><span class="line">         radioButtonSendDataASCII.Enabled = true;</span><br><span class="line">         radioButtonSendDataHex.Enabled = true;</span><br><span class="line">         radioButtonReceiveDataASCII.Enabled = true;</span><br><span class="line">         radioButtonReceiveDataHEX.Enabled = true;</span><br><span class="line">         buttonSendData.Enabled = false;</span><br><span class="line">         Button_Refresh.Enabled = true;</span><br><span class="line"></span><br><span class="line">         buttonOpenCloseCom.Text = &quot;打开串口&quot;;</span><br><span class="line"></span><br><span class="line">         if (saveDataFS != null)</span><br><span class="line">         &#123;</span><br><span class="line">             saveDataFS.Close(); // 关闭文件</span><br><span class="line">             saveDataFS = null;//释放文件句柄</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NetSecurity】期末复习知识点</title>
      <link href="/2019/12/25/Netsecurereview/"/>
      <url>/2019/12/25/Netsecurereview/</url>
      
        <content type="html"><![CDATA[<h1 id="NetSecurity期末复习知识点"><a href="#NetSecurity期末复习知识点" class="headerlink" title="NetSecurity期末复习知识点"></a>NetSecurity期末复习知识点</h1><p>本篇文章按<strong>计算机网络安全</strong>的PPT按章节进行知识点进行梳理。考试当天将会暂时关闭本博客。请理解。文中若有疏漏之处还请联系我改正。</p><hr><blockquote><p>世界依然美丽，却没有你想要守护的那些东西。你抛弃了那些东西，只为守护你自己。路的末端，万籁俱寂。回首怅望，再也找不见，那份即使燃烧生命也应紧握手中的美丽。——《隐形守护者-美丽世界线》</p></blockquote><hr><blockquote><p>The world is still beautiful, but without those things you want to protect. You abandoned those things just to protect yourself. At the end of the road, everything is silent. Looking back, you will never see it again, even if the life is burning, the beauty in the hands should be shaken tightly.</p></blockquote><hr><a id="more"></a><h2 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h2><p>1.网络安全的属性</p><ul><li>机密性</li><li>完整性</li><li>可用性</li><li>非否认性</li><li>可控性</li><li>真实性</li></ul><p>其中，机密性，完整性，可用性通常被认为是网络安全的三个基本属性。</p><hr><p>2.OSI （Open System Interconnection Model）安全体系结构主要关注<strong>安全攻击，安全机制，安全服务</strong>。</p><p>3.安全攻击：</p><p>分类：安全攻击分为被动攻击和主动攻击。</p><p>被动攻击的特征是对传输进行窃听和监测。被动攻击的目的是获得传输的信息，不对信息作任何改动。被动攻击主要威胁信息的保密性。常见的被动攻击包括消息内容的泄漏和流量分析。</p><p>主动攻击主要威胁信息的完整性、可用性和真实性。主动攻击包括<strong>伪装，重放，消息篡改，拒绝服务</strong>。</p><p>4.安全机制：</p><p>定义：阻止安全攻击及恢复系统的机制称为安全机制。</p><p>分类：OSI 安全框架将安全机制分为<strong>特定的安全机制</strong>和<strong>普遍的安全机制</strong>。</p><p>特定的安全机制（与安全服务有关的机制） 包括：加密、数字签名、访问控制、数据完整性、认证交换、流量填充、路由控制和公证。</p><p>普遍的安全机制 （与管理软件相关的机制）包括：可信功能机制、安全标签机制、事件检测机制、审计跟踪机制、安全恢复机制。</p><p>5.安全目标：</p><p>定义：信息安全的目标 是指能够满足一个组织或者个人的所有安全需求。</p><p>CIA：CIA 三元组的目标，即保密性(Confidentiality) ，完整性 (Integrity) 和可用性 (Availability)。</p><p>安全需求：可用性 (Availability)，完整性 (Integrity) ，保密性(Confidentiality)，可追溯性(Accountability)，保障(Assurance) 。</p><p>6.安全服务模型：</p><p><img src="https://i.loli.net/2019/12/25/oPHRET21gKwxc3D.png" alt="image.png"></p><p>主要组成：<strong>支撑服务，预防服务，检测和恢复服务</strong>。</p><p>支撑服务主要有：<strong>鉴别，密钥管理，安全性管理，系统保护</strong>。</p><p>预防服务主要有：<strong>受保护的通信，认证，授权，访问控制，交易隐私，不可否认</strong>。</p><p>恢复服务主要有：<strong>审计，入侵检测，整体检验，恢复安全状态</strong>。</p><blockquote><p>访问控制就是要根据一定的原则对合法用户的 <strong>访问权限</strong> 进行控制，以决定他可以访问那些资源以及以什么样的方式访问这些资源。</p></blockquote><hr><p>7.简述三种常用的访问控制策略。</p><p>（1）<strong>入网访问控制</strong>：入网访问控制是网络访问的第一层访问控制。对用户可规定所能登入到的服务器及获取的网络资源，控制准许用户入网的时间和登入入网的工作站点。用户的入网访问控制分为用户名和口令的识别与验证、用户账号的默认限制检查。该用户若有任何一个环节检查未通过，就无法登入网络进行访问。</p><p>（2）<strong>网络的权限控制</strong>：网络的权限控制是防止网络非法操作而采取的一种安全保护措施。用户对网络资源的访问权限通常用一个访问控制列表来描述。</p><p>从用户的角度，网络的权限控制可分为以下3类用户：</p><ul><li><p>特殊用户。具有系统管理权限的系统管理员等。</p></li><li><p>一般用户。系统管理员根据实际需要而分配到一定操作权限的用户。</p></li><li><p>审计用户。专门负责审计网络的安全控制与资源使用情况的人员。</p></li></ul><p>（3）<strong>目录级安全控制</strong>：目录级安全控制主要是为了控制用户对目录、文件和设备的访问，或指定对目录下的子目录和文件的使用权限。用户在目录一级制定的权限对所有目录下的文件仍然有效，还可进一步指定子目录的权限。</p><p>在网络和操作系统中，<strong>常见的目录和文件访问权限</strong>有：系统管理员权限（Supervisor）、读权限（Read）、写权限（Write）、创建权限（Create）、删除权限（Erase）、修改权限（Modify）、文件查找权限（File Scan）、控制权限（Access Control）等。一个网络系统管理员应为用户分配适当的访问权限，以控制用户对服务器资源的访问，进一步强化网络和服务器的安全。</p><hr><p>8.简述什么是基于角色的访问控制RBAC。</p><p>基于角色的访问控制（Role-Based Access Control，RBAC）是通过对角色的访问所进行的控制。使权限与角色相关联，用户通过成为适当角色的成员而得到其角色的权限。可极大地简化权限管理。为了完成某项工作创建角色，用户可依其责任和资格分派相应的角色，角色可依新需求和系统合并赋予新权限，而权限也可根据需要从某角色中收回。减小了授权管理的复杂性，降低管理开销，提高企业安全策略的灵活性。</p><hr><h2 id="第二章-密码学"><a href="#第二章-密码学" class="headerlink" title="第二章 密码学"></a>第二章 密码学</h2><p>1.密码学目标</p><ul><li>隐私和保密性（privacy or confidentiality）</li><li>数据完整性（data integrity）</li><li>授权（authentication）</li><li>非否认（non repudiation）</li></ul><hr><p>2.密码系统包括以下四个方面：明文空间、密文空间、密钥空间、密码算法。</p><hr><p>3.密码的分类</p><p>按照加密过程中转换操作的原理，可分为：<strong>代换密码和置换密码</strong>；</p><p>按照密钥的特点，可分为：<strong>对称密码和非对称密码</strong>；</p><p>按照加密方式不同（处理单元长度不同），可分为：<strong>分组密码和流密码（序列密码）</strong>。</p><hr><p>4.密码学基本概念（五元组 P,C,K,E,D）</p><ul><li>P：明文空间，是所有可能的明文构成的集合</li><li>C：密文空间，是所有可能的密文构成的集合</li><li>K：密钥空间，是所有可能的密钥构成的集合</li><li>E和D分别表示加密算法和解密算法的集合。满足：对每一个k∈K，必然存在一个加密算法 e<sub>k</sub> 和一个解密算法 d<sub>k</sub> ，使得对任意m∈P，恒有 d<sub>k</sub>( e<sub>k</sub> (m)) = m。</li></ul><p>明文：需要被隐蔽的消息称作明文，通常用m表示。 Message or Plaintext。</p><p>另一种说法：发送者要发送的信息未经过加密，可以直接分析表达的意思。</p><p>密文：将明文隐蔽后的结果称作密文，通常用c表示。 Ciphertext。</p><p>另一种说法：明文经过加密后的数据信息。</p><p>密钥( Key )：加/解密过程中使用到的明文，密文以外的其他参数。密钥又分为加密密钥和脱密密钥。</p><p>加密（ Encryption ）：将明文变换成密文的过程称作加密。</p><p>脱密（ Decryption ）：合法用户由密文恢复出明文的过程称作脱密。</p><p>加密算法：明文到密文的变换法则。</p><p>解密算法：密文到明文的变换法则。</p><hr><p>5.MD5（Message-Digest Algorithm）</p><p>MD5码以 <strong>512</strong> 位分组来处理输入的信息，且每一分组又被划分为16个32位子分组。</p><p>经过处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个 <strong>128</strong> 位散列值。</p><hr><p>6.DES（Data Encryption Standard）参考书本P32</p><p>DES是一个分组加密算法，它以 64 位为分组对数据加密。 64 位一组的明文从算法的一端输入， 64 位的密文从另一端输出。DES 是一个对称算法：加密和解密用的是同一算法（除密钥编排不同以外）。密钥长度为56。</p><p>DES设计中使用了分组密码设计的两个原则：混淆（confusion）和扩散(diffusion)。</p><p>思路：DES对 64 位的明文分组进行操作。通过一个初始置换，将明文分成左半部分和右半部分，各 32 位长。然后进行 16 轮完全相同的运算，这些运算被称为函数 f ，在运算过程中数据与密钥结合。经过 16 轮后，左，右半部分合在一起经过一个末置换（初始置换的逆置换），这样该算法就完成了。</p><p><img src="https://i.loli.net/2019/12/25/6JnsaVrZXWIdliy.png" alt="image.png"></p><p>（1）初始置换IP</p><p>置换主要用于对明文中的各位进行换位，目的在于打乱明文中各位的排列顺序。</p><p>（2）16轮迭代</p><p>经过IP变换的64位结果分为两个部分L<sub>0</sub>和R<sub>0</sub>，作为16轮迭代的输入。密钥K经过拓展产生16个48位的子密钥，每一轮使用一个子密钥。整个16轮迭代适用于加密和解密。</p><p>（3）初始逆置换IP <sup>-1</sup></p><p>对16轮迭代的输出R<sub>16</sub>L<sub>16</sub>进行初始逆置换。目的是为了使加密解密使用同一种算法。</p><p>F函数是16轮迭代阶段的核心，它包括四个过程：</p><p>（1）拓展变换</p><p>把32位输入扩展为48位。</p><p>（2）子密钥混合</p><p>将扩展置换的48位结果与一个48位的子密钥进行异或得到48位的混合结果。</p><p>（3）S盒代换</p><p>S盒的功能是压缩替换，把上面48位的输入分成8组，每组6位，每组通过S盒之后变成4位输出，组合后变为32位。</p><p>（4）P盒置换</p><p>对来自S盒的32位输入做P替换，与IP和FP的操作类似，目的一样是为了打乱排列顺序，让下一轮的每一组数能够通过不同的S盒。</p><hr><p>7.简述公钥密码体制的基本思想以及相对于传统密码体制的优势</p><p>（1）基本思想是把密钥分为两个部分：公钥和私钥。公钥可以向外界公布，私钥是保密的。</p><p>密钥中的任何一个可以用来加密，另一个用来解密。公钥私钥配合使用。</p><p>知道一个密钥无法求解另一个密钥。</p><p>（2）相对于传统密码体制，公钥密码体制的公钥可以记录在一个公共数据库或以可信的方式公开发放。私钥由持有者保存。这样任何人都可以通过公开的途径获得一个用户的公钥来进行保密通信。解密只能由私钥的持有者进行。简化了密钥的分配和分发。</p><p>（3）因为公钥密码体制的非对称性和私钥只由一个人私人持有的特性，使得公钥密码体制不仅可以像传统密码体制一样用于消息加密，实现保密通信外，还可以应用于数字签名，认证领域。</p><hr><p>8.简述Vernam密码体制，并指出实际应用的难点在哪里？</p><p>（1）Vernam加密法也称一次一密(One-Time-Pad)，它使用与消息等长的且无重复的随机密钥来加密消息。密钥只对一个消息进行解密，之后丢弃不用。每条新消息都需要一个与其等长的新密钥。</p><p>（2）难点：</p><ul><li>产生大规模随机密钥的实际困难。一次一密需要很长的密钥序列，且不允许重复，这需要很大的代价产生，传输和保存。</li><li>密钥的分配和维护。对于每一条发送的消息，需要提供发送方和接收方等长度的密钥。</li></ul><hr><p>9.RSA算法的理论基础是数论中“<strong>大整数的素因子分解困难问题</strong>”。</p><p>即求两个大素数的乘积容易，但是将一个大整数分解成两个大素数的乘积困难。</p><p>10.简述RSA算法密钥产生过程。</p><p>（1）随机选择两个大素数p和q，计算N=p*q。其中p，q必须保密。</p><p>（2）根据欧拉函数计算小于N的且与N互素的正整数的<strong>数目</strong>：r= (p-1)(q-1)。</p><p>（3）随机选择一个小于r的整数e，使e与r互质。并求e关于r的模逆元d。即求d令ed≡1(mod r )。</p><p>（4）销毁p和q。</p><p>(N，e)是公钥，(N，d) 是私钥。</p><p>11.简述RSA算法加密解密过程。</p><p>加密：明文以分组为单位进行加密。</p><p>C=M<sup>e</sup> mod n</p><p>解密：</p><p>M = C<sup>d</sup> mod n = (M<sup>e</sup>)<sup>d</sup> mod n</p><hr><h2 id="第三章-消息鉴别和数字签名"><a href="#第三章-消息鉴别和数字签名" class="headerlink" title="第三章 消息鉴别和数字签名"></a>第三章 消息鉴别和数字签名</h2><p>1.简述数字签名的基本原理及过程。</p><p>假定接收方已知发送的公钥，则发送方可以用自己的私钥对<strong>整个消息或消息的散列码</strong>加密产生数字签名，接收方用发送方的公钥对签名进行验证从而确认签名和消息的真实性。</p><p><img src="https://i.loli.net/2019/12/26/iIOPJqwaQMB8g64.png" alt="image.png"></p><hr><p>2.简述哈希函数需要具有哪些基本属性。</p><p>（1）<strong>单向性</strong>：对任意给定的散列码h，找到满足H(X)=h的x在计算上不可行。即给定散列函数h，由消息M计算散列值H(M)是容易的，但是由散列值H(M)计算消息M是不可行的。</p><p>（2）<strong>抗冲突性</strong></p><p>强对抗碰撞性：满足以下条件</p><ul><li>散列函数h的输入是任意长度的消息M</li><li>散列函数h的输出是固定长度的数值</li><li>给定h和M，计算h(M)是容易的。</li><li>给定散列函数h，寻找两个不同的消息M<sub>1</sub>和M<sub>2</sub>，使得其计算出来的散列值相同，在计算上是不可行的。</li></ul><p>弱对抗碰撞性：前三个条件和强对抗碰撞性相同</p><ul><li>给定h和一个随机选择的消息M，寻找消息M<sup>‘</sup>，使得两者计算出的散列值相同在计算上是不可行的。</li></ul><p>（3）<strong>映射分布均匀性和差分分布均匀性</strong></p><hr><p>3.说明数字信封的主要流程以及数字信封的重要作用。</p><p><img src="https://i.loli.net/2019/12/26/BMv1k3Ul8nAmzjF.png" alt="image.png"></p><p>数字信封主要流程：在数字信封中，信息发送方采用对称密钥来加密信息内容，然后将此对称密钥用接收方的公钥来加密（这部分称数字信封）之后，将它和加密后的信息一起发送给接收方，接收方先用相应的私有密钥打开数字信封，得到对称密钥，然后使用对称密钥解开加密信息。</p><p>数字信封重要作用：数字信封既发挥了对称加密算法速度快、安全性好的优点，又发挥了非对称加密算法密钥管理方便的优点。数字信封技术结合了秘密密钥加密技术和公开密钥加密技术的优点，使用两个层次的加密来获得公开密钥（非对称密钥）技术的灵活性和秘密密钥（对称密钥）技术的高效性，保证信息的安全性。</p><hr><p><img src="https://i.loli.net/2019/12/26/GiFaNdxyMVjEgT5.png" alt="image.png"></p><p>基于公钥密码的数字签名的优点：</p><ul><li>可验证：签字是可以被确认的。</li><li>防抵赖：发送方无法抵赖自己发送过报文。</li><li>防假冒：攻击者无法冒充发送者向接收方发送文件。</li><li>防篡改：接收方无法对收到的文件进行篡改。</li><li>防伪造：接收方无法对伪造对报文的签名。</li></ul><hr><h2 id="第四章-身份认证"><a href="#第四章-身份认证" class="headerlink" title="第四章 身份认证"></a>第四章 身份认证</h2><p>1.公钥基础设施（Public key infrastructure）</p><p>定义：简单来说，PKI是基于公钥密码技术，支持公钥管理，提供真实性，保密性，完整性以及可追究性的安全服务，具有普适性的安全基础设施。</p><p>系统组成：</p><ul><li><strong>认证机构</strong> (CA,certificate authority)：CA是PKI的核心执行机构，是PKI的主要组成部分。</li><li><strong>数字证书库</strong>：证书库是CA颁发证书和撤销证书的集中存放地。</li><li><strong>密钥备份及恢复系统</strong> ：必须由可信机构来完成。只能恢复公钥，私钥不能备份。</li><li><strong>证书作废系统</strong></li><li><strong>应用接口API</strong></li></ul><hr><h2 id="第五章-Internet安全"><a href="#第五章-Internet安全" class="headerlink" title="第五章  Internet安全"></a>第五章  Internet安全</h2><p>1.网络层目前最常用的安全协议是 <strong>IPSec</strong> 协议，传输层常用的安全协议是 <strong>SSL/TLS</strong> 协议。</p><ul><li>IPSec(Internet Protocol Security 互联网安全协议)</li><li>SSL(Secure Sockets Layer 安全套接层)</li><li>TLS(Transport Layer Security 传输层安全)</li></ul><p>2.IPSec 工作模式</p><p>IPSec的安全功能主要通过IP认证头（AH）协议以及封装安全载荷（ESP）协议实现。AH和ESP都支持两种模式：<strong>传输模式和隧道模式</strong>。</p><p><img src="https://i.loli.net/2019/12/26/peZ6cJBnlbP9R3u.png" alt="image.png"></p><p>IPSec协议(包括AH和ESP)既可用来保护一个完整的IP载荷，也可用来保护某个IP载荷的上层协议。这两方面的保护分别是由IPSec两种不同的模式来提供。</p><p>其中，传输模式用来保护上层协议；通道模式用来保护整个IP数据报。</p><p>在传输模式中, IPSec先对上层协议进行封装，增加一IPSec头，对上层协议的数据进行保护，然后由IP协议对封装的数据进行处理，增加IP头;</p><p>在通道模式中，IPSec 对IP协议处理后的数据进行封装，增加一IPSec 头，对IP数据报进行保护，然后再由IP协议对封装的数据进行处理，增加新IP头。</p><hr><h2 id="第七章-防火墙"><a href="#第七章-防火墙" class="headerlink" title="第七章 防火墙"></a>第七章 防火墙</h2><p>1.扫描的主要功能。</p><ul><li>扫描目标主机识别其工作状态（开/关机）</li><li>识别目标主机端口的状态（监听/关闭）</li><li>识别目标主机操作系统的类型和版本</li><li>识别目标主机服务程序的类型和版本</li><li>分析目标主机、目标网络的漏洞（脆弱点）</li><li>生成扫描结果报告</li></ul><hr><p>2.防火墙的主要功能。</p><ul><li>建立一个集中的监视点</li><li>隔绝内、外网络，保护内部网络</li><li>强化网络安全策略</li><li>有效记录和审计内、外网络之间的活动</li></ul><hr><p>3.防火墙的主要缺点。</p><ul><li>不能防范不经由防火墙的攻击</li><li>防火墙是一种被动安全策略执行设备，即对于新的未知攻击或者策略配置有误，防火墙就无能为力了</li><li>防火墙不能防止利用标准网络协议中的缺陷进行的攻击</li><li>防火墙不能防止利用服务器系统漏洞进行的攻击</li><li>防火墙不能防止数据驱动式的攻击</li><li>防火墙无法保证准许服务的安全性</li><li>防火墙不能防止本身的安全漏洞威胁</li><li>防火墙不能防止感染了病毒的软件或文件的传输</li></ul><hr><p>4.防火墙的三个基本特性。</p><ul><li>内部网络和外部网络之间的所有网络数据流都必须经过防火墙</li><li>只有符合安全策略的数据流才能通过防火墙</li><li>防火墙自身应具有非常强的抗攻击免疫力</li></ul><hr><p>5.防火墙的类型。</p><ul><li>按照防火墙的软硬件形式分类可分为软件防火墙、硬件防火墙、芯片级防火墙</li><li>按照防火墙的技术分类可分为包过滤型、应用代理型</li><li>按照防火墙体系结构分类可分为单一主机防火墙、路由器集成式防火墙、分布式防火墙</li><li>按照防火墙的性能分类可分为百兆级防火墙、千兆级防火墙</li></ul><hr><p>6.IDS优缺点</p><ul><li>优点：实时监控网络安全状态</li><li>缺点：误报警，缓慢攻击，新的攻击模式</li></ul><p>7.IDS分类</p><ul><li>按照分析方法（检测方法）：异常检测模型（漏报率低，误报率高）、误用检测模型（误报低，漏报高）</li><li>按照数据来源：基于主机、基于网络、混合型</li></ul><p>基于主机：视野集中，易于用户自定义，保护更加周密，对网络流量不敏感<br>基于网络：侦测速度快，隐蔽性好，视野更宽，较少的检测器，占资源少</p><ul><li>按系统各模块的运行方式：集中式、分布式</li><li>根据时效性：脱机分析、联机分析</li></ul><blockquote><p>近期更新，请不定期地刷新本页面来获取最新内容。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NetSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Zigbee】zigbee期末复习知识点</title>
      <link href="/2019/12/18/Zigbeereview/"/>
      <url>/2019/12/18/Zigbeereview/</url>
      
        <content type="html"><![CDATA[<h1 id="Zigbee期末复习知识点"><a href="#Zigbee期末复习知识点" class="headerlink" title="Zigbee期末复习知识点"></a>Zigbee期末复习知识点</h1><p>本篇文章按Zigbee题库进行知识点进行梳理。考试当天将会暂时关闭本博客。请理解。文中若有疏漏之处还请联系我改正。</p><hr><blockquote><p>愿我们在抵达路的末端时，都不会后悔。——《隐形守护者》</p></blockquote><hr><blockquote><p>May we never regret when we reach the end of the road.</p></blockquote><hr><a id="more"></a><h2 id="Zigbee基础部分"><a href="#Zigbee基础部分" class="headerlink" title="Zigbee基础部分"></a>Zigbee基础部分</h2><p>1.Zigbee协议栈层与层之间需要通过服务接入点（SAP）进行信息交换，而各层的服务接入点是采用称为“原语”操作来表述的。服务原语根据功能可分为4种类型，分别为：</p><ul><li>请求（Request）原语， 用户实体要求服务做某项工作， 源（N+1)实体—&gt;源（N）实体</li><li>指示（Indication）原语， 用户实体被告知某事件发生， 目的（N）实体—&gt;目的（N+1)实体</li><li>响应（Response）原语， 用户实体表示对某事件的响应， 目的（N+1)实体—&gt;目的（N）实体</li><li>确认（Confirm）原语， 用户实体收到关于它的请求的答复， 源（N）实体—&gt;源（N+1）实体</li></ul><p>2.Zigbee的基础是<strong>IEEE 802.15.4标准</strong>，其仅处理低级的<strong>物理层和MAC层</strong>协议，Zigbee联盟对<strong>网络层和应用层</strong>协议进行了标准化。</p><p>3.Zstack中Profile文件夹对应Zigbee软件架构中的<strong>AF层</strong>。</p><p>4.MAC层数据帧一共有4种帧类型：<strong>信标帧，数据帧，命令帧，确认帧</strong>。</p><p>5.zigbee的应用层由<strong>APS, AF, ZDO</strong>和制造商定义的应用对象组成。</p><p>6.APP层为zstack协议栈的应用层，是面向<strong>用户</strong>开发的，在这一层用户可以根据自己的需求建立所需要的项目，添加<strong>用户任务</strong>,并通过调用<strong>API</strong>实现项目所需要的功能。</p><p>7.物联网底层感知信息技术：</p><ul><li>RFID技术</li><li>传感器技术</li><li>二维码技术</li></ul><p>8.网络层通过<strong>MCPS-SAP</strong>和<strong>MLME-SAP</strong>接口为MAC层提供接口。</p><p>9.网络层通过<strong>NLDE-SAP</strong>与<strong>NLME-SAP</strong>接口为应用层提供接口服务。具体来说，<strong>NLDE-SAP</strong>属于网络层与应用层<strong>数据服务接口</strong>。<strong>NLME-SAP</strong>属于网络层与应用层<strong>管理服务接口</strong>。</p><p>10.APS子层的构成和接口图。</p><p><img src="https://i.loli.net/2019/12/23/NX793hVsU2IMKkS.png" alt="image.png"></p><hr><h2 id="Zigbee硬件"><a href="#Zigbee硬件" class="headerlink" title="Zigbee硬件"></a>Zigbee硬件</h2><p>1.属于CC2530物理存储器的是：<strong>RAM、Flash、SFR寄存器、信息页面</strong></p><blockquote><p>RAM有两大类，一种称为静态RAM（Static RAM/SRAM），SRAM速度非常快，是目前读写最快的存储设备，但是它非常昂贵，所以只在要求很苛刻的地方使用，如CPU的一级缓冲，二级缓冲。另一种称为动态RAM（Dynamic RAM/DRAM），DRAM保留数据的时间很短，速度也比SRAM慢，不过它还是比任何的ROM都要快，但从价格上来说DRAM相比SRAM要便宜很多。</p></blockquote><p>2.Zigbee技术特点的是<strong>低功耗、低成本、大容量、可靠、时延短、灵活的网络拓扑结构</strong>；Zigbee是一种<strong>近距离 低复杂度 低功耗 低成本</strong>双向无线通讯技术。</p><p>3.CC2530的串口模式分为<strong>异步URAT模式</strong>和<strong>同步SPI模式</strong>。</p><p>4.CC2530包括3个8位输入/输出（I/O）端口，分别是<strong>P0、 P1、 P2</strong>。</p><p>5.Zigbee硬件分为三部分，即 <strong>CC2530核心板、协调器底板 和 路由器底板</strong> 。</p><p>6.在Zigbee网络中具有路由转发功能的节点是<strong>路由器节点</strong>。</p><p>7.CC2530的8051CPU有四个不同的存储空间，分别为<strong>CODE、DATA、XDATA和SFR</strong>。</p><hr><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p>1.Zigbee网络中实现点对点的通信需要使用<strong>单点寻址</strong>地址模式。</p><p>2.在Zigbee网络中协调器需要网络中的每个设备都收到数据使用<strong>广播寻址</strong>模式。</p><p>3.中国使用的Zigbee工作的频段是<strong>2.4GHz</strong>，定义了<strong>16个</strong>信道。</p><blockquote><p>欧洲868MHz，信道1个；美国915MHz，信道10个。</p></blockquote><p>4.IEEE 802.15.4 (物理层)的数字高频调制使用<strong>2.4G直接序列扩频</strong>技术。(direct-sequence spread spectrum，DSSS)</p><hr><h2 id="Zigbee网络结构和拓扑结构"><a href="#Zigbee网络结构和拓扑结构" class="headerlink" title="Zigbee网络结构和拓扑结构"></a>Zigbee网络结构和拓扑结构</h2><p>1.Zigbee网络结构分为4层，从下至上分别为 <strong>物理层 MAC层 网络层 应用层</strong> 。</p><p>2.在Zigbee结构中<strong>物理层</strong>与硬件息息相关。在Zigbee结构中<strong>网络层</strong>与建立网络息息相关</p><p>3.介质访问控制层(MAC)帧被称为MAC协议数据单元(MPDU)，其长度不超过127个字节。它具有四种不同的帧形式，即 <strong>信标帧、数据帧、确认帧、命令帧</strong>。</p><p>4.数据帧的基本结构由三部分构成：<strong>同步头、需要传输的数据、帧尾</strong></p><p>5.<strong>不属于</strong>Zigbee拓扑结构的是<strong>总线网络</strong>。</p><blockquote><p>星形拓扑;树形拓扑;Mesh拓扑（网状拓扑）</p></blockquote><p>6.在Zigbee协议架构中哪一组是属于IEEE802.15.4标准定义的<strong>物理层和MAC层</strong>。</p><p>7.Zigbee的<strong>应用层</strong>的组成：</p><ul><li>应用支持子层（APS）</li><li>Zigbee设备对象 （ZDO）</li><li>Zigbee应用框架（AF）</li><li>Zigbee设备模板制造商定义的应用对象</li></ul><p>8.MAC层提供<strong>MAC层数据服务</strong>和 <strong>MAC层管理服务</strong> ，并负责数据成帧。</p><p>9.ZDO层提供了Zigbee设备管理功能包括：</p><ul><li>网络建立</li><li>发现网络</li><li>加入网络</li><li>应用端点的绑定</li><li>安全管理等服务</li></ul><p>10.在应用程序框架（AF, <strong>Application Framework</strong>）内部，ZigBee 设备对象通过APSDE-SAP来收发数据。总共定义了240个不同的应用对象（Application Object），通过<strong>端点</strong>来描述，端点接口索引号为1~240。此外还有两个特殊端点：</p><ul><li>端点0：只为<strong>ZDO</strong>的数据接口服务</li><li>端点255：供应用对象的广播数据接口功能</li></ul><p>11.ZigBee：<strong>自愈功能</strong>：增加或者删除一个节点，节点位置发生变动，节点发生故障等等，网络都能够自我修复，并对网络拓扑结构进行相应的调整，无需人工干预，保证整个系统仍然能正常工作。</p><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>1.信息管理API函数：</p><ul><li>osal_msg_allocate()</li><li>osal_msg_deallocate()</li><li>osal_msg_send()</li><li>osal_msg_receive()。</li></ul><p>2.如果将CC2530的P1端口设置为外设I/O功能，需要设置<strong>P1SEL</strong>寄存器。</p><p>&lt;1&gt; <strong>PxSEL</strong>：端口功能选择，设置端口是<strong>通用I/O</strong>还是<strong>外设功能</strong>。</p><p>&lt;2&gt; <strong>PxDIR</strong>：作为通用I/O时，用来设置数据的传输方向。输入或者输出。</p><p>&lt;3&gt; <strong>PxINP</strong>：作为通用输入端口时，选择输入模式是<strong>上拉</strong>、<strong>下拉</strong>还是<strong>三态</strong>。</p><hr><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><p>1.列举常用的Zigbee芯片和Zigbee协议栈。</p><p>常见的Zigbee芯片为CC243X系列、CC253X系列和MC1322X系列。</p><p>Zigbee的协议栈分为3种：</p><ul><li>非开源的协议栈：freescale解决方案和microchip解决方案</li><li>半开源的协议栈：TI公司开发的ZStack协议栈是一个半开源的Zigbee协议栈</li><li>开源的协议栈：Freakz是一个彻底开源的Zigbee协议栈。</li></ul><p>2.简述Zstack协议栈中的两种地址类型。</p><p>64位IEEE地址：即MAC地址（也称“长地址”或“扩展地址”），是一个全球唯一的地址，一经分配将跟随设备一生。通常由制造商在设备出厂或被安装时设置。这些地址由IEEE组织来维护和分配。</p><p>16位网络地址：是设备加入网络后，由网络中的协调器分配给设备的地址（也称“短地址”），它在网络中是唯一的，用来在网络中鉴别设备和发送数据。对于协调器，网络地址固定为0x0000。</p><p>3.简述CC2530数据帧的产生过程</p><ul><li>⑴CC2530射频部分产生并自动传输物理层的同步头，包括帧引导序列和帧开始界定符（SFD）。</li><li>⑵通过射频部分传输帧长度域和指定的字节数，包括MAC帧头和MAC负载 。</li><li>⑶通过操作寄存器计算并自动传输帧尾（FSC）。</li></ul><p>4.简述Zigbee网络层功能。</p><p>Zigbee网络中的设备有三种类型：协调器、路由器和终端节点，分别实现不同的功能。协调器具有建立新网络的能力。协调器和路由器具备允许设备加入网络或者离开网络、为设备分配网络内部的逻辑地址、建立和维护邻居表等功能。Zigbee终端节点只需要有加入或离开网络的能力即可。</p><p>5.简述终端节点的作用。</p><p>主要作用可以总结为以下两个方面：</p><ul><li>数据的发送和接收：当一个设备发送数据时，必须指定发送目的节点的长地址或短地址以及端点来进行数据的发送和接收，并且发送方和接收方所使用的端点号必须一致。</li><li>绑定：如果设备之间需要绑定，那么在Zigbee的网络层必须注册一个或者多个端点来进行数据的发送和接收以及绑定表的建立。</li></ul><p>6.简述协议栈的启动流程。</p><p>由协调器的组网（创建PAN ID），终端设备和路由设备发现网络以及加入网络。</p><p>基本流程：main()-&gt;osal_init_system()-&gt;osalInitTasks()-&gt;ZDApp_Init()，进协议栈初始化函数ZDApp_Init()-&gt;ZDOInitDevice()。</p><p>首先在ZMain.c的main函数中进入osal_init_system()函数，该函数通过创建任务表中定义的任务来初始化“任务”系统。这里面关键函数是osalInitTasks()，这个函数在任务初始化为每一层分配一个任务ID号，这个ID和事件处理函数对应成映射。ZDApp_Init()函数里初始化ZigBee协议栈网络，然后进入ZDOInitDevice()初始化设备。</p><p>另一种说法：</p><p>Zmain.c —&gt;  main () —&gt; osal_init_system(); // 任务调度初始化</p><p>osalInitTasks() —&gt;默认启动了最多9个任务，添加到队列 ，序号 : 0~8</p><p>最后通过调用GenericApp_Init（） 实现用户自定义任务的初始化（用户根据项目需要修改该函数）osal_start_system(); —&gt; 进入任务轮询处理</p><p>7.简述Zigbee的osal的工作原理。</p><p>taskArr数组里存放了所有任务的事件处理函数的地址， tasksCnt变量保存了当前的任务个数。tasksEvents是一个指向数组的指针，此数组保存了当前任务的状态。tasksArr[ ]中的第i个事件处理函数对应于tasksEvents中的第i个任务的事件。</p><p>在osal_init_system()这个函数中，osalInitTasks()被调用，所有任务的状态都被初始化为0。在main()函数中，进入osal_start_system()函数，此函数为一个死循环，在这个循环中，完成所有的事件分配。</p><p>当tasksEvents这个数组中的某个元素不为0，即代表此任务有事件需要响应。然后events = (tasksArr[idx])( idx, events ) 语句调用tasksArr数组里面相应的事件处理函数来响应事件。以上，OSAL就将需要响应的事件传递给了对应的任务处理函数进行处理。</p><p>8.凡符合什么条件的短距离通信就可以考虑采用ZigBee技术？</p><p>(1)需要数据采集或监控的网点多;</p><p>(2)要求传输的数据量不大，而要求设备成本低;</p><p>(3)要求数据传输可靠性高，安全性高;</p><p>(4)要求设备体积很小，不便放置较大的充电电池或者电源模块;</p><p>(5)可以用电池供电;</p><p>(6)地形复杂，监测点多，需要较大的网络覆盖;</p><p>(7)对于那些现有的移动网络的盲区进行覆盖;</p><p>(8)已经使用了现存移动网络进行低数据量传输的遥测遥控系统。</p><hr><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p>1.编写点亮LED1以及设置LED1每隔500ms闪烁4次的函数。</p><p>点亮：<strong>HalLedSet(HAL_LED_1,HAL_LED_MODE_ON);</strong></p><p>闪烁：<strong>HalLedBlink (HAL_LED_1,4,50,500);</strong></p><blockquote><p>近期更新，敬请期待</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zigbee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【RFID】期末复习知识提纲</title>
      <link href="/2019/12/16/RFIDreview/"/>
      <url>/2019/12/16/RFIDreview/</url>
      
        <content type="html"><![CDATA[<h1 id="RFID复习提纲"><a href="#RFID复习提纲" class="headerlink" title="RFID复习提纲"></a>RFID复习提纲</h1><p>本篇文章按RFID考试题库里的章节进行知识点进行梳理。考试当天将会暂时关闭本博客。请理解。</p><hr><blockquote><p>We fight, because we knew we had nothing to lose.</p></blockquote><hr><a id="more"></a><h2 id="第一章-传输线理论"><a href="#第一章-传输线理论" class="headerlink" title="第一章 传输线理论"></a>第一章 传输线理论</h2><p>1.阻抗、导纳的含义</p><ul><li>阻抗：对电路中的电流所起的阻碍作用叫做阻抗。</li><li>导纳：描述交流电通过电路或系统时的困难程度。</li></ul><hr><h2 id="第二章-谐振电路"><a href="#第二章-谐振电路" class="headerlink" title="第二章 谐振电路"></a>第二章 谐振电路</h2><ul><li>1.串联正弦交流电路发生谐振的条件是  <strong>U<sub>L</sub> = U<sub>C</sub>，即X<sub>L</sub> = X<sub>C</sub></strong>，谐振时的谐振频率品质因数 <strong>Q=X<sub>L</sub>/R</strong> ，串联谐振又称为<strong>电压谐振</strong>。 </li><li>2.在发生串联谐振时，电路中的感抗与容抗<strong>相等</strong>，此时电路中的阻抗最<strong>小</strong>，电流最 <strong>大</strong>，总阻抗Z= <strong>R</strong>。</li><li>3.谐振发生时，电路中的角频率w<sub>0</sub> = <strong>1/√LC</strong> ，f<sub>0</sub>=<strong>1/2π*√LC</strong>。</li></ul><hr><h2 id="第三章-天线基础"><a href="#第三章-天线基础" class="headerlink" title="第三章 天线基础"></a>第三章 天线基础</h2><p>1.半波振子天线的长度为 <strong>λ/4</strong>。</p><p>2.在弯折线偶极子天线中，当天线弯折次数n增多、弯折高度h增加或者弯折角а增大后，天线的谐振频率<strong>降低</strong>。</p><p>3.已知天线的辐射功率为P∑=30W，且损耗功率为PL=5W。则天线输入功率：<strong>30+5=35w</strong>;效率:<strong>30÷35≈0.857</strong>。</p><p>4.用天线的辐射电阻P∑来度量天线辐射功率的能力，即辐射电阻越 <strong>大</strong> 天线的辐射能力越强。</p><p>5.天线辐射最强的方向所在波瓣称为 <strong>主瓣</strong>，其宽度是衡量天线最大辐射区域 <strong>尖锐程度</strong> 的物理量。</p><p>6.波瓣宽度越<strong>宽</strong>，方向性越 <strong>差</strong> 作用距离越 <strong>近</strong> 抗干扰能力越 <strong>弱</strong> 但是天线的覆盖范围越 <strong>大</strong>。</p><p>7.天线的种类很多，可以按照多种方式进行分类，其中按照<strong>波段</strong>可将天线分为</p><ul><li>长波天线</li><li>中波天线</li><li>短波天线</li><li>超短波天线</li><li>微波天线</li></ul><p>8.简述RFID系统中，读写器与标签之间是怎样进行无线通信的。</p><p>读写器产生高频振荡能量，经过传输线传输到发射天线，然后以电磁波形式向预定方向辐射。接收天线将接收到的电磁波能量通过馈线送到标签。</p><p>9.微带天线的特点</p><ul><li>1.体积小、剖面低、重量轻、易于与载体共形；</li><li>2.成本低、易于批量生产，可方便地与馈电网络、器件和微带电路集成；</li><li>3.散射截面小、波瓣宽；易于实现线极化、圆极化、双极化和双频段工作；</li><li>5.效率低、功率容量低、高Q值、频带窄</li></ul><hr><h2 id="第四章-RFID系统概论"><a href="#第四章-RFID系统概论" class="headerlink" title="第四章 RFID系统概论"></a>第四章 RFID系统概论</h2><p>1.在QR code中，L级的纠错能力可以纠错<strong>7%</strong>数据码字。</p><p>2.物流二维码<strong>不是</strong>二维码类别。</p><p>3.自动识别技术的分类：</p><ul><li>光符号识别技术</li><li>语音识别技术</li><li>生物计量识别技术</li><li>IC卡技术</li><li>条形码技术</li><li>射频识别（RFID）技术</li></ul><p>4.ISBN条形码组成部分。</p><p>国际标准书号，简称ISBN，ISBN码由13位数字组成。中国内的ISBN组成结构：<strong>978 + 组号 + 出版社号 + 书名号 + 校验号</strong></p><p>5.条形码和二维码组成结构上有什么不同？条形码相较于二维码的优缺点是什么？</p><p>条形码是将宽度不等的多个黑条和空白，按一定的编码规则排列，以表达一组信息的图形标识符。</p><p>二维码是用某种特定的几何图形按一定规律在平面分布的黑白相间的图形。</p><ul><li>条形码的优点：技术成熟、使用广泛、设备成本低廉 </li><li>条形码的缺点：信息量少、只支持英文或数字、需与电脑数据库结合</li></ul><p>6.二维码的主要用途，二维码可以包含哪些类型的数据？</p><p>二维码现在广泛用于<strong>物流货品追踪，商业推广，电子身份识别防伪</strong>等服务。</p><p>二维码可以包含<strong>字母，数字，字符，中文，图片 声音</strong>等数据。</p><p>7.比较条形码与二维条形码</p><p>二维码与条形码的关系：二维码是条形码的一个分支</p><p>条形码特点：</p><ul><li>1、可直接显示内容为英文、数字、简单符号</li><li>2、贮存数据不多，主要依靠计算机中的关联数据库</li><li>3、保密性不高</li><li>4、损污后可读性差</li><li>5、对读取设备要求较低</li></ul><p>二维条形码特点：</p><ul><li>1、可直接显示英文、中文、数字、符号、图型</li><li>2、贮存数据量大，可存放1K字符，可用扫描仪直接读取内容，无需另接数据库</li><li>3、保密性高</li><li>4、容错率高</li><li>5、对读取设备要求较高</li></ul><p>8.简述RFID技术的的优点</p><ul><li>1.体积小且形状多样：RFID标签在读取上并不受尺寸大小与形状限制。</li><li>2.耐环境性：RFID对水、油等物质却有极强的抗污性。在黑暗的环境中，RFID标签也能被读取。</li><li>3.可重复使用：标签具有读写功能，电子数据可反复覆盖，可以被回收而重复用。</li><li>4.穿透性强：标签在被纸张、木材和塑料等非金属或非透明的材质包裹的情况下也可以进行穿透性通讯。</li><li>5.数据安全性：标签内的数据通过循环冗余校验的方法来保证标签发送的数据准确性。</li></ul><p>9.简述低频标签的优缺点</p><p>优点：</p><ul><li>标签芯片一般采用普通的CMOS工艺，具有省电、廉价的特点；</li><li>工作频率不受无线电频率管制约束；</li><li>可以穿透水、有机组织、木材等；</li><li>非常适合近距离的、低速度的、数据量要求较少的识别应用等。</li></ul><p>缺点：</p><ul><li>标签存贮数据量较少；</li><li>只能适合低速、近距离识别应用；</li><li>与高频标签相比，标签天线匝数更多，成本更高。</li></ul><hr><h2 id="第六章-RFID读写器"><a href="#第六章-RFID读写器" class="headerlink" title="第六章 RFID读写器"></a>第六章 RFID读写器</h2><p>1.低频RFID通信协议是ISO18000-<strong>2</strong>，高频RFID通信协议是ISO18000-<strong>3</strong>。</p><p>2.读写器由 <strong>天线，射频模块，逻辑控制模块</strong> 构成。</p><p>3.读写器的主要作用：</p><ul><li>通过天线与RFID标签进行无线通信</li><li>可以实现对标签的内存数据的读写</li></ul><p>4.未来的读写器的发展方向：</p><ul><li>多功能</li><li>小型化</li><li>便携式</li><li>嵌入式</li><li>模块化 </li></ul><p>5.读写器主要功能：</p><ul><li>与电子标签通信</li><li>标签供能</li><li>多标签识别</li><li>移动目标识别 </li></ul><p>6.高频读写器的工作频段是：<strong>13.56Mhz</strong>。高频读写器具有 <strong>防冲撞特性</strong> ，可以读取多个电子标签。</p><p>7.高频读写器按照遵从的协议基本可以分为两类读写器：<strong>ISO/IEC14443读写器</strong> 和 <strong>ISO/IEC15693协议读写器</strong>。</p><p>8.ISO/IEC 14443 <strong>近耦合</strong>IC卡，最大的读取距离为<strong>10 cm</strong>。ISO/IEC 15693<strong>疏耦合</strong>IC卡，最大的读取距离为<strong>1 m</strong>。</p><p>9.高频读写器的应用：</p><ul><li>一卡通</li><li>门禁</li><li>二代身份证</li><li>生产自动化</li></ul><p>10.简述读写器中天线的功能</p><p>读写器的天线是发射和接收射频载波信号的设备，负责电流信号和射频载波信号的互换。</p><p>11.简述读写器与电子标签和计算机之间的交互过程</p><p>读写器通过天线发送一定频率的射频信号，当电子标签进入设定工作距离时，向读写器发送自身编码等信息，读写器将数据信息送到计算机进行处理，计算机向控制器发送控制指令。</p><p>12.射频接口模块中“时钟发生器”起什么作用？</p><p>产生稳定间隔且持续不断的电压脉冲作为工作时钟，使模块中各部件随着时钟信号来同步运行。</p><p>13.简述基于低频RFID的汽车防盗系统的工作原理</p><p><img src="https://i.loli.net/2019/12/20/FYfcy4bOwtzenT6.png" alt="image.png"></p><p>硬件选择电子标签、读写电路、单片机、语音报警电路、电源监控电路、存储接口电路和汽车发动机电子点火系统。</p><p>汽车防盗系统由<strong>电子标签</strong>和<strong>读写器</strong>组成。原理是将汽车的机械钥匙与电子标签结合，即将小型电子标签直接装入到钥匙把手内，当一个具有正确识别码的钥匙插入点火开关后，汽车才能启动。</p><hr><h2 id="第七章-编码与调制"><a href="#第七章-编码与调制" class="headerlink" title="第七章 编码与调制"></a>第七章 编码与调制</h2><p>1.CRC冗余校验</p><p>现假设选择的CRC生成多项式为G（X）= X<sup>4</sup> + X<sup>3</sup> + 1，要求出二进制序列<strong>10110011</strong>的CRC校验码。</p><p>（1）首先把生成多项式转换成二进制数，由G（X）= X<sup>4</sup> + X<sup>3</sup> + 1可以知道它一共是5位（总位数等于最高位的幂次加1，即4+1=5），二进制比特串为<strong>11001</strong>。</p><p>（2）因为生成多项式的位数为5，校验码的位数比生成多项式的位数少1。所以CRC校验码的位数为4。因为原数据帧10110011，在它后面再加4个0，得到101100110000，然后把这个数以“模2除法”方式除以生成多项式，得到的余数（即CRC码）为0100。</p><blockquote><p>模2除法:相当于二进制中的逻辑异或运算</p></blockquote><p><img src="https://i.loli.net/2019/12/20/9p16AqHBJPlEQ38.png" alt="image.png"></p><p>（3）把上步计算得到的CRC校验0100替换原始帧101100110000后面的四个“0”，得到新帧101100110100。再把这个新帧发送到接收端。</p><p>（4）当以上新帧到达接收端后，接收端会把这个新帧再用上面选定的除数11001以“模2除法”方式去除，验证余数是否为0，如果为0，则证明该帧数据在传输过程中没有出现差错，否则出现了差错。</p><p>2.抗干扰性能最好的调制方法是<strong>相移键控</strong>。</p><p>3.大部分射频识别系统的耦合方式是<strong>电感耦合</strong>。</p><p>4.电感耦合可以分为<strong>密耦合系统</strong>和<strong>遥耦合系统</strong>。</p><p>5.低成本射频识别系统的主流是<strong>遥耦合系统</strong>。</p><p>6.电磁反向散射这种通信方式利用的是<strong>电磁场</strong>。 </p><p>7.RFID系统的耦合方式可以分为 <strong>电感耦合</strong> 和 <strong>电磁反向散射耦合</strong> 。电感耦合系统中，电阻负载调制通过对 <strong>读写器电压</strong> 调控，最终完成信息的传输。</p><p>8.电感耦合的原理是 <strong>电磁感应原理</strong> ，电磁反射应用的是 <strong>电磁波的空间传播</strong> 规律。</p><p>9.功率放大器的功率增益指的是<strong>输出功率与输入功率之比</strong>，单位是<strong>分贝</strong>。</p><p>10.组成低通滤波器的电子元件包括：<strong>电容，电感，电阻</strong>。</p><p>11.目前国际上广泛采用的频率分布于4种波段:<strong>低频、高频、超高频 和 微波</strong>。它们的典型工作频率分别是<strong>125KHz、13.54MHz、850MHz～910MHz和2.45GHz</strong>。</p><p>12.<strong>动物识别</strong>是低频标签的典型应用，中频标签的典型应用有<strong>电子车票、电子闭锁防盗、小区物业管理</strong> 。</p><p>13.RFID在<strong>低频段</strong>（100MHz以下）工作是基于<strong>电感耦合</strong>，在<strong>高频段</strong>（400MHz以上）工作是基于<strong>电磁反向散射耦合</strong>。</p><p>14.通信系统中为什么要进行调制和解调？调制的分类方法有哪些？</p><p>原因：调制器用于改变高频载波信号，使得载波信号的振幅、频率或相位与要发送的基带信号相关。解调器的作用则是解调获取到的信号，以重现基带信号。</p><p>15.指出下图描述分别是哪种调制方式，简述这三种调制方式的特点。</p><p><img src="https://i.loli.net/2019/12/20/PKU5IErVJ2Gb8jY.png" alt="image.png"></p><p>分别为ASK，FSK和PSK。</p><p><strong>ASK:</strong> 即按载波的幅度受到数字数据的调制而取不同的值，例如对应二进制0，载波振幅为0；对应二进制1，载波振幅为1。调幅技术实现起来简单，但容易受增益变化的影响，是一种低效的调制技术。</p><p><strong>FSK:</strong> 即按数字数据的值（0或1）调制载波的频率。例如对应二进制0的载波频率为F1，而对应二进制1的载波频率为F2。该技术抗干扰性能好，但占用带宽较大。在电话线路上，使用FSK可以实现全双工操作，通常可达到1200bps的速率。</p><p><strong>PSK:</strong> 即按数字数据的值调制载波相位。例如用180相移表示1，用0相移表示0。这种调制技术抗干扰性能最好，且相位的变化也可以作为定时信息来同步发送机和接收机的时钟，并对传输速率起到加倍的作用。</p><p>16.什么是副载波调制，副载波调制在RFID系统中起什么作用</p><p>副载波调制是指首先把信号调制在载波1上，出于某种原因，决定对这个结果再进行一次调制，于是用这个结果去调制另外一个频率更高的载波2。副载波调制在RFID中起到通信，供电的作用。</p><p>17.为何反向不归零编码不用于实际传输？</p><ul><li><p>存在直流分量，信道一般难以传输零频附近的频率分量。</p></li><li><p>接收端判决门限与信号功率有关，使用不方便。</p></li><li><p>不能直接用来提取位同步信号，因为NRZ中不含有位同步信号频率成分。</p></li><li><p>要求传输线中有一根接地。</p></li></ul><p>18.曼彻斯特码如何检测数据传输中的错误？</p><p>当多个电子标签同时发送数据位有不同时，接收的上升边和下降边互相抵消，导致在整个位长度副载波信号是不跳变，可判断为发生碰撞。</p><p>19.给定数据为00110010，求画出修正密勒编码后的波形图。</p><p><img src="https://i.loli.net/2019/12/20/8pulahAZE5CzeHX.png" alt="image.png"></p><p>规则：在“1”的中间时刻跳变，在连续的第二个“0”的开始时刻跳变。</p><p>20.信源编码的作用是什么？</p><ul><li>减少码元数目和速率，进行数据压缩</li><li>将模拟信号转数字信号</li></ul><p>21.差分曼彻斯特码的编码规则与引进原因</p><p>编码规则：在信号位开始时不改变信号极性表示“1”。改变则表示“0”</p><p>引进原因：编码变化少，适合传输高速信息。</p><p>22.RFID电磁反向散射耦合</p><p>读写器天线辐射出的电磁波到达射频天线表面后形成反射回波，反射回波再被读写器天线所接收，从而达到传达信息的目的。</p><p>23.简述电感耦合系统下读写器向电子标签提供能量的过程</p><p>读写器线圈上的交变电流、产生交变磁场，当电子标签进入读写器产生的交变磁场时，电子标签的电感线圈上就会产生交变电流，从而获得读写器提供的能量。</p><p>24.简述电感耦合方式和电磁反向散射耦合方式的数据传输过程</p><p><strong>电感耦合方式：</strong>读写器的电容与天线线圈并联，一起构成并联震荡回路，该回路的谐振使读写器天线线圈产生非常大的电流，谐振频率与读写器发射频率一致，最终调制后的读写器线圈电压与电子标签二进制数据波形相同</p><p><strong>电磁反向散射耦合方式：</strong>功率P1从读写器天线发射出来，只有一部分P1到达标签天线并为其提供电压，整流后为标签芯片供电。到达功率P1的一部分被天线反射，其反射功率为P2，经自由空间后再到达读写器，被读写器天线接收。读写器接收的信号经收发耦合器电路传输至收发器，放大后经电路处理器获得有用信息。</p><p>25.RFID电磁反向散射方式的射频前端由哪些模块组成？</p><p>数/模变换器，模/数变换器，混频器，放大器，滤波器，本地振荡器，双工器，天线</p><h2 id="第八章-防碰撞技术"><a href="#第八章-防碰撞技术" class="headerlink" title="第八章 防碰撞技术"></a>第八章 防碰撞技术</h2><p>1.纯Aloha算法的碰撞周期为<strong>2T</strong>。</p><p>2.在RFID中，采用曼彻斯特码、Miller码和修正Miller码作为传输码型的目的是：<strong>便于同步和检错</strong>。</p><p>3.在射频识别系统中，最常用的防碰撞算法是<strong>时分多址法TDMA</strong>。</p><p>4.在基本二进制算法中，为了从N个标签中找出唯一一个标签，需要进行多次请求，其平均次数L为<strong>log<sub>2</sub>N+1</strong>。</p><p>5.在RFID系统防碰撞算法中 <strong>二进制树搜素算法</strong>是由<strong>读写器</strong>控制驱动。</p><p>6.在RFID系统中，为保持数据的完整性和安全性，必须采用<strong>差错控制和防碰撞算法</strong>。</p><p>7.RFID系统中有两种类型的通信碰撞存在，一种是<strong>阅读器碰撞</strong>，另一种是<strong>电子标签碰撞</strong>。</p><p>8.常用在多路通信方式有：<strong>空分多路法、时分多路法、频分多路法</strong>。在RFID系统中，主要采用<strong>时分多路法</strong>。</p><p>9.TDMA算法又可以分为<strong>基于概率的ALOHA算法</strong>和<strong>确定的二进制算法</strong>两种。上述两种TDMA算法中，会出现“饿死”现象的算法是<strong>基于概率的ALOHA算法</strong>。</p><p>10.帧时隙Aloha算法是在时隙Aloha算法的基础上，把N个时隙组成一帧，每个时隙的长度够一个标签回答完，标签在每N个时隙中，可以随机发送 <strong>1</strong> 次信息。</p><p>11.为了实现二进制搜索算法，就要选用 <strong>曼彻斯特编码</strong> ，因为这种编码可以检测出碰撞位。</p><p>12.为了实现二进制树型搜索算法，引入以下4种命令：</p><ul><li><p>REQUEST——请求</p></li><li><p>SELECT——选择</p></li><li><p>READ-DATA——读出数据</p></li><li><p>UNSELECT——退出选择</p></li></ul><p>13.为了防止碰撞的发生，射频识别系统中需要设计相应的防碰撞技术，在通信中这种技术也称为<strong>多址技术</strong>。不是差错控制技术。</p><p>14.简述碰撞的种类</p><p>阅读器碰撞：多个阅读器同时与一个标签通信。</p><p>电子标签碰撞：多个标签同时响应阅读器的命令发送信息。</p><p>15.简述碰撞的解决方案</p><p>1）空分多址（SDMA）</p><p>2）频分多址（FDMA）</p><p>3）码分多址（CDMA）</p><p>4）时分多址（TDMA）</p><p>16.简述ALOHA算法的工作过程、实现步骤。</p><p>若读写器检测出信号存在相互干扰，读写器就会以向电子标签发出命令，令其停止向读写器传输信号；电子标签在接收到命令信号之后，就会停止发送信息，并会在接下来的一个<strong>随机时间段</strong>内进入到待命状态，只有当该时间段过去后，才会重新向读写器发送信息。<strong>各个电标签待命时间片段长度是随机的，再次向读写器发送信号的时间也不相同，这样减少碰撞的可能性</strong>。</p><p>当读写器成功识别某一个标签后，就会立即对该标签下达命令使之进入到休眠的状态。而其他标签则会一直对读写器所发出命令进行响应，并重复发送信息给读写器，当标签被识别后，就会一一进入到休眠状态，直到读写器识别出所有在其工作区内的标签后，算法过程才结束。</p><p>17.时隙Aloha算法优点是可以将冲突减少一半，将信道负载增加，冲突和性能有何变化？</p><p>冲突会呈指数增加，信道性能降低。</p><p>假设阅读器射频工作范围内存在N个标签，理论上阅读器需要至少N个时隙才能成功识别完，如果在识别过程中，又有标签到达，那么系统吞吐量会直线下降，最坏的情况下，即使多次搜索也未能识别导致“饿死现象”。</p><p>18.二进制树型搜索算法的基本思想是什么？</p><p>不断的将导致碰撞的电子标签进行划分，缩小下一步搜索的标签数量，直到只有一个电子标签进行回应。</p><p>19.二进制数型搜索算法为什么选用曼切斯特编码 ?</p><p>如果两个电子标签同时发送的数位有不同的值，则接收的上升沿和下降沿互相抵消。用这种方法可以按位追溯跟踪冲突的出现，可以检测出碰撞位。</p><hr><h2 id="第九章-RFID的安全问题"><a href="#第九章-RFID的安全问题" class="headerlink" title="第九章 RFID的安全问题"></a>第九章 RFID的安全问题</h2><p>1.处理RFID问题更具有挑战性的原因？</p><ul><li>数据容易被偷听</li><li>计算能力和可编程能力都被标签本身的成本所约束</li></ul><p>2.RFID面临的攻击有哪些？</p><ul><li><p>1.侵入电子标签数据</p></li><li><p>2.侵入电子标签和读写器之间的通信</p></li><li><p>3.侵入读写器内数据</p></li><li><p>4.侵入主机系统</p></li></ul><p>3.RFID系统安全解决方案</p><p>物理方法：杀死标签，法拉第网罩，主动干扰，阻止标签</p><p>逻辑方法：Hash锁，随机Hash锁，Hash链，匿名ID方案，重加密方案</p><p>4.简述hash锁方案原理</p><p>标签使用metaID，标签内部有一个用于存储临时metaID的内存。</p><p>在锁定状态下，标签用metaID响应查询；</p><p>在非锁定状态下，标签向读写器提供自己的信息。</p><h2 id="第十章-物联网架构RFID标准"><a href="#第十章-物联网架构RFID标准" class="headerlink" title="第十章 物联网架构RFID标准"></a>第十章 物联网架构RFID标准</h2><p>1.RFID标准体系主要包括<strong>技术标准</strong>，<strong>数据内容标准</strong>，<strong>性能标准</strong>，<strong>应用标准</strong>。</p><p>2.动物的无线射频识别高级标签第一部分的空中接口属于<strong>应用标准</strong>。</p><p>3.第二代身份证是符合<strong>ISO/IEC 14443 TYPE B</strong>协议的射频卡。</p><p>4.GB/T20563 2006在RFID标准体系中属于<strong>应用标准</strong>。</p><p>5.ISO/IEC 18000标准系列中包含了 <strong>6</strong> 个部分，18000-7定义的<strong>超高频</strong>频段.</p><p>6.ISO/IEC 15693标准中标签到读写器的数据编码采用  <strong>曼彻斯特编码</strong>  方式。</p><p>7.ISO/IEC 15693标准中标签有四种状态，分别是 <strong>断电</strong>、<strong>准备</strong>、<strong>静默</strong>、<strong>选择</strong> 。</p><p>8.ISO/IEC 15693标准中工作频率范围为 <strong>13.56MHz±7KHz</strong>  ，工作磁场范围为  <strong>0.15A/m~5A/m</strong>  。</p><p>9.<strong>编码标准</strong> 和 <strong>通信协议（通信接口）</strong>是RFID标准中争夺比较激烈的部分，两者也构成了RFID标准的核心。这两者分别属于 <strong>数据内容标准</strong>和<strong>技术标准</strong>。</p><p>10.物联网标准是 <strong>EPCglobal</strong> 所特有的。</p><p>11.ISO/IEC、EPCglobal和UID这三个标准组织制定的标准相互之间并不兼容，主要差别在 <strong>通讯方式</strong> 、 <strong>防冲突协议</strong> 和 <strong>数据格式</strong> 三个方面。</p><p>12.在ISO/IEC 14443标准协议中，规定载波频率为 <strong>13.56MHz</strong> 。</p><p>13.ISO/IEC 14443标准由 <strong>物理特性</strong>  、 <strong>射频能量和信号接口</strong>  、<strong>初始化和防碰撞</strong>  、 <strong>传输协议</strong> 四个部分组成。</p><p>14.ISO/IEC 18000-2标准的标签分为两个类型Type-A和Type-B,它们在 <strong>物理层</strong> 存在不同，但是支持相同的 <strong>协议和防碰撞机制</strong>，Type-A标签工作在 <strong>双工通信</strong> 模式下，Type-B标签工作在 <strong>半双工通信</strong> 模式下。</p><p>15.ISO/IEC 18000-6标准的Type-A采用 <strong>ALOHA</strong> 防碰撞算法，Type-B采用 <strong>二叉树</strong> 防碰撞算法，均采用 <strong>双相间隔码编码</strong>。</p><p>16.ISO/IEC 18000-4标准定义了 2.4GHz的空中接口通信协议参数，主要应用于 <strong>货品管理领域</strong>。ISO/IEC 18000-4标准定义了 433MHz的空中接口通信协议参数，应用于 <strong>单品应用管理方面</strong> 。</p><p>17.GB/T20563 2006标准是 <strong>动物射频识别代码结构</strong> 标准的简称，其规定了代码结构分为三部分：<strong>控制代码段（第1至16位）</strong>，国家和地区代码段和国家动物代码段。</p><p>18.RFID技术广泛应用的前提是什么？有什么意义？</p><p>RFID技术广泛应用的前提是<strong>标准化</strong>。可以解决编码通信、空中接口和数据共享等问题，促进RFID技术发展。</p><p>19.ISO/IEC 15693标准中数据元素里的UID, AFI, DSFID分别指的是什么？</p><p>UID(Unique Identifier)唯一标识符。</p><p>AFI(Application Family Identifier)应用族标识符。</p><p>DSFID(Data Storage Format Identifier)数据存储格式标识符。</p><p>20.简述ISO/IEC 14443标准的类型中不同标准所采用的防碰撞算法</p><p>A型采用位检测防碰撞协议</p><p>B型通过一组命令来管理防碰撞过程，防碰撞方案以时隙为基础。</p><p>21.简述ISO/IEC 18000-6系列方案的特点。</p><p>Type-A方案存储容量大，防碰撞能力较弱，且数据结构复杂，指令类型多。</p><p>Type-B方案存储容量小，防碰撞能力较强，数据结构和指令简单。</p><p>Type-C方案的性能处于Type-A和Type-B二者之间，具有较高的普适性。</p><p>22.EPCglobal标准框架分为哪三个层次，并阐述其内容</p><p>EPCglobal标准框架包括<strong>数据识别</strong>、<strong>数据获取</strong>和<strong>数据交换</strong>三个层次。</p><p><strong>数据识别层</strong>的标准包括RFID标签数据标准和协议标准，目的是确保不同企业间数据格式和说明的统一性；</p><p><strong>数据获取层</strong>的标准包括读写器协议标准、读写器管理标准、读写器组网和初始化标准，以及中间件标准等，定义了收集和记录EPC数据的主要基础设施组件，并允许最终用户使用具有互操作性的设备建立RFID应用；</p><p><strong>数据交换层</strong>的标准包括EPC信息服务标准（EPC Information Services，EPCIS）、核心业务词汇标准（Core Business Vocabulary，CBV）、对象名解析服务标准（Object Name Service，ONS）、发现服务标准（Discovery Services）、安全认证标准（Certificate Profile），以及谱系标准（Pedigree）等，提高广域环境下物流信息的可视性，目的是为最终用户提供可以共享的EPC数据，并实现EPC网络服务的接入。</p><p>23.从技术方面简要分析RFID标准多元化的原因。</p><p>1.RFID的工作频率和信息传输方式：RFID的工作频率分布在低频至微波的各个频段中，技术差异大。</p><p>2,作用距离：作用距离不同产生的差异主要表现在以下几个方面：应答器的工作方式分为有源工作方式和无源工作方式两种；RFID系统的工作原理不同，近距离采用电感耦合方式，远距离采用基于微波的反散射耦合方式；载波功率的差异；这些都会导致不同的标准产生；</p><p>3，应用目标的不同：RFID的应用广泛，针对不同的应用目的，其存储的数据代码，外形需求，频率选择，作用距离以及复杂度都会有很大的差异；</p><p>4，技术的发展：随着信息技术和制造业的进步，RFID标准需要不断融入这些新进展，以形成与时俱进的标准。</p><h2 id="第十一章-物联网架构—EPC系统"><a href="#第十一章-物联网架构—EPC系统" class="headerlink" title="第十一章 物联网架构—EPC系统"></a>第十一章 物联网架构—EPC系统</h2><p>1.64位EPC编码中<strong>EPC-64Ⅲ型</strong>编码的厂商数量最多。</p><p>2.若EPC编码版本号前三位是000，则这个EPC编码可能是<strong>EPC-256Ⅱ型</strong>。</p><p>3.Savant系统完成的任务是： <strong>数据校对</strong>、 <strong>数据传输</strong> 、 <strong>数据存储</strong> 、<strong>读写器协调</strong>、  <strong>任务管理</strong>。</p><p>4.ONS服务器由<strong>ONS根服务器</strong>和<strong>本地ONS服务器</strong>组成。</p><p>5.某商品信息为“一个蓝色的500ml的水杯”，其中“蓝色，500ml”是由EPC编码结构当中的 <strong>对象分类代码</strong> 决定的。</p><p>6.国际上具影响力三大RFID标准化体系组织是  EPC Global美，UID日本，ISO/IEC标准体系 。</p><p>7.96位EPC码由<strong>版本号</strong>、<strong>域名管理者</strong>、<strong>对象分类代码</strong> 和<strong>序列号</strong>构成。</p><p>8.电子标签含有物品唯一标识体系的编码，其中<strong>电子产品代码/EPC</strong>是全球产品代码的一个分支，它包含著一系列的数据和信息，如产地、日期代码和其他关键的供应信息。</p><p>9.EPC系统的信息网络系统是在全球互联网的基础上，通过 <strong>Savant管理软件系统</strong>  、 <strong>ONS对象名称解析服务</strong> 、 <strong>实体标记语言</strong>  实现全球的实物互联。</p><p>10.EPCIS在EPC网络中的主要作用是提供  <strong>存储管理EPC捕获信息</strong>  的接口。</p><p>11.ONS服务是联系EPC中间件和EPC信息服务的网络枢纽，并且ONS设计与架构都以 <strong>因特网域名解析服务（DNS）</strong>为基础，因此，可以使整个EPC网络以因特网为依托，迅速架构并顺利延伸到世界各地。</p><p>12.EPC信息服务（EPCIS）中框架分为几层，每层的作用是什么？</p><p>EPCIS框架被分成三层：信息模型层，服务层，绑定层。</p><p><strong>信息模型层：</strong>指定了EPCIS中包含什么样的数据，这些数据的抽象结构是什么，以及这些数据代表着什么含义。</p><p><strong>服务层：</strong>指定了EPC网络组件与EPCIS数据进行交互的实际接口。</p><p><strong>绑定层：</strong>定义信息的传输协议，比如SOAP(简单对象访问协议)或HTTP(超文本传输协议)</p><p>13.简述对象名称解析服务的工作流程。</p><p>用户请求发到ONS根服务器上。ONS根服务器进行解析和识别，将请求转发至该本地ONS服务器。本地ONS服务器在本地数据表中解析EPCIS服务器的地址，然后将请求转发至该EPCIS服务器。最后EPCIS服务器根据请求的内容提供搜索结果，将结果返回。</p><h2 id="第十二章-RFID应用实例"><a href="#第十二章-RFID应用实例" class="headerlink" title="第十二章 RFID应用实例"></a>第十二章 RFID应用实例</h2><p>1.属于RFID应用：</p><p><strong>A.物流过程中的货物追踪，信息采集</strong></p><p><strong>B.驯养动物，畜牧牲口，宠物等识别管理</strong></p><p><strong>D.ETC路桥不停车收费系统</strong></p><p>2.在铁路机车车号识别系统中，安装在铁轨中间的是<strong>读写器天线</strong>。</p><p>3.RFID在智能交通领域的应用有 <strong>不停车电子收费系统</strong> 、<strong>智能公交系统</strong>、<strong>铁路机车车号识别系统</strong>。</p><p>4.RFID智能公交系统由 <strong>信息采集网络</strong> （识别基站、识别卡 、显示屏）以及指挥中心组成。</p><hr><blockquote><p>近期更新，敬请期待</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RFID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【WSN】无线传感器网络期末复习知识提纲</title>
      <link href="/2019/12/12/WSNreview/"/>
      <url>/2019/12/12/WSNreview/</url>
      
        <content type="html"><![CDATA[<h1 id="无线传感器复习提纲"><a href="#无线传感器复习提纲" class="headerlink" title="无线传感器复习提纲"></a>无线传感器复习提纲</h1><p>本篇文章按无线传感器网络书籍里的章节进行知识点进行梳理。</p><a id="more"></a><h2 id="第一章：绪论"><a href="#第一章：绪论" class="headerlink" title="第一章：绪论"></a>第一章：绪论</h2><h3 id="WSN定义"><a href="#WSN定义" class="headerlink" title="WSN定义"></a>WSN定义</h3><p>无线传感网络是由大量的静止或移动的传感器以自组织和多跳的方式构成的无线网络。</p><h3 id="WSN系统组成"><a href="#WSN系统组成" class="headerlink" title="WSN系统组成"></a>WSN系统组成</h3><ul><li>1.传感器节点；</li><li>2.汇聚节点；</li><li>3.管理节点</li></ul><h3 id="WSN的三个基本要素"><a href="#WSN的三个基本要素" class="headerlink" title="WSN的三个基本要素"></a>WSN的三个基本要素</h3><ul><li>1.传感器；</li><li>2.感知对象；</li><li>3.用户</li></ul><h3 id="WSN特点"><a href="#WSN特点" class="headerlink" title="WSN特点"></a>WSN特点</h3><ul><li>1.自组织性；</li><li>2.以数据为中心；</li><li>3.应用相关性；</li><li>4.动态性；</li><li>5.网络规模大；</li><li>6.可靠性；</li><li>7.集成化；</li><li>8.协作方式执行任务</li></ul><h2 id="第三章：WSN拓扑控制与覆盖技术"><a href="#第三章：WSN拓扑控制与覆盖技术" class="headerlink" title="第三章：WSN拓扑控制与覆盖技术"></a>第三章：WSN拓扑控制与覆盖技术</h2><h3 id="WSN拓扑结构类型"><a href="#WSN拓扑结构类型" class="headerlink" title="WSN拓扑结构类型"></a>WSN拓扑结构类型</h3><ul><li>1.平面网络结构：平面网络结构所有节点为对等结构，具有完全一致的功能特性，也就是说每个节点均包含相同的MAC、路由、管理和安全等协议。</li></ul><p><img src="https://i.loli.net/2019/12/12/uFU1AizJVrBM7TI.png" alt="1.png"></p><ul><li>2.分级网络结构（层次网络结构）：网络分为上层和下层两个部分：上层为中心骨干节点互连形成的子网拓扑，下层为一般传感器节点互连形成的子网拓扑。</li></ul><p><img src="https://i.loli.net/2019/12/12/z2KZ9Rk4wGrpqnT.png" alt="2.png"></p><ul><li>3.混合网络结构：网络骨干节点之间及一般传感器节点之间都采用平面网络结构，而网络骨干节点和一般传感器节点之间采用分级网络结构。</li></ul><p><img src="https://i.loli.net/2019/12/12/GD5VBvfMUlNP3Wd.png" alt="3.png"></p><ul><li>4.Mesh网络结构：Mesh网络结构是一种新型的无线传感网络结构。从结构上看，Mesh网络是规则分布的网络，网络内部节点一般都是相同的。Mesh网络结构最大的优点就是尽量使所有节点都是处于对等的地位，且具有相同的计算和通信传输功能，某个节点可被指定为簇首节点，而且可执行额外的功能。一旦簇首节点失效，另外一个节点可以立刻补充并接管原簇首那些额外执行的功能。</li></ul><p><img src="https://i.loli.net/2019/12/12/wlqsy4RrTa9XNUn.png" alt="4.png"></p><h3 id="WSN拓扑控制定义及设计目标"><a href="#WSN拓扑控制定义及设计目标" class="headerlink" title="WSN拓扑控制定义及设计目标"></a>WSN拓扑控制定义及设计目标</h3><h4 id="1-拓扑控制定义："><a href="#1-拓扑控制定义：" class="headerlink" title="1.拓扑控制定义："></a>1.拓扑控制定义：</h4><p>无线传感器网络的拓扑控制问题，是在网络相关资源普遍受限的情况下，对于固定或具有移动特征的无线传感器网络通过控制传感器节点与无线通信链路组成网络的拓扑属性来减少网络能量消耗与无线干扰，并有效改善整体网络的连通性、吞吐量与传播延时等性能指标。</p><blockquote><p>总结：在全网协作式地进行各个传感器节点功率控制，从而减小网络能量消耗和无线干扰。</p></blockquote><p>拓扑控制（topology control）是一种协调节点间各自传输范围的技术，用以构建具有某些期望的全局特性（如，连通性）的网络拓扑结构，同时减少节点的能耗或增加网络的传输能力。</p><h4 id="2-拓扑控制设计目标："><a href="#2-拓扑控制设计目标：" class="headerlink" title="2.拓扑控制设计目标："></a>2.拓扑控制设计目标：</h4><p>覆盖性、连通性、网络生命期、吞吐能力、干扰和竞争、网络延迟、拓扑性质。</p><p><span style="border-bottom:2px dashed green;">连通性与覆盖性是无线传感很关键的参数。</span></p><p>1.连通度：无线传感网络一般规模较大，传感器节点所获取的数据通常以多跳的方式传送至汇聚节点，这就要求拓扑控制必须保证网络的连通性。如果至少要去掉k个节点才能使网络不连通，就称其为k-连通。拓扑控制要保证网络至少是1-连通的。</p><p>2.覆盖度：覆盖度可以看作是对无线传感网络服务质量的度量。在覆盖问题中，最重要的因素是网络对物理世界的感知能力。生成的拓扑必须保证足够大的覆盖度，即覆盖面积足够大的监视区域。覆盖度问题可以分为区域覆盖、点覆盖和栅栏覆盖。如果目标区域中任意一个点均在k个传感器节点的传输范围内，就称网络是k-覆盖网络。</p><p>3.吞吐量：吞吐量是指网络承载数据传输的能力，尤其是在有大量数据出现时，吞吐量是影响网络通信能力的因素之一。</p><p>4.网络生命周期：网络生命周期的定义有多种，一般将网络生命周期定义为直到死亡节点的百分比低于某个阈值的持续时间，也可以通过对网络服务质量的度量来定义网络的生命期。</p><p>5.干扰和竞争：减小干扰和竞争，实际上就是延长网络生命周期。</p><p>6.网络延迟：网络负载较低时，减小了跳数，降低了延迟。<br> <br>7.拓扑性质：除了覆盖性，连通性，还有对称性，平面性等。</p><h3 id="WSN拓扑控制主要实现方式"><a href="#WSN拓扑控制主要实现方式" class="headerlink" title="WSN拓扑控制主要实现方式"></a>WSN拓扑控制主要实现方式</h3><p>功率调节及睡眠调度机制</p><p>1.在保证网络的连通性与覆盖性的情况下，控制节点的发射距离，减少发射功耗，同时减少分组冲突的可能性，减少协议不必要的开销；</p><p>2.尽可能让多的节点进行休眠，降低功耗；</p><p>3.数据融合，减少分组的冗余。</p><h3 id="WSN功率控制经典实现算法"><a href="#WSN功率控制经典实现算法" class="headerlink" title="WSN功率控制经典实现算法"></a>WSN功率控制经典实现算法</h3><h4 id="基于节点度的功率控制"><a href="#基于节点度的功率控制" class="headerlink" title="基于节点度的功率控制"></a>基于节点度的功率控制</h4><p>LMA：本地平均算法（Local Mean Algorithm）<br>LMN：本地邻居平均算法（Local Mean of Neighbors Algorithm）<br>这是两种周期性调整节点发射功率的算法。</p><h4 id="基于方向的功率控制"><a href="#基于方向的功率控制" class="headerlink" title="基于方向的功率控制"></a>基于方向的功率控制</h4><p>CBTC</p><h4 id="基于邻近图的功率控制"><a href="#基于邻近图的功率控制" class="headerlink" title="基于邻近图的功率控制"></a>基于邻近图的功率控制</h4><p>RNG相关邻近图（Relative Neighborhood Graph）<br>MST最小生成树（Minimum Spanning Tree）</p><h3 id="LEACH实现机制"><a href="#LEACH实现机制" class="headerlink" title="LEACH实现机制"></a>LEACH实现机制</h3><p>LEACH（Low Energy Adaptive Clustering Hierarchy）是一种自适应分簇拓扑算法，它的执行是周期性的，每轮循环分为簇的建立阶段和稳定的数据通信阶段。</p><ul><li>簇的建立阶段：相邻节点动态地形成簇，随机产生簇头</li><li>数据通信阶段：簇内节点把数据发给簇头，簇头进行数据融合并把结果发给汇聚节点。</li></ul><p>簇头耗能大，所以需要等概率选取簇头。使整个网络的能量负载达到均衡。</p><p>LEACH拓扑图：<br><img src="https://i.loli.net/2019/12/14/iDEPuhRlcpgfUC8.png" alt="image.png"></p><p>过程：节点产生0~1的数，如果这个数小于阈值Tn，则发布自己是簇头的消息；在每轮循环中，如果节点已经当选过簇头，则把Tn置0，这样该节点不可能再当选簇头。</p><p><img src="https://i.loli.net/2019/12/13/O7LvuEwhSla4dCV.png" alt="pict5.png"></p><p>p：期望的簇头在所有节点中所占的百分比<br>r mod (1/p)：这一轮循环中当选过簇头节点的个数<br>Gr：这一轮循环中未当选过簇头的节点集合</p><p>对于没有当选过簇头的节点，其当选簇头的概率是Tn，并随着当选过节点的数目的增加，Tn随之增大。</p><p>LEACH协议缺点：<br>1、簇头选举随机性很强，可能会出现簇头集中在某一个区域的现象，造成簇头分布不均匀。<br>2、信息的融合和传输都是通过簇头节点来进行，造成了簇头节点能量消耗过快的问题；<br>3、发射机和接收机必须严格遵守时隙的要求，避免在时间上互相重叠，然而，维持时间同步又增加了一些额外的信令通信量。节点的时间表可能会需要较大的存储器。<br>4、LEACH要求节点之间和节点与Sink点之间都能进行直接通信，网络的扩展性差，对于大规模网络而言，节点直接进行通信需要消耗大量的能量。并且采用单跳路由方式，增加了交换数据的能量。</p><blockquote><p>HEED分簇：簇头选择中考虑了节点的剩余能量, 并以主从关系引入多个约束条件。实验结果表明, HeeD分簇速度更快, 能产生更加分布均匀的簇头、更合理的网络拓扑。</p></blockquote><h3 id="覆盖感知模型"><a href="#覆盖感知模型" class="headerlink" title="覆盖感知模型"></a>覆盖感知模型</h3><ul><li><p>布尔感知模型<br>节点的感知范围是一个以节点为圆心，以感知距离为半径的圆形区域。</p></li><li><p>概率感知模型<br>节点的圆形感知范围内，目标被感知的到的概率不是一个常量。</p></li></ul><h3 id="覆盖算法分类"><a href="#覆盖算法分类" class="headerlink" title="覆盖算法分类"></a>覆盖算法分类</h3><p>按节点部署方式分</p><ul><li>1.确定性部署</li><li>2.随机性部署</li><li>3.混合式部署</li></ul><p>k-覆盖：指每个节点至少被k个传感器节点覆盖</p><p>按覆盖目标分：面覆盖、点覆盖、栅栏覆盖。</p><h2 id="第四章：WSN通信与组网技术"><a href="#第四章：WSN通信与组网技术" class="headerlink" title="第四章：WSN通信与组网技术"></a>第四章：WSN通信与组网技术</h2><h3 id="WSN协议的分层结构"><a href="#WSN协议的分层结构" class="headerlink" title="WSN协议的分层结构"></a>WSN协议的分层结构</h3><p>从无线联网的角度来看，传感器网络结点的体系由分层的<strong>网络通信协议</strong>、<strong>网络管理平台</strong>和<strong>应用支撑平台</strong>三个部分组成。</p><p><img src="https://i.loli.net/2019/12/13/Yd8NBWKtw2XUL5u.png" alt="pict1.png"></p><h4 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h4><p>类似于传统Internet网络中的TCP/IP协议体系，它由<strong>物理层、数据链路层、网络层、传输层和应用层</strong>组成。</p><p><img src="https://i.loli.net/2019/12/13/fucK1YglbINHQiV.png" alt="pict2.png"></p><p>MAC层和物理层协议采用的是国际电气电子工程师协会(IEEE)制定的IEEE <strong>802.15.4</strong>协议。</p><p><strong>IEEE 802.15.4</strong>是针对<strong>低速无线个域网</strong>(Low-Rate Wireless Personal Area Network，LR-WPAN)制定的标准。</p><p>该标准把<strong>低能量消耗、低速率传输、低成本</strong>作为重点目标，旨在为个人或家庭范围内不同设备之间低速互连提供统一标准。</p><p><strong>IEEE 802.15.4</strong>的网络特征与无线传感器网络存在很多相似之处，所以许多研究机构把它作为无线传感器网络的无线通信平台。</p><p>(1)物理层。传感器网络的物理层负责信号的<strong>调制</strong>和<strong>数据的收发</strong>，所采用的传输介质主要有<strong>无线电、红外线、光波</strong>等。</p><p>(2)数据链路层。 传感器网络的数据链路层负责数据成帧、帧检测、介质访问和差错控制。介质访问协议保证可靠的<strong>点对点</strong>和<strong>点对多点</strong>通信，<strong>差错控制</strong>保证源结点发出的信息可以完整无误地到达目标结点。</p><p>(3)网络层。 传感器网络的网络层负责路由发现和维护，通常大多数结点无法直接与网络通信，需要通过中间结点以多跳路由的方式将数据传送至汇聚结点。</p><p>(4)传输层。 传感器网络的传输层负责数据流的传输控制，主要通过汇聚结点采集传感器网络内的数据，并使用卫星、移动通信网络、因特网或者其他的链路与外部网络通信，是保证通信服务质量的重要部分。</p><h4 id="网络管理平台"><a href="#网络管理平台" class="headerlink" title="网络管理平台"></a>网络管理平台</h4><p>网络管理平台主要是对传感器结点自身的管理和用户对传感器网络的管理，包括<strong>拓扑控制、服务质量管理、能量管理、安全管理、移动管理、网络管理</strong>等。</p><p>(1)拓扑控制。<br>一些传感器结点为了节约能量会在某些时刻进入休眠状态，这导致网络的<strong>拓扑结构不断变化</strong>，而需要通过拓扑控制技术管理各结点状态的转换，使网络保持畅通，数据能够有效传输。拓扑控制利用链路层、路由层完成拓扑生成，反过来又为它们提供基础信息支持，优化MAC协议和路由协议，降低能耗。</p><p>(2)服务质量管理。<br><strong>服务质量管理</strong>在各协议层设计<strong>队列管理、优先级机制或者带宽预留等机制</strong>，并对特定应用的数据给予特别处理。它是网络与用户之间以及网络上互相通信的用户之间关于信息传输与共享的质量约定。为了满足用户的要求，传感器网络必须能够为用户提供足够的资源，以用户可接受的性能指标工作。</p><p>(3)能量管理。<br>在传感器网络中电源能量是各个结点最宝贵的资源。为了使传感器网络的使用时间尽可能长，需要合理、有效地控制结点对能量的使用。每个协议层次中都要增加<strong>能量控制</strong>代码，并提供给操作系统进行能量分配决策。</p><p>(4)安全管理。<br>由于结点<strong>随机部署、网络拓扑的动态性</strong>和无线信道的不稳定，传统的安全机制无法在传感器网络中适用，因而需要设计新型的传感器网络安全机制，采用诸如<strong>扩频通信、接入认证/鉴权、数字水印和数据加密</strong>等技术。</p><p>(5)移动管理。<br>在某些传感器网络的应用环境中，结点可以移动，<strong>移动管理用来监测和控制结点</strong>的移动，维护到汇聚结点的路由，还可以使传感器结点跟踪它的邻居。</p><p>(6)网络管理。<br>网络管理是对传感器网络上的<strong>设备和传输系统进行有效监视、控制、诊断和测试</strong>所采用的技术和方法。它要求协议各层嵌入各种<strong>信息接口</strong>，并定时收集协议运行状态和流量信息，协调控制网络中各个协议组件的运行。</p><h4 id="应用支撑平台"><a href="#应用支撑平台" class="headerlink" title="应用支撑平台"></a>应用支撑平台</h4><p>应用支撑平台建立在网络通信协议和网络管理技术的基础之上，包括一系列基于<strong>监测任务的应用层软件</strong>，通过<strong>应用服务接口</strong>和<strong>网络管理接口</strong>来为终端用户提供各种具体应用的支持。</p><h3 id="隐蔽终端"><a href="#隐蔽终端" class="headerlink" title="隐蔽终端"></a>隐蔽终端</h3><p><img src="https://i.loli.net/2019/12/13/Cj7Y4fDdnvetFiW.png" alt="pict3.png"></p><p>在无线局域网中，经常会出现隐蔽终端的问题，如上图所示。为了解决这种隐蔽终端问题，DCF可利用RTS和CTS两个控制帧来进行信道预约。</p><p>实现机制：<br><img src="https://i.loli.net/2019/12/13/Ux1hnNcCH4JuRm3.png" alt="pict4.png"></p><p><span style="border-bottom:2px dashed red;">在发送站和接收站进行了RTS/CTS握手之后，经过一个SIFS，发送站开始传输数据帧。接收站在收到数据帧后等待一个SIFS，用ACK帧进行应答。此时传输过程已经完成，发送站及接收站覆盖范围内的节点中的NAV值指向0，各节点进入下一轮的信道争用。</span></p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li>MAC（Medium Access Control，介质访问控制）</li><li>CSMA/CA（Carrier Sense Multiple Access/Collision Avoidance，带有碰撞避免的载波监听多点接入）</li><li>RTS/CTS(Request to Send/Clear to Send，请求发送/允许发送)</li><li>AP（Access Point，接入点）</li><li>ESS（Extended Service Set，扩展服务集）</li><li>BSSID（Basic Service Set identifiers，基本服务集识别码）</li><li>PCF/DCF（Point Coordination Function/Distributed Coordination Function，点协调功能/分布式协调功能）</li><li>FDMA（Frequency Division Multiple Access，频分多址）</li><li>TDMA（Time division multiple access，时分多址）</li></ul><h3 id="基于竞争的MAC协议"><a href="#基于竞争的MAC协议" class="headerlink" title="基于竞争的MAC协议"></a>基于竞争的MAC协议</h3><p>WSN MAC层实现经典协议S-MAC协议及特点：</p><p>S-MAC（Sensor MAC）协议是在802.11 MAC协议的基础上，针对传感器网络的节省能量需求而提出的传感器网络MAC协议。其主要机制有：<strong>周期性侦听和睡眠、流量自适应侦听机制、串音避免、消息传递</strong>。</p><p>S-MAC协议假设通常情况下传感器网络的数据传输量少，节点协作完成共同的任务，网络内部能够进行数据的处理和融合以减少数据通信量，网络能够容忍一定程度的通信延迟。它的主要设计目标是提供良好的扩展性，减少节点能量的消耗。</p><p>（1）<strong>周期性侦听和睡眠</strong><br>每个节点独立地调度它的工作状态,周期性地转入睡眠状态,在苏醒后侦听信道状态,判断是否需要发送或接收数据。为了便于相互通信,相邻节点之间应该尽量维持睡眠/侦听调度周期的同步。</p><p>（2）<strong>流量自适应侦听机制</strong><br>传感器网络往往采用多跳通信,而节点的周期性睡眠会导致通信延迟的累加。在 S-MAC 协议中,采用了流量自适应侦听机制,减少通信延迟的累加效应。</p><p>（3）<strong>串音避免</strong><br>为了减少碰撞和避免串音,S-MAC 协议采用与802.11 MAC 协议类似的虚拟和物理载波侦听机制,以及 RTS/CTS的通告机制。两者的区别在于当邻居节点处于通信过程中时,S-MAC协议的节点进入睡眠状态。</p><p>（4）<strong>消息传递</strong><br>因为传感器网络内部数据处理需要完整的消息,所以 S-MAC 协议利用 RTS/CTS机制,一次预约发送整个长消息的时间;又因为传感器网络的无线信道误码率高,S-MAC 协议将一个长消息分割成几个短消息在预约的时间内突发传送。</p><p>特点：<br>周期性侦听/睡眠的低占空比工作方式控制节点尽可能处于睡眠状态来降低节点能量的消耗；<br>邻居节点通过协商的一致性睡眠调度机制形成虚拟簇，减少节点的空闲侦听时间；<br>通过流量自适应的侦听机制，减少消息在网络中的传输延迟；<br>采用带内信令来减少重传和避免监听不必要的数据；<br>通过消息分割和突发传递机制来减少控制消息的开销和信息的传递；</p><hr><h3 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h3><p>路由协议负责将数据分组从源节点通过网络转发到目的节点。</p><p>主要包括两个方面的功能：</p><ul><li>寻找源节点和目的节点间的优化路径</li><li>将数据分组沿着优化路径正确地转发</li></ul><p>路由协议分类：</p><ul><li>1）    按源节点获取路径的方法：<strong>主动路由协议、按需路由协议、混合路由协议</strong>。</li><li>2）    按节点参与通信的方式：<strong>直接通信路由协议、平面路由协议、层次路由协议</strong>。</li><li>3）    按路由的发现过程：<strong>以位置信息为中心的路由协议、以数据为中心的路由协议</strong>。</li><li>4）    按路由选择是否考虑服务质量约束</li></ul><h3 id="平面路由协议"><a href="#平面路由协议" class="headerlink" title="平面路由协议"></a>平面路由协议</h3><p>平面路由协议：各个传感器节点的地位是平等的。优点是不存在特殊节点，路由协议的鲁棒性较好，通信流量平均地分散在网络中，缺点是缺乏可拓展性，限制了网络的规模。</p><ul><li>1.洪泛路由协议（Flooding Protocol）:是一种最早的协议，收到消息节点以广播的形式发给邻居节点</li></ul><p>优点是实现简单,缺点是在数据广播转发过程中产生的冗余数据包大大加重了网络负荷，导致数据内爆(implosion)问题和数据重叠(overlapping)问题。</p><p><img src="https://i.loli.net/2019/12/14/2JrwcmL3iaInT8k.png" alt="image.png"> </p><p><img src="https://i.loli.net/2019/12/14/7AUroC1a5jetf2I.png" alt="image.png"></p><ul><li>2.闲聊法(Gossiping)：是洪泛路由的改进版。为了减小资源消耗，引入数据随机发送的方法</li></ul><p><img src="https://i.loli.net/2019/12/14/qeMBdaj5fYL1mTo.png" alt="image.png"></p><ul><li>3.SPIN（Sensor Protocol for Information via Negotiation）协议：基于协商机制的传感器网络</li></ul><p>在发送一个DATA数据包之前，一个传感器节点首先对外广播ADV数据包；如果某个邻居节点在收到ADV后有意愿接收该DATA数据包，那么它向该节点发送一个REQ数据包，然后节点向该邻居节点发送DATA数据包。</p><p>SPIN的优点是解决了传统的Flooding和Gossiping协议带来的信息爆炸，信息重复，资源浪费问题。</p><p>缺点是SPIN协议的缺点是没有考虑节能和多种信道条件下的数据传输问题。后来在SPIN的基础上出现了改进的路由协议。</p><h3 id="层次路由协议"><a href="#层次路由协议" class="headerlink" title="层次路由协议"></a>层次路由协议</h3><p>LEACH协议：LEACH是一种基于聚类路由协议，在WSN路由协议占有重要地位，其他基于聚类的路由协议如TEEN、APTEEN、PEGASIS等大都由LEACH发展而来。</p><p>LEACH路由协议的核心思想及LEACH实现机制见上文。</p><h3 id="能量感知路由"><a href="#能量感知路由" class="headerlink" title="能量感知路由"></a>能量感知路由</h3><h4 id="能量消耗源"><a href="#能量消耗源" class="headerlink" title="能量消耗源"></a>能量消耗源</h4><p>节点能量消耗源分析，主要包括下面两个部分，正常情况，节点通信相关能量消耗远<strong>大于</strong>计算相关的。</p><ul><li>1）通信相关的能量消耗 </li><li>2）计算相关的能量消耗 </li></ul><h4 id="能量路由"><a href="#能量路由" class="headerlink" title="能量路由"></a>能量路由</h4><p>能量路由是根据节点的可用能量(PA，Power Available)（即节点的当前剩余能量）或传输路径上的能量需求，选择数据转发的路径。</p><p>能量感知路由策略主要有以下几种：</p><ul><li>最大剩余节点能量路由：从数据源节点到汇聚节点的所有路径中选取节点剩余能量之和最大的路径；</li><li>最小能耗路由：从数据源节点到汇聚节点的所有路径中选取节点能耗值和最小的路径。</li><li>最少跳数路由：从数据源节点到汇聚节点的所有路径中选取节点最少的路径。</li><li>最大最小剩余节点能量路由：每条路径上有多个节点，且节点的可用剩余能量不同，从中选取每条路径中可用能量最小的节点来表示这条路径的可用能量。</li></ul><p>能量路由例题：</p><p><img src="https://i.loli.net/2019/12/13/SERcWkIiBmh4tJU.png" alt="pict6.png"></p><p>节点右侧括号内的数字表示节点的可用能量。图中的双向线表示节点之间的通信链路，链路上的数字表示在该链路上发送数据消耗的能量。在图中，从源节点到汇聚节点的可能路径有4条。</p><p>路径1：源节点—B—A—汇聚节点，路径上所有节点PA之和为4，在该路径上发送分组需要的能量之和为3；<br>路径2：源节点—C—B—A—汇聚节点，路径上所有节点PA之和为6，在该路径上发送分组需要的能量之和为6；<br>路径3：源节点—D—汇聚节点，路径上所有节点PA之和为3，在该路上发送分组需要的能量之和为4；<br>路径4：源节点—F—E—汇聚节点，路径上所有节点PA之和为5，在该路径上发送分组需要的能量之和为6。</p><p>最大剩余节点能量路由：路径2：源节点—C—B—A—汇聚节点<br>最小能耗路由：源节点—B—A—汇聚节点<br>最少跳数路由：源节点—D—汇聚节点<br>最大最小剩余节点能量路由：源节点—F—E—汇聚节点</p><h4 id="能量多径路由"><a href="#能量多径路由" class="headerlink" title="能量多径路由"></a>能量多径路由</h4><p>根据路径上节点能量消耗和剩余能量，给每个路径设定一个选择概率，使得数据传输均匀地消耗能量，延长网络生存周期。</p><p>例题：描述LEACH路由协议及平面路由协议实现过程，画出网络拓扑图，比较他们优缺点。</p><h2 id="第五章：WSN支撑技术"><a href="#第五章：WSN支撑技术" class="headerlink" title="第五章：WSN支撑技术"></a>第五章：WSN支撑技术</h2><h3 id="WSN支撑技术分类"><a href="#WSN支撑技术分类" class="headerlink" title="WSN支撑技术分类"></a>WSN支撑技术分类</h3><ol><li>时间同步</li><li>定位描述</li><li>数据融合</li><li>能量管理</li><li>容错技术</li><li>Qos保证</li><li>安全技术</li></ol><h3 id="时钟同步问题"><a href="#时钟同步问题" class="headerlink" title="时钟同步问题"></a>时钟同步问题</h3><p>对于两个节点的本地时间而言，时钟偏移量表示时钟之间的时间差。同步是指调整一个或者两个时钟，从而使它们的读数匹配。时钟率则表示一个时钟推移的频率，而时钟偏差则表示两个时钟频率之间的差别。</p><p>一个时钟的最大漂移率用偏移率用ρ表示。这个数值由振荡器的制造厂商给出。</p><p><img src="https://i.loli.net/2019/12/14/FjKrnBktU7zhcIZ.png" alt="image.png"></p><h3 id="WSN时间同步协议实现过程"><a href="#WSN时间同步协议实现过程" class="headerlink" title="WSN时间同步协议实现过程"></a>WSN时间同步协议实现过程</h3><p>同步有两种，一种是外部的，一种是内部的。</p><ul><li>外部同步是指所有节点的时钟都与一个外部时间源(或者参考时钟)同步。</li><li>内部同步是指在没有外部参考时钟支持的情况下，所有节点的时钟之间互相同步。网络中所有节点的时间都一样。</li></ul><h4 id="时间同步基础"><a href="#时间同步基础" class="headerlink" title="时间同步基础"></a>时间同步基础</h4><p>1.同步消息</p><p>(1)单向消息交换<br>最简单的两两时间同步是在两个节点之间同步时只用一个消息，也就是一个节点发送一个时间戳给另一个节点。如下图左图所示。</p><p><img src="https://i.loli.net/2019/12/14/hKr5dRMVtiQUbFE.png" alt="image.png"></p><p><img src="https://i.loli.net/2019/12/14/rn6JBfRHMQzuOqm.png" alt="image.png"></p><p>(2)双向消息交换<br>另一种更加准确的方式是采用两个同步消息。上图的右图。</p><p><img src="https://i.loli.net/2019/12/14/Sk8OoDhtJRXNwcq.png" alt="image.png"></p><blockquote><p>D表示未知的传播时延。通常忽略或者设一默认值。</p></blockquote><p>(3)接收端-接收端同步<br>接收端-接收端同步准则的协议是根据同一消息到达不同节点的时差来实现同步的。</p><p><img src="https://i.loli.net/2019/12/14/kufKeToNqnCypHx.png" alt="image.png"></p><p>2.通信延时的不确定性<br>通信延时的不确定性对于时间同步所能达到的精度有很大的影响。</p><ul><li>(1)发送延时</li><li>(2)访问延时</li><li>(3)传播延时</li><li>(4)接收延时</li></ul><h3 id="WSN定位技术"><a href="#WSN定位技术" class="headerlink" title="WSN定位技术"></a>WSN定位技术</h3><p>定位算法分类：</p><ul><li>1.基于测距的定位和距离无关的定位算法</li><li>2.基于锚节点定位和无锚节点辅助的定位算法</li><li>3.集中式计算定位与分布式计算定位</li><li>4.紧密耦合定位与松散耦合定位</li></ul><h3 id="测距实现方法"><a href="#测距实现方法" class="headerlink" title="测距实现方法"></a>测距实现方法</h3><p>1.TOA（Time of Arrival,基于到达时间的定位机制）：</p><p>已知物理信号的传播速度v，根据信号的传播时间t来计算节点间的距离，即距离d=v×t。此方法要求进行通信的两个节点时间必须高度同步。</p><p>2.TDOA（Time Difference Of Arrival，基于到达时间差的定位机制）：</p><p>该方法使用两种不同的传播速度的信号，如一个是无线射频信号，另一个是超声波信号。两个信号向同一个方向发送。</p><p>3.到达信号强度测量法（RSSI）：</p><p>信号强度会随着其传播距离的增加而衰减,表明信号强度变化与传播距离间存在着某种函数关系。它是一种低功率、廉价的测距技术，但是信号强度很容易受到周围环境的影响，通常将其看做一种粗糙的测距技术。</p><h3 id="基于测距的常用实现方法"><a href="#基于测距的常用实现方法" class="headerlink" title="基于测距的常用实现方法"></a>基于测距的常用实现方法</h3><ul><li>1.三边定位法：</li></ul><p><img src="https://i.loli.net/2019/12/16/QkgGPAa24YWbUnv.png" alt="image.png"></p><p>未知节点坐标(x,y)：</p><p><img src="https://i.loli.net/2019/12/16/bvnqMDlQgAS4Bk3.png" alt="image.png"></p><ul><li><p>2.三角定位法</p></li><li><p>3.极大似然估计估计法</p></li></ul><h3 id="与距离无关的定位算法"><a href="#与距离无关的定位算法" class="headerlink" title="与距离无关的定位算法"></a>与距离无关的定位算法</h3><ul><li>1.质心定位法</li></ul><p><img src="https://i.loli.net/2019/12/16/LcNAPiRSlwXHO1z.png" alt="image.png"></p><ul><li>2.DV-hop定位算法</li></ul><p>DV-HOP（Distance Vector-HOP）定位机制包括3个不同的阶段，首先计算未知节点与每个信标节点的最小跳数，其次计算未知节点与信标节点之间的距离，最后计算未知节点的坐标。</p><p>1）第一阶段：计算未知节点与每个信标节点的最小跳数</p><p>这个阶段使用经典的距离矢量交换协议，每个节点维护一个表 ，其中xi、yi、hi分别代表信标节点的坐标和到该信标节点的跳数。每个信标节点发送一个广播分组，该分组包含自身的位置信息和跳段个数，跳段个数初始化为0。节点收到信标节点的广播分组后检验该分组跳段数是否小于本节点表内的存储值，如果是则更新该表，然后跳段数加1并广播该分组，否则丢弃该分组。最终所有的未知节点均能获得到所有信标节点的最小跳数。</p><p><img src="https://i.loli.net/2019/12/16/96hzONedMKTAHZQ.png" alt="image.png"></p><p>锚节点A广播的数据包以近似于同心圆的方式在网络中逐次传播，图中的数字代表距离锚节点A的跳数。</p><p>（2）第二阶段：计算未知节点与信标节点的距离</p><p>每个信标节点根据自身表中记录的其他信标节点的坐标信息和跳数，按照公式计算<strong>平均每跳距离</strong>ci。然后把计算出来的平均跳段距离利用可控洪泛法进行广播，每个节点均接收第一个跳段距离，忽略后来到达的，这样确保了绝大多数节点可从最近的信标节点接收平均跳段距离。最后未知节点便可计算自己到达相应的信标节点的距离。用平均每跳距离与它接收到的最小跳数hops的乘积来近似代替它到锚节点i的距离。</p><p><img src="https://i.loli.net/2019/12/16/OviGnSY91PVdHQk.png" alt="image.png"></p><p>（3）第三阶段：计算未知节点的坐标<br>当未知节点收到3个或者更多信标节点的距离时，则可以根据三边定位或多边定位算法进行自身位置的计算。</p><p>DV-HOP定位算法使用平均跳段距离估算两点之间的实际距离，存在一定误差，同时在定位过程中两次洪泛，能量开销大，但是该算法对硬件要求低，实现简单。</p><hr><h3 id="数据融合"><a href="#数据融合" class="headerlink" title="数据融合"></a>数据融合</h3><p>根据处理融合信息方法：</p><ul><li>集中式</li><li>分布式</li><li>混合式</li></ul><p>根据融合处理的数据种类：</p><ul><li>时间融合</li><li>空间融合</li><li>时空融合</li></ul><p>根据信息的抽象程度：</p><ul><li>数据级融合</li><li>特征级融合</li><li>决策级融合</li></ul><h3 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h3><p>传感器节点消耗能量的模块：</p><ul><li>传感器模块</li><li>处理器模块</li><li>通信模块</li></ul><p>前两者能耗很低。</p><p>传感器节点4个组成部分：</p><ul><li>处理器单元</li><li>无线传输单元</li><li>传感器单元</li><li>电源管理单元</li></ul><p>节能策略：</p><ul><li>休眠机制</li><li>数据融合</li></ul><p>无线收发器4种状态：</p><ul><li>发送</li><li>接收</li><li>空闲</li><li>休眠</li></ul><p>除休眠以外，其他三者状态耗能较高。</p><h3 id="容错技术"><a href="#容错技术" class="headerlink" title="容错技术"></a>容错技术</h3><p>基本概念：</p><ul><li>失效</li><li>故障</li><li>差错</li></ul><p>容错能力建立在信息冗余上。</p><h3 id="故障模型"><a href="#故障模型" class="headerlink" title="故障模型"></a>故障模型</h3><p>需要考虑的三个方面：</p><ul><li>故障模型</li><li>故障检测</li><li>诊断、修复机制</li></ul><h3 id="传感器节点模块构成"><a href="#传感器节点模块构成" class="headerlink" title="传感器节点模块构成"></a>传感器节点模块构成</h3><ul><li>1.数据采集模块</li><li>2.数据处理和控制模块</li><li>3.通信模块和供电模块</li></ul><h3 id="WSN网络安全需求有哪些"><a href="#WSN网络安全需求有哪些" class="headerlink" title="WSN网络安全需求有哪些"></a>WSN网络安全需求有哪些</h3><ul><li>1.数据保密性</li><li>2.数据认证</li><li>3.数据完整性</li><li>4.数据实时性</li><li>5.秘钥管理</li><li>6.真实性</li><li>7.扩展性</li><li>8.可用性</li><li>9.自组织性</li><li>10.鲁棒性等方面</li></ul><h3 id="理解安全协议、攻击类型分类"><a href="#理解安全协议、攻击类型分类" class="headerlink" title="理解安全协议、攻击类型分类"></a>理解安全协议、攻击类型分类</h3><p>安全协议：</p><ul><li>1.SNEP（安全网络加密协议）</li></ul><p>是一个低通讯开销的、实现了数据机密性、通讯机密性、数据认证、完整性认证、新鲜性保护的简单高效的安全协议。SNEP本身只描述安全实施的协议过程，并不规定实际的使用算法，具体的算法在具体实现时考虑。</p><ul><li>2.TESLA：提供广播认证</li></ul><p>μTESLA协议是基于时间的高效的容忍丢包的流认证协议,用以实现点到多点的广播认证 该协议的主要思想是先广播一个通过密钥Kmac认证的数据包,然后公布密钥Kmac。这样就保证了在密钥Kmac公布之前,没有人能够得到认证密钥的任何信息,也就没有办法在广播包正确认证之前伪造出正确的广播数据包。这样的协议过程恰好满足流认证广播的安全条件。</p><p>攻击分类：</p><p>按照攻击者的能力来分，可以分为Mote-class攻击和Laptop-class攻击，在前一种情况下，攻击者的资源和普通的节点相当，而在后一种攻击中，攻击者拥有更强的设备和资源。也就是说，在Laptop-class攻击中，恶意节点拥有的资源，包括能量、CPU、内存和无线电发射器等，优于普通节点。Laptop-class攻击所带来的危害更大。</p><p>1.对秘密和认证的攻击<br>2.对网路有效性的攻击</p><p>常见攻击：</p><ul><li>（1）DoS（Denial of Service）攻击</li><li>（2）Sybil攻击</li><li>（3）Sinkhole攻击</li><li>（4）Wormhole攻击</li><li>（5）Hello泛洪攻击</li><li>（6）选择转发攻击</li></ul><h2 id="第七章：WSN接入Internet方式"><a href="#第七章：WSN接入Internet方式" class="headerlink" title="第七章：WSN接入Internet方式"></a>第七章：WSN接入Internet方式</h2><ul><li>1.应用层网关</li><li>2.延迟容忍网络</li><li>3.TCP/IP覆盖传感器网络协议栈</li><li>4.传感器网络协议栈覆盖TCP/IP</li><li>5.移动代理</li></ul><p>同构网络接入方式<br>异构网络接入方式</p><blockquote><p>近期再更新，愿每个人努力能得到自己想要的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于OMNET++仿真平台的4维超立方体网络仿真</title>
      <link href="/2019/12/10/omnettasktwo/"/>
      <url>/2019/12/10/omnettasktwo/</url>
      
        <content type="html"><![CDATA[<h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>编程实现一个4维的立方体网络仿真，网络节点按照如下方式运行，<br>实验要求：</p><ul><li>1.网络节点按照默认的顺序，如节点标识0，1，…，15从小到大的顺序依次产生一个数据包。</li><li>2.节点产生（或接收到）一个数据包后，随机选择一个相邻节点发送数据包，依此规则重复执行，直至产生数据包的节点接收到自己的数据包后，直接删除该数据包。</li></ul><a id="more"></a><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>Win10 2004</li><li>OMNeT++ 5.5.1</li><li>VSCode</li></ul><h2 id="打开工程"><a href="#打开工程" class="headerlink" title="打开工程"></a>打开工程</h2><p>首先我们需要做一些实验前的准备工作。<a href="https://stefancharles.xyz/2019/11/08/omnetpp/">点击这里去之前的我的一篇博客</a>记录了OMNeT的安装以及如何开始上手一个简单的工程。这里我不再重复造轮子。</p><p>注意，我以<strong>omnetpp-5.5.1\samples\hypercube</strong> 作为demo，基于hypercube例程来完成这一次实验。最好直接在这个项目里进行修改，如果新建一个完全空白的项目来完成这一实验的话，可能出现很多找不到函数的问题。</p><p>最好先备份hypercube文件夹，以免改动太多导致报错而无法挽回。当然你也可以自己新建一个空白的工程从0开始或者选择其他例程上手。</p><h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><p>首先来看下超立方的定义：</p><blockquote><p>超级立方体网络指具有 d 个维度的网络具有2d个网络节点，网络节点按照0，1，2，…2d-1顺序进行编号。标识 i 的节点采用二进制方式可表示为d 位的二进制序列，网络任意两个节点二进制形式表示的d位标识符，对应位只有某一位不同时，表示节点是直接相邻接，否则，两个节点之间不存在直接相邻接。例如，对于一个3维的超级立方体网络，网络中存在8（8 = 23）个网络节点，如0(000)，1(001) ，2(010) ，3(011) ，4(100) ，5(101) ，6(110) ，7(111)。网络拓扑结构按照如下方式连接，节点 0(000)与节点1(001) ，2(010) ，4(100) 直接相临接，因节点 0(000)与节点1，2，4分别在第1位，第2位，第3位不同（从左往右数），其他节点按此规律相邻接。</p></blockquote><p>简单来说，在4维的情况下，每个节点将会与4个节点相连接。但是不是随便和某个编号的节点相连接的。</p><p>假设我是一个节点，那么和我相互连接的节点的编号的二进制必须只能和我有1位不同。</p><p>更具体的假设：假设我是0号节点，我的二进制编号是0000，和我有1位不同的话，那么就是0001，0010，0100，1000咯。</p><p>对吧。再把二进制转换回来，那就是编号为1，2，4，8的节点和我连接。</p><p>和上一次的实验有所不同的是，这一次实验里每一个节点<strong>都同时扮演了三个角色</strong>，也就是HCGenerator（消息产生器），HCRouter（路由器），HCSink（汇聚点）。</p><p>上面的括号里是我随意取的名字，叫它们什么不重要。重点是它们分别的作用。</p><ul><li>HCGenerator：产生消息出去。</li><li>HCRouter：我的邻居节点发消息给我我负责转发。</li><li>HCSink：消息汇聚到这里。</li></ul><p>和上面名字相关的代码有 “.cc”，“.ned”，这些和之前实验的是一个意思。</p><p>总体的思路：<br>HCGenerator里节点按顺序产生消息 –&gt;  HCRouter里节点处理收到的消息 –&gt; HCSink里判断是不是到了目的节点，是的话就删除这个消息</p><p>按照要求，在HCRouter里需要随机选择一个邻居节点转发出去。</p><p>大概的流程图如下：</p><p><img src="https://i.loli.net/2019/12/11/O9RIwApxnQkSYX8.png" alt="1234.png"></p><blockquote><p>当然，还是那句话，思路很简单。引用屈博士的话，“说谁不会说”。纸上谈来终觉浅，绝知此事要躬行。Talk is cheap ,Show me the code.</p></blockquote><h2 id="实验知识"><a href="#实验知识" class="headerlink" title="实验知识"></a>实验知识</h2><ul><li>.cc文件是对所有模块生效的代码，不是只对特定的某一个模块或者节点生效。</li><li>删除网络中的所有消息可以结束仿真，调用endSimulation()函数也可以结束仿真。</li><li>在win10下，如果按下开始仿真任务栏有图标但是没有界面，可以尝试外接一个显示器。</li><li>在仿真界面的左上角有一个fast图标，可以快速仿真到仿真结束。</li><li>数据包和消息（Message）是一个意思。</li><li>EV相当于cout。</li><li>send(msg, “out”)函数只是把消息推送到out门，出了门后消息具体怎么走不属于它管。</li><li>NED文件描述消息出门后具体路线。</li></ul><h2 id="开始上手"><a href="#开始上手" class="headerlink" title="开始上手"></a>开始上手</h2><p>我以<strong>omnetpp-5.5.1\samples\hypercube</strong> 作为demo，基于hypercube例程来完成这一次实验。</p><h3 id="修改维度"><a href="#修改维度" class="headerlink" title="修改维度"></a>修改维度</h3><p>官方的hypercube例程默认维度是3。而实验要求是4维空间。</p><p>在HypercubeNetwork.ned里，修改dim（维度）为4.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">network HypercubeNetwork extends Hypercube</span><br><span class="line">&#123;</span><br><span class="line">    parameters:</span><br><span class="line">        dim = <span class="keyword">default</span>(<span class="number">4</span>);<span class="comment">//维度</span></span><br><span class="line">        nodetype = <span class="string">"HypercubeNode"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他位置暂时不做改动，我们直接就可以运行试试，结果如下图：</p><p><img src="https://i.loli.net/2019/12/10/MZjx4OcvbTA57wW.png" alt="net.png"></p><p>可以验证一个我上面的举例：假设我是0号节点，我的二进制编号是0000，和我有1位不同的话，那么就是0001，0010，0100，1000。再把二进制转换回来，那就是编号为1，2，4，8的节点和我连接。</p><h3 id="HCGenerator-cc"><a href="#HCGenerator-cc" class="headerlink" title="HCGenerator.cc"></a>HCGenerator.cc</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> HCGenerator::activity()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> numStations = par(<span class="string">"numStations"</span>);</span><br><span class="line">    <span class="keyword">int</span> my_address = par(<span class="string">"address"</span>);</span><br><span class="line">    cPar&amp; iaTime = par(<span class="string">"iaTime"</span>);  <span class="comment">// take by ref since it can be random</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">        <span class="comment">// select destination randomly (but not the local station)</span></span><br><span class="line">        <span class="comment">//int dest = intrand(numStations-1);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> dest = my_address;</span><br><span class="line">        <span class="comment">//后面代码不做改动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本的代码是随机选择一个目的节点，实验要求要回到自己，所以注释上面的再添加int dest = my_address即可。</p><h3 id="HCRouter-cc"><a href="#HCRouter-cc" class="headerlink" title="HCRouter.cc"></a>HCRouter.cc</h3><p>当路由器收到消息的时候，就进去activity()函数处理消息。</p><p>下面的图是一个重点代码，<br><img src="https://i.loli.net/2019/12/10/5L3ToVIQBraFJ6t.png" alt="1111.png"></p><p>if (pkt-&gt;getArrivalGateId() != fromUserGateId)用来判断是不是自己刚开始发的消息，如果不是，那么说明是从邻居节点收到的消息，</p><p>然后，if (pkt-&gt;getDestAddress() != my_address)判断这个消息节点的目的是不是我自己，如果不是，就再转发；如果是，就进入send(pkt, “toSink”)交给HCSink.cc处理。</p><p>下面的deflectionRouting就是用来处理消息走哪条路了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deflectionRouting(my_address, dim,</span><br><span class="line">                rte_dest, num_rte, rte_port,</span><br><span class="line">                usr_dest, num_usr, usr_port);</span><br></pre></td></tr></table></figure><blockquote><p>实验要求：节点产生（或接收到）一个数据包后，随机选择一个相邻节点发送数据包，依此规则重复执行，直至产生数据包的节点接收到自己的数据包后，直接删除该数据包。</p></blockquote><p>好了，也就是要随机选一个，这个很简单。之前就有个intrand(int i)函数产生[0,i)的随机数。</p><p>也就是说我们要整出个随机路由选择算法。</p><p>伪代码如下：</p><ul><li>1.产生一个0-15的随机数</li><li>2.设一个可以存放4个数字的数组</li><li>3.数组里存放本节点的二进制节点编号分别与1，2，4，8异或的结果</li><li>4.判断第一步产生的随机数在不在数组里</li><li>4.1如果在，则就把消息转发到编号是随机数的节点</li><li>4.2如果不在，则重新产生一个0-15的随机数，再去第四步，直到找到一个属于数组里的随机数</li></ul><p><strong>当然，上面的思路仅仅是一种方法，仅供参考。我相信还有更好的随机路由选择算法，条条大路通罗马。</strong></p><p>换句话说，和本节点相连接的节点的编号就是<strong>本节点的二进制节点编号分别与1，2，4，8异或的结果</strong>。</p><p>为什么呢？因为要保证实验条件：对应位只有某一位不同时，表示节点是直接相邻接，否则，两个节点之间不存在直接相邻接。</p><p>4个位置只有1位不同，那么最简单的想法就是拿两个节点编号的二进制位异或的结果是1，2，4，8的其中一个就可以。</p><p>反向操作的话，注意到一个简单的特点<strong>A异或B得到C，那么A异或C就会得到B</strong>。这点有意思，方便了计算数组。</p><p>把上面的伪代码实现后，注意在HCRouter.cc里添加对sendcount（发送消息数目），recievedcount（收到消息数目）的统计。</p><p>这部分具体的实现代码就不贴了，一百个读者有一百个哈姆雷特。</p><h3 id="HCSink-cc"><a href="#HCSink-cc" class="headerlink" title="HCSink.cc"></a>HCSink.cc</h3><p>例程里的这部分代码基本上实现了功能，也就是节点收到了自己发出去的消息就删除这个消息。基本上不需要做什么改动。</p><p>但是为了实验结果显示的方便，我这里加入一个文件读取代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ofstream OutFile; </span><br><span class="line">OutFile.open(<span class="string">"LogOfHyperCube.txt"</span>,ios::out | ios::app);</span><br><span class="line">OutFile &lt;&lt; <span class="string">"Received: "</span> &lt;&lt; pkt-&gt;getName() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">OutFile &lt;&lt; <span class="string">"  - end-to-end delay="</span> &lt;&lt; eed &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">OutFile &lt;&lt; <span class="string">"  - distance="</span> &lt;&lt; minHops &lt;&lt; <span class="string">", after hops="</span> &lt;&lt; actualHops &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">OutFile.close();</span><br></pre></td></tr></table></figure><p>上面的代码里的ios::app是追加到文件末尾。这样讲道理到时候实验结果会看得很清楚了。 最好注意关闭文件。</p><h2 id="一个坑"><a href="#一个坑" class="headerlink" title="一个坑"></a>一个坑</h2><p>上面的代码都完成后，仿真却停不下来。按照之前的，所有消息都删除了就应该仿真自动停止，但是这里停不下来。</p><p>问题就在于我在这篇文章开头说的一样:</p><blockquote><p>和上一次的实验有所不同的是，这一次实验里每一个节点<strong>都同时扮演了三个角色</strong>，也就是HCGenerator（消息产生器），HCRouter（路由器），HCSink（汇聚点）。</p></blockquote><p>细心看过整个工程代码的同学会发现在HCRouter.cc里有一个死循环代码：</p><p><img src="https://i.loli.net/2019/12/10/6y3miXNWMPsK9DA.png" alt="for.png"></p><p>这也说得通，因为16个节点作为路由器得负责转发消息，只能一个死循环来这么做了。</p><p>可能你会想，设置一个count计数，统计删除的消息数目，当count达到16的时候就调用endSimulation()函数不就行了？</p><p>好像也是这么回事。但是，正如上文我说了，</p><ul><li>.cc文件是对所有模块生效的代码，不是只对特定的某一个模块或者节点生效。</li></ul><p>你定义的count只是你一个节点的count，并不是全部节点所共有的变量。</p><p>我贫瘠的语言形容不出这种问题，当你实际做这个实验的时候，你就会明白我说的意思了。</p><p>我的解决方法是：建一个txt文件，当有一个消息被删除就向文件里写一个“1”，当产生的16个消息都各回各回家后，这个txt文件里应该有16个连起来的“1”，然后读取文件，当读出来的length是16的时候，就调用endSimulation()。</p><p>写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ofstream CountNode;</span><br><span class="line">CountNode.open(<span class="string">"Count.txt"</span>,ios::out | ios::app); </span><br><span class="line">CountNode &lt;&lt; <span class="string">"1"</span>;</span><br></pre></td></tr></table></figure><p>读：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ifstream readFile;</span><br><span class="line">readFile.open(<span class="string">"Count.txt"</span>,ios::in);</span><br><span class="line"><span class="built_in">string</span> count;</span><br><span class="line">readFile &gt;&gt; count;</span><br><span class="line"><span class="keyword">if</span>(count.length()==<span class="number">16</span>)&#123;</span><br><span class="line">   endSimulation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算是一个折中的办法了，如果有更好的办法与代码，欢迎提出。</p><h3 id="更简单的方式"><a href="#更简单的方式" class="headerlink" title="更简单的方式"></a>更简单的方式</h3><p>经过罗老板的指出，事实上，在HCRouter.cc代码里，将activity函数修改为handleMessage函数就可以很简单的解决问题。</p><p>因为后者就仅仅在消息到来的时候才调用处理。当所有消息各回各家后也就没有消息，路由器角色也就不会无休止运行。</p><h2 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a>仿真结果</h2><p>实验结果如下图：</p><p><img src="https://i.loli.net/2019/12/10/1yJshzdNua8F4x9.png" alt="end1.png"></p><p><img src="https://i.loli.net/2019/12/10/QfBbDj8IvnWPHir.png" alt="count.png"></p><p><img src="https://i.loli.net/2019/12/10/tB6WSmNUu3abc5K.png" alt="threetxt.png"></p><p><img src="https://i.loli.net/2019/12/10/dkVnEmx9SwPK36y.png" alt="log1.png"></p><p><img src="https://i.loli.net/2019/12/10/zXAHENvwkaDTV1o.png" alt="loglog.png"></p><blockquote><p> Tips：如果上面的图没有正确加载出来，请刷新本界面，或者翻墙后全局代理访问本界面</p></blockquote><p>可以从实验结果看到，确实有16个“1”在那个txt文件里，另外，每个节点产生的数据包一个轮回产生的跳数，每个节点发送、接收的数据包的个数从txt文件里一目了然。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>本次实验最难的不是思路，因为思路同样也很简单，说谁都会说，“云指挥” 谁都会。</p><p>纸上谈来终觉浅，绝知此事要躬行。</p><p>之前一段时间在写网络安全的课程设计，没想到无线传感器网络这门课的实验报告这么快要交。</p><p>大部分时间花在看hypercube的官方例程和解决无法终止仿真上了。</p><p>本次实验经过和物联网实验室的<strong>阳博主</strong>和<strong>达哥</strong>，以及<strong>罗老板</strong>的讨论，有了很多思路，在这里表示感谢。</p><p><a href="https://me.csdn.net/qq_42398342" target="_blank" rel="noopener">点击这里去阳博主的csdn博客</a></p><p><a href="https://me.csdn.net/weixin_43871310" target="_blank" rel="noopener">点击这里去达哥的csdn博客</a></p><p><a href="https://blog.csdn.net/Stefancharles" target="_blank" rel="noopener">点击这里我的csdn博客</a></p><p>罗老板是一个高冷男神。</p><p>如果可以的话，可以关注一波。点赞素质三连？/滑稽 /狗头</p><h3 id="另一种实现方式"><a href="#另一种实现方式" class="headerlink" title="另一种实现方式"></a>另一种实现方式</h3><p>上文的操作是我在hypercube的工程基础上修改添加的。你也可以新建一个空白工程完成实验。思路大体一致。</p><p>这里给出一个可以供参考的彭博主的博客，彭博主的实现方式就是新建一个新的工程。</p><p><a href="https://blog.csdn.net/weixin_43871650/article/details/103465789" target="_blank" rel="noopener">点击这里去彭博主的博客地址</a></p><h2 id="需要联系我？"><a href="#需要联系我？" class="headerlink" title="需要联系我？"></a>需要联系我？</h2><p>后面有时间再更新吧。</p><p>如果有疑问或者建议，可以发邮件至<a href="mailto:stefancharles@qq.com" target="_blank" rel="noopener">stefancharles@qq.com</a>与我交流讨论。</p><p>下面的内容与本实验无关。</p><h2 id="说在最后的话"><a href="#说在最后的话" class="headerlink" title="说在最后的话"></a>说在最后的话</h2><blockquote><p>There are moments in all of our lives when we are compelled to ask ourselves, how far are we willing to go for what we want?</p></blockquote><p>————《不死法医》</p><blockquote><p>我们生命中有些时刻，会让我们扪心自问，为了追寻你要的东西，你愿意付出多少？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> omnetpp </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring MVC】基于Java的安全即时通讯软件</title>
      <link href="/2019/12/09/springboot/"/>
      <url>/2019/12/09/springboot/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring框架由Rod Johnson开发，2004年发布了Spring框架的第一版。Spring是一个从实际开发中抽取出来的框架，因此它完成了大量开发中的通用步骤，留给开发者的仅仅是与特定应用相关的部分，从而大大提高了应用的开发效率。本博客用于记录开发即时通讯软件中遇到的问题和解决方案。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Win10 2004</li><li>IDEA 2019.3</li><li>Maven 3.6.3</li></ul><h2 id="1-Unable-to-find-a-single-main-class-from-the-following-candidates"><a href="#1-Unable-to-find-a-single-main-class-from-the-following-candidates" class="headerlink" title="1.Unable to find a single main class from the following candidates"></a>1.Unable to find a single main class from the following candidates</h2><p>报错内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.0.5.RELEASE:repackage (default) on project easychat_client: Execution default of goal org.springframework.boot:spring-boot-maven-plugin:2.0.5.RELEASE:repackage failed: Unable to find a single main class from the following candidates [com.stefan.chat.App, com.stefan.chat.util.Terminal]</span><br></pre></td></tr></table></figure><p>解决方法：</p><p>这里因为项目中有两个主函数的类，maven需要你指定一个主main类。也就是mainClass。</p><p>所以在pom.xml中添加以下设置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>chat<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.stefan.chat.App<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>9<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>9<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="持续更新"><a href="#持续更新" class="headerlink" title="持续更新"></a>持续更新</h2><blockquote><p>持续更新，敬请关注。</p></blockquote><h2 id="需要联系我？"><a href="#需要联系我？" class="headerlink" title="需要联系我？"></a>需要联系我？</h2><p>如果有疑问或者建议，可以发邮件至<a href="mailto:stefancharles@qq.com" target="_blank" rel="noopener">stefancharles@qq.com</a>与我交流讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ZigBee】获取网络的拓扑结构</title>
      <link href="/2019/12/09/zigbeetasknine/"/>
      <url>/2019/12/09/zigbeetasknine/</url>
      
        <content type="html"><![CDATA[<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>任务9：</p><p>组一个包括协调器路由器终端节点的zigbee网络，通过串口能获取它们的拓扑结构。</p><a id="more"></a><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>Win10 2004</li><li>IAR 10.30</li><li>Z-Stack</li><li>VScode</li></ul><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><h3 id="1-下载基本工程文件"><a href="#1-下载基本工程文件" class="headerlink" title="1.下载基本工程文件"></a>1.下载基本工程文件</h3><p>首先下载最基本的工程文件，我们在这个的基础上进行代码修改。</p><ul><li>下载地址:<a href="https://www.lanzous.com/i7j1gtc" target="_blank" rel="noopener">https://www.lanzous.com/i7j1gtc</a> </li><li>密码:1024</li></ul><h3 id="2-打开工程文件"><a href="#2-打开工程文件" class="headerlink" title="2.打开工程文件"></a>2.打开工程文件</h3><p>解压你第一步下载的基本工程的压缩包，路径是“<strong>…\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\GenericApp\CC2530DB</strong>”文件夹下的<strong>GenericApp.eww</strong>。</p><p>双击使用最新版IAR打开它。刚打开的时候IAR会<strong>多次</strong>提示你版本不兼容信息，不必理会，直接一路点击Ok就行。</p><h3 id="3-尝试编译"><a href="#3-尝试编译" class="headerlink" title="3.尝试编译"></a>3.尝试编译</h3><p>上一步完成后，先不改动任何地方。直接点击rebuild图标或者按下F7。也就是下图的箭头指向的图标。</p><p><img src="https://i.loli.net/2019/11/23/xwdGPJACeFkg1q2.png" alt="rebuild.png"></p><p>先看是否报错。如果报错，先参考这里<a href="https://stefancharles.xyz/2019/11/21/IARproblem/">【IAR-10.30.1】最新版本IAR常见编译问题总结</a>。</p><p>按照这篇博客的方法解决问题即可。</p><h2 id="路由器和终端节点"><a href="#路由器和终端节点" class="headerlink" title="路由器和终端节点"></a>路由器和终端节点</h2><p>要想获取网络的拓扑结构，可以设置网络中的路由器和终端节点组网成功后就向协调器发送自己的网络地址以及父节点网络地址。这样便可以知道谁是谁的父节点，网络拓扑也就可以得到。</p><p>首先为了方便我们对NWK地址方便操作，我们在<strong>Coordinator.h</strong>中定义一个结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//This is for task 9</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RFTXBUF</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> uint8 type[<span class="number">3</span>];</span><br><span class="line"> uint8 NWK[<span class="number">4</span>];</span><br><span class="line"> uint8 parentNWK[<span class="number">4</span>];</span><br><span class="line">&#125;RFTX;</span><br></pre></td></tr></table></figure><p>type是对节点类型的描述，也就是路由器和终端节点。NWK是本设备的网络地址，parentNWK是父节点的网络地址。</p><p>接下来在<strong>Enddevice.c</strong>里宏定义一个事件代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEND_DATA_EVENT  0x01</span></span><br></pre></td></tr></table></figure><p>然后在事件处理函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UINT16 <span class="title">GenericApp_ProcessEvent</span><span class="params">( byte task_id, UINT16 events )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  afIncomingMSGPacket_t *MSGpkt;</span><br><span class="line">  <span class="keyword">if</span> ( events &amp; SYS_EVENT_MSG )</span><br><span class="line">  &#123;</span><br><span class="line">    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );</span><br><span class="line">    <span class="keyword">while</span> ( MSGpkt )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( MSGpkt-&gt;hdr.event )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> AF_INCOMING_MSG_CMD:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZDO_STATE_CHANGE:  <span class="comment">//建网后</span></span><br><span class="line">          GenericApp_NwkState=(devStates_t)(MSGpkt-&gt;hdr.status);</span><br><span class="line">          <span class="keyword">if</span>((GenericApp_NwkState == DEV_END_DEVICE)||(GenericApp_NwkState == DEV_ROUTER))&#123;</span><br><span class="line">            osal_set_event(GenericApp_TaskID,SEND_DATA_EVENT);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Release the memory</span></span><br><span class="line">      osal_msg_deallocate( (uint8 *)MSGpkt );</span><br><span class="line">      <span class="comment">// Next</span></span><br><span class="line">      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return unprocessed events</span></span><br><span class="line">    <span class="keyword">return</span> (events ^ SYS_EVENT_MSG);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(events&amp;SEND_DATA_EVENT)</span><br><span class="line">  &#123;</span><br><span class="line">    HalLedBlink(HAL_LED_2,<span class="number">0</span>,<span class="number">50</span>,<span class="number">1000</span>);</span><br><span class="line">    SendMsgToCood();</span><br><span class="line">   <span class="keyword">return</span> (events^SEND_DATA_EVENT);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里很简单，就是在组网后准备把自己的网络信息发给协调器，调用的是SendMsgToCood()函数。其函数参考代码可以如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建网后发消息给协调器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendMsgToCood</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  RFTX rftx;</span><br><span class="line">  uint16 nwk;</span><br><span class="line">  <span class="keyword">if</span>(GenericApp_NwkState == DEV_END_DEVICE) <span class="comment">//判断是否是终端节点</span></span><br><span class="line">  &#123;</span><br><span class="line">    osal_memcpy(rftx.type,<span class="string">"END"</span>,<span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">if</span>(GenericApp_NwkState == DEV_ROUTER) <span class="comment">//判断是否是路由器</span></span><br><span class="line">  &#123;</span><br><span class="line">    osal_memcpy(rftx.type,<span class="string">"ROU"</span>,<span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  nwk = NLME_GetShortAddr();</span><br><span class="line">  To_string(rftx.NWK,(uint8 *)&amp;nwk,<span class="number">2</span>);</span><br><span class="line">   </span><br><span class="line">  nwk = NLME_GetCoordShortAddr();</span><br><span class="line">  To_string(rftx.parentNWK,(uint8 *)&amp;nwk,<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">  afAddrType_t GenericApp_DstAddr;</span><br><span class="line">  GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;</span><br><span class="line">  GenericApp_DstAddr.endPoint =GENERICAPP_ENDPOINT;</span><br><span class="line">  GenericApp_DstAddr.addr.shortAddr = <span class="number">0x0000</span>;</span><br><span class="line"></span><br><span class="line">  AF_DataRequest( &amp;GenericApp_DstAddr, &amp;GenericApp_epDesc,</span><br><span class="line">                    GENERICAPP_CLUSTERID,</span><br><span class="line">                    <span class="number">11</span>,</span><br><span class="line">                    (uint8 *)&amp;rftx,</span><br><span class="line">                    &amp;GenericApp_TransID,</span><br><span class="line">                    AF_DISCV_ROUTE, </span><br><span class="line">                    AF_DEFAULT_RADIUS );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了之前定义的结构体了。当然也需要进制转换的函数，函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">To_string</span><span class="params">(uint8 *dest,<span class="keyword">char</span>* src,uint8 length)</span><span class="comment">//二进制转十六进制</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint8* xad;</span><br><span class="line">  uint8 i=<span class="number">0</span>;</span><br><span class="line">  uint8 ch;</span><br><span class="line">  xad=src+length<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++,xad--)</span><br><span class="line">  &#123;</span><br><span class="line">   ch=(*xad&gt;&gt;<span class="number">4</span>)&amp;<span class="number">0x0F</span>;  <span class="comment">//除以十六</span></span><br><span class="line">   dest[i&lt;&lt;<span class="number">1</span>]=ch+((ch&lt;<span class="number">10</span>)?<span class="string">'0'</span>:<span class="string">'7'</span>);</span><br><span class="line">   ch=*xad&amp;<span class="number">0x0F</span>;</span><br><span class="line">   dest[(i&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>]=ch+((ch&lt;<span class="number">10</span>)?<span class="string">'0'</span>:<span class="string">'7'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="协调器"><a href="#协调器" class="headerlink" title="协调器"></a>协调器</h2><p>协调器主要是负责处理路由器和终端节点发来的信息，整理后打印到电脑的串口上。</p><p>在<strong>Coordinator.c</strong>中的的事件处理函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UINT16 <span class="title">GenericApp_ProcessEvent</span><span class="params">( byte task_id, UINT16 events )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  afIncomingMSGPacket_t *MSGpkt;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> ( events &amp; SYS_EVENT_MSG )</span><br><span class="line">  &#123;</span><br><span class="line">    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );</span><br><span class="line">    <span class="keyword">while</span> ( MSGpkt )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( MSGpkt-&gt;hdr.event )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> AF_INCOMING_MSG_CMD:</span><br><span class="line">          HalLedBlink(HAL_LED_2,<span class="number">0</span>,<span class="number">50</span>,<span class="number">500</span>);    <span class="comment">//LED2 闪烁 </span></span><br><span class="line">          GenericApp_MessageMSGCB( MSGpkt );</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Release the memory</span></span><br><span class="line">      osal_msg_deallocate( (uint8 *)MSGpkt );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Next</span></span><br><span class="line">      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return unprocessed events</span></span><br><span class="line">    <span class="keyword">return</span> (events ^ SYS_EVENT_MSG);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当收到消息的时候，进入AF_INCOMING_MSG_CMD的case里，调用的消息处理函数GenericApp_MessageMSGCB()如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">RFTX nodeinfo[<span class="number">3</span>];</span><br><span class="line">uint8 nodenum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenericApp_MessageMSGCB</span><span class="params">( afIncomingMSGPacket_t *pckt )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> ( pckt-&gt;clusterId )</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="keyword">case</span> GENERICAPP_CLUSTERID:</span><br><span class="line">          osal_memcpy(&amp;nodeinfo[nodenum++],pckt-&gt;cmd.Data,<span class="number">11</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应存储在结构体中，方面我们打印。然后我们可以使用串口回调函数打印信息，当然也可以设置一个定时的事件向串口打印信息。<br>这里就展示前者的代码。</p><p>首先在<strong>Coordinator.c</strong>中开串口：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uartConfig.configured   =TRUE;</span><br><span class="line">uartConfig.baudRate     =HAL_UART_BR_115200;</span><br><span class="line">uartConfig.flowControl  =FALSE;</span><br><span class="line">uartConfig.callBackFunc =rxCB;</span><br><span class="line">HalUARTOpen(<span class="number">0</span>,&amp;uartConfig);</span><br></pre></td></tr></table></figure><p>然后实现回调函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rxCB</span><span class="params">(uint8 port,uint8 event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint8 buf[<span class="number">8</span>];</span><br><span class="line">  uint8 i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> enter[<span class="number">2</span>] = &#123;<span class="number">0x0A</span>,<span class="number">0x0D</span>&#125;;</span><br><span class="line">  HalUARTRead(<span class="number">0</span>,buf,<span class="number">8</span>);</span><br><span class="line">  <span class="keyword">if</span>(osal_memcmp(buf,<span class="string">"showinfo"</span>,<span class="number">8</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      HalUARTWrite(<span class="number">0</span>,nodeinfo[i].type,<span class="number">3</span>); <span class="comment">// 设备类型</span></span><br><span class="line">       </span><br><span class="line">      HalUARTWrite(<span class="number">0</span>,<span class="string">" NWK: "</span>,<span class="number">6</span>);</span><br><span class="line">      HalUARTWrite(<span class="number">0</span>,nodeinfo[i].NWK,<span class="number">4</span>); <span class="comment">//网络地址</span></span><br><span class="line">       </span><br><span class="line">      HalUARTWrite(<span class="number">0</span>,<span class="string">"  parentNWK: "</span>,<span class="number">13</span>);</span><br><span class="line">      HalUARTWrite(<span class="number">0</span>,nodeinfo[i].parentNWK,<span class="number">4</span>); <span class="comment">//父节点网络地址</span></span><br><span class="line"></span><br><span class="line">      HalUARTWrite(<span class="number">0</span>,enter,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，当我们向串口输入showinfo时，串口会回应我们相关网络拓扑结构。<br>接下里烧录代码进行测试。</p><h2 id="烧录代码出现的问题及解决"><a href="#烧录代码出现的问题及解决" class="headerlink" title="烧录代码出现的问题及解决"></a>烧录代码出现的问题及解决</h2><h3 id="问题出现Error-e27"><a href="#问题出现Error-e27" class="headerlink" title="问题出现Error[e27]"></a>问题出现Error[e27]</h3><p>切换角色至路由器，烧录路由器代码的时候可能出现下面的问题：</p><p><img src="https://i.loli.net/2019/12/09/kl6xvbtUfhQmSjo.png" alt="router.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error[e27]: Entry &quot;GenericApp_Init::?relay&quot; in module Coordinator ( C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\GenericApp\ CC2530DB\CoordinatorEB\Obj\Coordinator.r51 ) redefined in module Enddevice ( C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\ GenericApp\CC2530DB\CoordinatorEB\Obj\Enddevice.r51</span><br></pre></td></tr></table></figure><p>从报错内容可以大概知道：因为我们的工程中包含其中两个不同的.C文件都定义了同一个函数，编译时系统同时编译这两个文件，导致这两个函数重定义了。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1.右击协调器的c文件。选择options。</p><p><img src="https://i.loli.net/2019/12/09/uqph8ZJ9kjwRdIG.png" alt="fix1.png"></p><p>2.勾选左上角的勾，然后确定即可。</p><p><img src="https://i.loli.net/2019/12/09/ZOiQ9X8HaNc3vB5.png" alt="fix2.png"></p><p>3.重新编译<br>协调器的代码文件变灰色说明可以了。<br><img src="https://i.loli.net/2019/12/09/k5JTqa2hWB71VdL.png" alt="fix3.png"></p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>三者上电后，最好全部按下复位。</p><p>结果如下图。</p><p><img src="https://i.loli.net/2019/12/09/3pfUIKbMC4v12m5.png" alt="showinfo1.png"></p><h2 id="写在最后的话"><a href="#写在最后的话" class="headerlink" title="写在最后的话"></a>写在最后的话</h2><blockquote><p>The problem with living for 200 years isn’t the loneliness or the pain or the loss. Okay, sure, it is those things. But what really gets you is when life ceases to surprise you.</p></blockquote><p>——《不死法医》</p><blockquote><p>活了200年的麻烦，并不是孤单或痛苦或失去。其实就是这些，但真正让你痛不欲生的是当生活不再惊喜。</p></blockquote><h2 id="需要联系我？"><a href="#需要联系我？" class="headerlink" title="需要联系我？"></a>需要联系我？</h2><p>如果有疑问或者建议，可以发邮件至<a href="mailto:stefancharles@qq.com" target="_blank" rel="noopener">stefancharles@qq.com</a>与我交流讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zigbee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于OMNET++仿真平台的正方形网络仿真</title>
      <link href="/2019/11/30/omnettaskone/"/>
      <url>/2019/11/30/omnettaskone/</url>
      
        <content type="html"><![CDATA[<h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>以讲解的tictoc网络模型为例，建立一个TicToc正方形网络模型，如下图所示，网络节点是正方形的四个节点，均为Tic模块的实例，节点周期性的产生数据包，数据包通过输出门发送到相连的邻接点，<br>当节点产生的数据包又回到发送节点时，删除该数据包。<strong>当某个节点产生的数据包个数等于100时，结束网络仿真过程</strong>，统计各节点产生、发送、接受的数据包个数。</p><a id="more"></a><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>Win10 1909</li><li>OMNeT++ 5.5.1</li><li>VSCode</li></ul><h2 id="建立工程"><a href="#建立工程" class="headerlink" title="建立工程"></a>建立工程</h2><p>首先我们需要做一些实验前的准备工作。<a href="https://stefancharles.xyz/2019/11/08/omnetpp/">点击这里去之前的我的一篇博客</a>记录了OMNeT的安装以及如何开始上手一个简单的工程。这里我不再重复造轮子。</p><h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><p>首先我们需要一个我们模块的类，这个类public继承自cSimpleModule。根据实验的要求，我们需要设计三个整型变量来分别对各节点产生、发送、接受的数据包个数进行统计。三个函数分别用作初始化（initialize），转发消息（forwardMessage），处理收到的消息（handleMessage）。<br>在initialize()函数里我们对四个节点进行定时发送，按照周期性的要求，也可以初始化的时候同时发送数据包（消息）。当一个节点收到消息的时候，就进到处理消息函数里，在handleMessage()函数里我们判断一个收到的消息是不是自己发的消息，如果是，那么就销毁刚刚收到的这个消息，并且又开启新一轮的发送消息。<br>四个节点都是如此，循环直到节点的createcount达到100就停止。</p><p>一个很随意的流程图如下：</p><p><img src="https://i.loli.net/2019/11/29/kG3HW7UTix9wjE6.png" alt="20191129210443.png"></p><blockquote><p>当然，思路很简单。引用屈博士的话，“说谁不会说”。俗话说，纸上谈来终觉浅，绝知此事要躬行。Talk is cheap ,Show me the code.</p></blockquote><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><ul><li>.cc文件是对所有模块生效的代码，不是只对特定的某一个模块或者节点生效。</li><li>删除网络中的所有消息可以结束仿真，调用endSimulation()函数也可以结束仿真。</li><li>在win10下，如果按下开始仿真任务栏有图标但是没有界面，可以尝试外接一个显示器。</li><li>提示access denied是因为已经存在一个仿真界面，需要关闭原有的才能新建一个。</li><li>在仿真界面的左上角有一个fast图标，可以快速仿真到仿真结束。</li><li>对变量传参到WATCH()函数，可以在仿真时较为直观观察变量的值。</li><li>数据包和消息（Message）是一个意思。</li><li>EV相当于cout。</li><li>send(msg, “out”)函数只是把消息推送到out门，出了门后消息具体怎么走不属于它管。</li><li>NED文件描述消息出门后具体路线。</li></ul><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>我们以Txc13作为demo，来完成这一次实验。</p><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><p>部分参考代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Txc13</span> :</span> <span class="keyword">public</span> cSimpleModule</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> createcount;</span><br><span class="line">    <span class="keyword">int</span> sendcount;</span><br><span class="line">    <span class="keyword">int</span> receivecount;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> TicTocMsg13 *<span class="title">generateMessage</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">forwardMessage</span><span class="params">(TicTocMsg13 *msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(cMessage *msg)</span> override</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>createcount,sendcount,receivecount分别对应各节点产生、发送、接受的数据包个数。</p><p>generateMessage()函数是用来产生消息，返回一个TicTocMsg13类型的消息对象。</p><p>TicTocMsg13定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicTocMsg13</span> :</span> <span class="keyword">public</span> ::omnetpp::cMessage</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> source = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> destination = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> hopCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">const</span> TicTocMsg13&amp; other)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// protected and unimplemented operator==(), to prevent accidental usage</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> TicTocMsg13&amp;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    TicTocMsg13(<span class="keyword">const</span> <span class="keyword">char</span> *name=<span class="literal">nullptr</span>, <span class="keyword">short</span> kind=<span class="number">0</span>);</span><br><span class="line">    TicTocMsg13(<span class="keyword">const</span> TicTocMsg13&amp; other);</span><br><span class="line">    <span class="keyword">virtual</span> ~TicTocMsg13();</span><br><span class="line">    TicTocMsg13&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> TicTocMsg13&amp; other);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> TicTocMsg13 *<span class="title">dup</span><span class="params">()</span> <span class="keyword">const</span> override </span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> TicTocMsg13(*<span class="keyword">this</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">parsimPack</span><span class="params">(omnetpp::cCommBuffer *b)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">parsimUnpack</span><span class="params">(omnetpp::cCommBuffer *b)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// field getter/setter methods</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getSource</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setSource</span><span class="params">(<span class="keyword">int</span> source)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getDestination</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setDestination</span><span class="params">(<span class="keyword">int</span> destination)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getHopCount</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setHopCount</span><span class="params">(<span class="keyword">int</span> hopCount)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里我们可以调用函数设置或者获取跳数，目的节点等信息。后面会用到里面的部分函数。</p><h3 id="注册模块"><a href="#注册模块" class="headerlink" title="注册模块"></a>注册模块</h3><p>这一步很简单但是很重要。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Define_Module(Txc13);</span><br></pre></td></tr></table></figure><h3 id="initialize"><a href="#initialize" class="headerlink" title="initialize()"></a>initialize()</h3><p>这里我让第一个节点在0时刻产生和发送消息，第二、三、四个节点分别在0.5，1.0，1.5时刻发送消息。<br>也可以全部设置为同时发。<br>部分参考代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> Txc13::initialize()</span><br><span class="line">&#123;</span><br><span class="line">   createcount = <span class="number">0</span>;</span><br><span class="line">   sendcount = <span class="number">0</span>;</span><br><span class="line">   receivecount = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">// Boot the process scheduling the initial message as a self-message.</span></span><br><span class="line">   <span class="keyword">if</span>(getId()==<span class="number">2</span>)&#123;</span><br><span class="line">   TicTocMsg13 *msg = generateMessage();</span><br><span class="line">   scheduleAt(<span class="number">0.0</span>, msg);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(getId()==<span class="number">3</span>)&#123;</span><br><span class="line">   TicTocMsg13 *msg = generateMessage();</span><br><span class="line">   scheduleAt(<span class="number">0.5</span>, msg);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(getId()==<span class="number">4</span>)&#123;</span><br><span class="line">   TicTocMsg13 *msg = generateMessage();</span><br><span class="line">   scheduleAt(<span class="number">1.0</span>, msg);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(getId()==<span class="number">5</span>)&#123;</span><br><span class="line">   TicTocMsg13 *msg = generateMessage();</span><br><span class="line">   scheduleAt(<span class="number">1.5</span>, msg);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getId()函数作用如下注释描述。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the component's ID in the simulation object (cSimulation).</span></span><br><span class="line"><span class="comment"> * Component IDs are guaranteed to be unique during a simulation run</span></span><br><span class="line"><span class="comment"> * (that is, IDs of deleted components are not reused for new components.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @see cSimulation::getComponent(), cSimulation::getModule(), cSimulation::getChannel()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>第一个模块的ID是2，后面的模块依次加1.</p><h3 id="generateMessage"><a href="#generateMessage" class="headerlink" title="generateMessage()"></a>generateMessage()</h3><p>在产生消息的函数里使createcount计数器加1，每调用一次这个函数那么就会使createcount加1。同时设置源点和终点，虽然都是自己吧。<br>部分参考代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">TicTocMsg13 *Txc13::generateMessage()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Produce source and destination addresses.</span></span><br><span class="line">    createcount++;</span><br><span class="line">    <span class="keyword">int</span> src = getId();</span><br><span class="line">    <span class="keyword">int</span> dest =src;</span><br><span class="line">    <span class="keyword">char</span> msgname[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(msgname, <span class="string">"tic-%d-to-%d"</span>, src, dest);</span><br><span class="line">    TicTocMsg13 *msg = <span class="keyword">new</span> TicTocMsg13(msgname);</span><br><span class="line">    msg-&gt;setSource(src);</span><br><span class="line">    msg-&gt;setDestination(dest);</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="forwardMessage"><a href="#forwardMessage" class="headerlink" title="forwardMessage()"></a>forwardMessage()</h3><p>在这里我们把消息推送到out门。出了门后怎么走就不管，也管不了。<br>现在再回头看一看实验要求：</p><blockquote><p>当节点产生的数据包又回到发送节点时，删除该数据包。<strong>当某个节点产生的数据包个数等于100时，结束网络仿真过程</strong>，统计各节点产生、发送、接受的数据包个数。</p></blockquote><p>注意我加粗的文字部分。当有一个节点产生第100个消息的时候，它已经产生了，但是不能发出去。<br>所以关键就在forwardMessage()对createcount做验证。<br>部分参考代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> Txc13::forwardMessage(TicTocMsg13 *msg)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(createcount &gt;= <span class="number">100</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         EV &lt;&lt;getName () &lt;&lt; <span class="string">" 's count reached zero,deleting message\n"</span>;</span><br><span class="line">         EV &lt;&lt; <span class="string">"createcount: "</span> &lt;&lt; createcount &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">         EV &lt;&lt; <span class="string">"sendcount: "</span> &lt;&lt; sendcount &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">         EV &lt;&lt; <span class="string">"receivecount: "</span> &lt;&lt; receivecount &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">         <span class="keyword">delete</span> msg;</span><br><span class="line">         endSimulation();</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        EV &lt;&lt; getName() &lt;&lt;<span class="string">" 's createcount is"</span> &lt;&lt; createcount &lt;&lt;<span class="string">",sending  message\n"</span>;</span><br><span class="line">        <span class="comment">// Increment hop count.</span></span><br><span class="line">        msg-&gt;setHopCount(msg-&gt;getHopCount()+<span class="number">1</span>);</span><br><span class="line">        sendcount++;</span><br><span class="line">        send(msg, <span class="string">"out"</span>); <span class="comment">// send out the message</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时需要注意，其他节点发给本节点的消息也要帮别人转发出去，所以要使sendcount加1。</p><h3 id="handleMessage"><a href="#handleMessage" class="headerlink" title="handleMessage()"></a>handleMessage()</h3><p>当有消息来到节点时，节点自动调用handleMessage(cMessage *msg)函数。<br>部分参考代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Txc13::handleMessage(cMessage *msg)</span><br><span class="line">&#123;</span><br><span class="line">    receivecount++;</span><br><span class="line">    <span class="keyword">if</span> (msg-&gt;getDestination() == getId()) &#123;</span><br><span class="line">      <span class="comment">// Message arrived.</span></span><br><span class="line">      EV &lt;&lt; <span class="string">"Message "</span> &lt;&lt; msg &lt;&lt; <span class="string">" arrived after "</span> &lt;&lt; msg-&gt;getHopCount() &lt;&lt; <span class="string">" hops.\n"</span>;</span><br><span class="line">      bubble(<span class="string">"ARRIVED, starting new one!"</span>);</span><br><span class="line">      <span class="keyword">delete</span> msg;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Generate another one.</span></span><br><span class="line">      EV &lt;&lt; <span class="string">"Generating another message: "</span>;</span><br><span class="line">      TicTocMsg13 *newmsg = generateMessage();</span><br><span class="line">      EV &lt;&lt; newmsg &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      forwardMessage(newmsg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// We need to forward the message.</span></span><br><span class="line">        forwardMessage(ttmsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>严格来说这里代码是存在问题的，实验要求<strong>节点周期性产生消息发送出去</strong>，而我们这里是等节点收到上一个我们发的消息后再重新Generate一个消息出去。由于正好是一个正方形网络，所以导致这样也算是周期性。然而，如果不是正方形网络，而是一个随机的网络里，那么就很大可能上一个消息还没到，这一个节点就已经到了周期定时的时间而不得不再Generate一个消息出去。</p><p>这样的话，需要在initialize()函数里进行改动，会复杂一些。有时间可以去尝试。</p><p>上文还有一些小细节上的代码没有贴出。整体的代码就是如此。当然代码实现的方式还有很多，比如说调用getModuleId()也可能可以。</p><h2 id="仿真结果"><a href="#仿真结果" class="headerlink" title="仿真结果"></a>仿真结果</h2><p>按照一开始我们对消息产生的时间的设定，讲道理第一个节点的createcount应该先到100.</p><p>实验结果如下图：<br><img src="https://i.loli.net/2019/11/30/UIntROEVxuG4eJ2.png" alt="result1.png"></p><p>可以看到第一个节点createcount先到100。符合我们的理论推断。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>本次实验最难的不是思路，因为思路很简单，说谁都会说，“云指挥” 谁都会。</p><p>纸上谈来终觉浅，绝知此事要躬行。</p><p>主要的问题在于具体代码的实现，因为对很多函数不了解，很多api可以方便的用，然而我们却不知道它们的存在。</p><p>一开始我用了很多没有必要的代码来实现，用零零散散的时间写了四个晚上的代码。然而还是有一些问题。</p><p>后来经过物联网实验室的<strong>阳博主</strong>的指导，醍醐灌顶。在这里表示感谢。</p><p><a href="https://me.csdn.net/qq_42398342" target="_blank" rel="noopener">点击这里去阳博主的csdn博客</a></p><p>可以关注一波阳博主。</p><h2 id="需要联系我？"><a href="#需要联系我？" class="headerlink" title="需要联系我？"></a>需要联系我？</h2><p>后面有时间就更新基于OMNET++仿真平台的4维超立方体网络仿真实验。</p><p>如果有疑问或者建议，可以发邮件至<a href="mailto:stefancharles@qq.com" target="_blank" rel="noopener">stefancharles@qq.com</a>与我交流讨论。</p><p>下面的内容与本实验无关。</p><h2 id="说在最后的话"><a href="#说在最后的话" class="headerlink" title="说在最后的话"></a>说在最后的话</h2><blockquote><p>Some memories are precious … and we need to hang on to them. But Emily Dickinson wrote, “Forever is composed of nows”. And she is right. If we root ourselves too deeply in the past , we will miss what is right in front of us.</p></blockquote><p>不太准确的翻译：</p><blockquote><p>有些记忆很珍贵。我们需要考它们取暖。但是Emily Dickinson写道：“永恒由现在组成”。她说得对，如果我们对过去扎根太深，就会错过现在。</p></blockquote><p>这句话出自于一部美剧《不死法医》。高中的时候我把这一句规规整整的写在读书笔记本上，然而现在再拿起来看的时候，又读到了不同于当时的感受。<br>高二的压力很大让我很怀念高一的生活，压抑在那个时候的我期望着高中时光的结束，期待高中老师描述的那种大学生活。</p><p>然而站在现在的时间节点来看，过去那段的高中时间却是温暖我现在前行的记忆。我知道没有人可以真的回到过去，但是很多时候我把现在与记忆对比，这让我深深扎根于过去。</p><p><img src="https://i.loli.net/2019/11/30/W1EnFOheUJmHup7.jpg" alt="20191130154626.jpg"></p><p>自己在实验室写代码，或者写东西很久后，恍惚间有种很深的失落感，一想到自己需要做的很多事情还没有做，很多想要做的事情又没能有机会去做。曾经做过很多让自己后悔的事情又不能够重新做，对不起过很多人，也让很多人失望过…</p><p>生活不是仿真，不能重新再来，也不能快进快退。我们都明白这一点，很多时候还是会失落，失落过后最重要的还是需要重新on your feet，尽力做好眼前事，cherish right now.</p><p>希望不负自己。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> omnetpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ZigBee】协调器广播&amp;终端节点单播</title>
      <link href="/2019/11/25/zigbeetasksix/"/>
      <url>/2019/11/25/zigbeetasksix/</url>
      
        <content type="html"><![CDATA[<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>任务6：</p><p>协调器周期性以广播的形式向终端节点发送数据（每隔5s广播一次），终端节点接收数据后，使开发板上的LED灯状态翻转，<br>同时向协调器发送字符串“EndDevice1 received!”(按组网节点数编号）,协调器收到终端节点发回的数据后，通过串口输出到PC机，用户可以通过串口调试助手查看该信息。</p><a id="more"></a><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>Win10 1909</li><li>IAR 10.30</li><li>Z-Stack</li><li>VScode</li></ul><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><h3 id="1-下载基本工程文件"><a href="#1-下载基本工程文件" class="headerlink" title="1.下载基本工程文件"></a>1.下载基本工程文件</h3><p>首先下载最基本的工程文件，我们在这个的基础上进行代码修改。</p><ul><li>下载地址:<a href="https://www.lanzous.com/i7j1gtc" target="_blank" rel="noopener">https://www.lanzous.com/i7j1gtc</a> </li><li>密码:1024</li></ul><h3 id="2-打开工程文件"><a href="#2-打开工程文件" class="headerlink" title="2.打开工程文件"></a>2.打开工程文件</h3><p>解压你第一步下载的基本工程的压缩包，路径是“<strong>…\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\GenericApp\CC2530DB</strong>”文件夹下的<strong>GenericApp.eww</strong>。</p><p>双击使用最新版IAR打开它。刚打开的时候IAR会<strong>多次</strong>提示你版本不兼容信息，不必理会，直接一路点击Ok就行。</p><h3 id="3-尝试编译"><a href="#3-尝试编译" class="headerlink" title="3.尝试编译"></a>3.尝试编译</h3><p>上一步完成后，先不改动任何地方。直接点击rebuild图标或者按下F7。也就是下图的箭头指向的图标。</p><p><img src="https://i.loli.net/2019/11/23/xwdGPJACeFkg1q2.png" alt="rebuild.png"></p><p>先看是否报错。如果报错，先参考这里<a href="https://stefancharles.xyz/2019/11/21/IARproblem/">【IAR-10.30.1】最新版本IAR常见编译问题总结</a>。</p><p>按照这篇博客的方法解决问题即可。</p><h2 id="协调器"><a href="#协调器" class="headerlink" title="协调器"></a>协调器</h2><p>协调器要做的事情只有三个，一个是广播消息，另一个是如果收到终端节点的消息就把消息打印到串口，第三就是同时翻转LED状态。</p><p>我们来理清一下思路：当协调器组件网络后就开始发送广播消息。那么我们就在GenericApp_ProcessEvent() 函数里添加ZDO_STATE_CHANGE的case即可。在那个case里我们需要闪烁一个LED，同时设置一个5秒的定时把SEND_TO_ALL_EVENT事件写到任务列表。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UINT16 <span class="title">GenericApp_ProcessEvent</span><span class="params">( byte task_id, UINT16 events )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  afIncomingMSGPacket_t *MSGpkt; <span class="comment">//MSGpkt用于指向接收消息结构体的指针</span></span><br><span class="line">  <span class="keyword">if</span> ( events &amp; SYS_EVENT_MSG )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//osal_msg_receive（）从消息队列上接收消息</span></span><br><span class="line">    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );</span><br><span class="line">    <span class="keyword">while</span> ( MSGpkt )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( MSGpkt-&gt;hdr.event )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> AF_INCOMING_MSG_CMD:</span><br><span class="line">          HalLedSet(HAL_LED_2,HAL_LED_MODE_OFF);</span><br><span class="line">          HalLedBlink(HAL_LED_1,<span class="number">0</span>,<span class="number">50</span>,<span class="number">500</span>);</span><br><span class="line">          GenericApp_MessageMSGCB( MSGpkt );</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZDO_STATE_CHANGE:  <span class="comment">//建网后</span></span><br><span class="line">          GenericApp_NwkState=(devStates_t)(MSGpkt-&gt;hdr.status);</span><br><span class="line">          <span class="keyword">if</span>(GenericApp_NwkState==DEV_ZB_COORD)</span><br><span class="line">          &#123;</span><br><span class="line">            HalLedBlink(HAL_LED_2,<span class="number">0</span>,<span class="number">50</span>,<span class="number">500</span>);    <span class="comment">//LED2 闪烁 </span></span><br><span class="line">            osal_start_timerEx(GenericApp_TaskID,SEND_TO_ALL_EVENT,<span class="number">5000</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// Release the memory</span></span><br><span class="line">      osal_msg_deallocate( (uint8 *)MSGpkt );<span class="comment">//接收到的消息处理完后，释放消息所占的存储空间</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Next</span></span><br><span class="line">      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return unprocessed events</span></span><br><span class="line">    <span class="keyword">return</span> (events ^ SYS_EVENT_MSG);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">if</span>(events&amp;SEND_TO_ALL_EVENT)<span class="comment">//数据发送事件</span></span><br><span class="line">  &#123;</span><br><span class="line">    GenericApp_SendTheMessage();<span class="comment">//每隔5s 向终端节点发送数据函数</span></span><br><span class="line">    osal_start_timerEx(GenericApp_TaskID,SEND_TO_ALL_EVENT,<span class="number">5000</span>);</span><br><span class="line">    <span class="keyword">return</span> (events^SEND_TO_ALL_EVENT);    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Discard unknown events</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips: SEND_TO_ALL_EVENT需要你自己定义一个数值即可。<br>假定协调器发来消息，那么就去了AF_INCOMING_MSG_CMD这个case里，在那里我们需要把LED状态翻转，并通过串口输出到PC，我们可以通过串口调试助手查看该信息。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向终端节点发送数据函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenericApp_SendTheMessage</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>* theMessageData =<span class="string">"Coordinator send!"</span>;</span><br><span class="line">  afAddrType_t my_DstAddr;</span><br><span class="line">  my_DstAddr.addrMode=(afAddrMode_t)AddrBroadcast;</span><br><span class="line">  my_DstAddr.endPoint=GENERICAPP_ENDPOINT;</span><br><span class="line">  my_DstAddr.addr.shortAddr=<span class="number">0xFFFF</span>; </span><br><span class="line">  AF_DataRequest(&amp;my_DstAddr,&amp;GenericApp_epDesc,</span><br><span class="line">                 GENERICAPP_CLUSTERID,</span><br><span class="line">                 osal_strlen(theMessageData)+<span class="number">1</span>,</span><br><span class="line">                 theMessageData, </span><br><span class="line">                 &amp;GenericApp_TransID,AF_DISCV_ROUTE,AF_DEFAULT_RADIUS); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//协调器接受到终端节点发送来的数据时</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenericApp_MessageMSGCB</span><span class="params">( afIncomingMSGPacket_t *pkt )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">20</span>];</span><br><span class="line">  <span class="keyword">switch</span>(pkt-&gt;clusterId)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">case</span> GENERICAPP_CLUSTERID:</span><br><span class="line">    osal_memcpy(buf,pkt-&gt;cmd.Data,<span class="number">20</span>);</span><br><span class="line">    HalUARTWrite(<span class="number">0</span>,buf,<span class="number">20</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="终端节点"><a href="#终端节点" class="headerlink" title="终端节点"></a>终端节点</h2><p>终端节点要做的事情也只有三个，一个是接收广播消息，另一个是如果收到协调器的消息就发送“EndDevice1 received!”，第三就是同时翻转LED状态。</p><p>我手边目前就一个协调器，一个终端节点。那么就编号为EndDevice1，如果你有很多个终端节点的话，分别编号为EndDevice2，EndDevice3就行了。</p><p>思路大概差不多，在GenericApp_ProcessEvent里如果收到消息，就进入AF_INCOMING_MSG_CMD这个case里，在那里我们翻转LED，同时去GenericApp_MessageMSGCB函数发消息给协调器。</p><p>参考代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UINT16 <span class="title">GenericApp_ProcessEvent</span><span class="params">( byte task_id, UINT16 events )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  afIncomingMSGPacket_t *MSGpkt;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> ( events &amp; SYS_EVENT_MSG )</span><br><span class="line">  &#123;</span><br><span class="line">    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );</span><br><span class="line">    <span class="keyword">while</span> ( MSGpkt )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( MSGpkt-&gt;hdr.event )</span><br><span class="line">      &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">case</span>  AF_INCOMING_MSG_CMD:</span><br><span class="line">              HalLedSet(HAL_LED_1,HAL_LED_MODE_OFF);</span><br><span class="line">              GenericApp_MessageMSGCB(MSGpkt);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ZDO_STATE_CHANGE:  <span class="comment">//建网后</span></span><br><span class="line">              GenericApp_NwkState=(devStates_t)(MSGpkt-&gt;hdr.status);</span><br><span class="line">              HalLedBlink(HAL_LED_1,<span class="number">0</span>,<span class="number">50</span>,<span class="number">500</span>);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Release the memory</span></span><br><span class="line">      osal_msg_deallocate( (uint8 *)MSGpkt );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Next</span></span><br><span class="line">      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return unprocessed events</span></span><br><span class="line">    <span class="keyword">return</span> (events ^ SYS_EVENT_MSG);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端节点接收数据进入下面的代码里。这里比对一下消息是不是协调器发来的”Coordinator send!。如果是，那么LED2闪烁，同时去发消息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenericApp_MessageMSGCB</span><span class="params">(afIncomingMSGPacket_t *pkt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">char</span>* recvbuf;</span><br><span class="line"> <span class="keyword">switch</span>(pkt-&gt;clusterId)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">case</span> GENERICAPP_CLUSTERID:</span><br><span class="line">    </span><br><span class="line">    osal_memcpy(recvbuf,pkt-&gt;cmd.Data,osal_strlen(<span class="string">"Coordinator send!"</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(osal_memcmp(recvbuf,<span class="string">"Coordinator send!"</span>,osal_strlen(<span class="string">"Coordinator send!"</span>)+<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      HalLedBlink(HAL_LED_2,<span class="number">0</span>,<span class="number">50</span>,<span class="number">500</span>);    <span class="comment">//LED2 闪烁 </span></span><br><span class="line">      GenericApp_SendTheMessage(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GenericApp_SendTheMessage函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenericApp_SendTheMessage</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> *theMessageData=<span class="string">"EndDevice received!"</span>;</span><br><span class="line">  afAddrType_t my_DstAddr;    </span><br><span class="line">  my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;<span class="comment">//Addr16Bit表单播</span></span><br><span class="line">  my_DstAddr.endPoint=GENERICAPP_ENDPOINT;   <span class="comment">//初始化端口</span></span><br><span class="line">  my_DstAddr.addr.shortAddr=<span class="number">0x0000</span>;  <span class="comment">//协调器地址  </span></span><br><span class="line">                         </span><br><span class="line">  AF_DataRequest(&amp;my_DstAddr,&amp;GenericApp_epDesc,</span><br><span class="line">                 GENERICAPP_CLUSTERID,</span><br><span class="line">                 osal_strlen(theMessageData)+<span class="number">1</span>,</span><br><span class="line">                 theMessageData,&amp;GenericApp_TransID,</span><br><span class="line">                 AF_DISCV_ROUTE,AF_DEFAULT_RADIUS);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="烧录代码"><a href="#烧录代码" class="headerlink" title="烧录代码"></a>烧录代码</h2><p>分别烧录代码，把PC串口线接协调器，然后就可以看到每隔5秒打印的EndDevice1 received!</p><p><img src="https://i.loli.net/2019/11/25/CqWMk6GVXiTY8wg.png" alt="20191125215140.png"></p><p>本次实验在上次实验的基础上稍微修改即可，主要还是思路要清晰。</p><h2 id="写在最后的话"><a href="#写在最后的话" class="headerlink" title="写在最后的话"></a>写在最后的话</h2><p>今天看到一段话，想到我也有过那么几次感同身受。突然有点触动。在这里分享一下。与君共勉。</p><blockquote><p>有时候，我就觉得，人生很奇妙，未来真的没法规划。我特别喜欢深夜，戴着耳机，一个人敲代码，感觉每个代码都是那么优雅，似乎整个世界都是我的。写程序的那段时光，教会了我踏实、谨慎、做事缜密、持续不断的学习劲头，这些特质让我受益终身。</p></blockquote><blockquote><p>Sometimes, I feel that life is wonderful, and the future is really impossible to plan. I especially like the middle of the night, wearing headphones, coding, and I feel that every code is so elegant, it seems that the whole world is mine. The time when I wrote programs taught me to be practical, cautious, meticulous, and continually learning. I have benefited from these qualities for my life.</p></blockquote><h2 id="需要联系我？"><a href="#需要联系我？" class="headerlink" title="需要联系我？"></a>需要联系我？</h2><p>如果有疑问或者建议，可以发邮件至<a href="mailto:stefancharles@qq.com" target="_blank" rel="noopener">stefancharles@qq.com</a>与我交流讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zigbee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模式识别与人工智能课设】基于CNN的人脸&amp;猫狗分类</title>
      <link href="/2019/11/24/facecnn/"/>
      <url>/2019/11/24/facecnn/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>传统方法依赖于人工设计的特征（比如边和纹理描述量）与机器学习技术（比如主成分分析、线性判别分析或支持向量机）的组合。人工设计在无约束环境中对不同变化情况稳健的特征是很困难的，这使得过去的研究者侧重研究针对每种变化类型的专用方法，比如能应对不同年龄的方法不能应对不同姿势的方法，或者不能应对不同光照条件的方法等。深度学习方法的主要优势是它们可用非常大型的数据集进行训练，从而学习到表征这些数据的最佳特征。基于CNN 的人脸识别方法能够学到人脸图像中稳健的特征，从而能够应对在训练过程中使用的人脸图像所呈现出的真实世界变化情况。</p><p>虽然说python已经存在很多的cnn框架和api可以调用，这大大简化了我们上手的难度，但是配置环境是令人头疼的问题之一。</p><p>下面我做一个简单的入门 python&amp;pycharm 教程。</p><a id="more"></a><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><h3 id="1-Pycharm"><a href="#1-Pycharm" class="headerlink" title="1.Pycharm"></a>1.Pycharm</h3><p>首先我们需要去下载一个ToolBox,它是JB公司官方的软件全家桶管理软件。就是一个下载器。用来下载Pycharm等其他软件非常方便。</p><p><a href="https://www.jetbrains.com/toolbox-app/" target="_blank" rel="noopener">点击这里去翻墙下载</a></p><p>如果你打不开上面的网址，那么可以点击下面的链接下载我已经下载好的：</p><ul><li>下载:<a href="https://www.lanzous.com/i7k3m4b" target="_blank" rel="noopener">https://www.lanzous.com/i7k3m4b</a> </li><li>密码:1024</li></ul><p>下载之后，安装。这里不多说。</p><p>安装好之后打开。</p><p><img src="https://i.loli.net/2019/11/24/1LblQ9dCZpDzhwc.png" alt="install.png"></p><p>如上图所示，找到Pycharm Community（社区版，也就是免费版），点击Install。由于上图我已经安装了，所以就没有install显示了。</p><p>当然，你也可以选择安装专业版，不过需要收费激活。事实上我们个人进行开发社区版就足够。</p><h3 id="2-Python-3-7"><a href="#2-Python-3-7" class="headerlink" title="2.Python 3.7"></a>2.Python 3.7</h3><p>最新的版本是3.8。但是我实际使用的时候有很多不稳定的地方。所以这里安装3.7比较合适。</p><p><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">点击这里去下载python</a></p><p>网页上可以找到3.7.请选择64位版本。</p><p>我这里已经下载了3.7的Windows版本。点击下面的链接就可以下载。如果你的操作系统是其他的话，需要去官网下载。</p><ul><li>下载:<a href="https://www.lanzous.com/i7k439i" target="_blank" rel="noopener">https://www.lanzous.com/i7k439i</a> </li><li>密码:1024</li></ul><p>下载后双击安装。</p><blockquote><p>注意：安装的时候请勾选”Add to PATH”！这可以避免你后面自己配置环境变量。</p></blockquote><h2 id="新建一个工程"><a href="#新建一个工程" class="headerlink" title="新建一个工程"></a>新建一个工程</h2><p>打开安装好的Pycharm。在做左上角点击File。</p><p><img src="https://i.loli.net/2019/11/24/ZSqdvhcYH23BGLz.png" alt="new.png"></p><p><img src="https://i.loli.net/2019/11/24/2tEzuQiCsMHmgR9.png" alt="create.png"></p><blockquote><p>需要注意的是，每个工程项目都可以选择不同的Interpreter。</p></blockquote><p>按下<strong>Ctrl+Alt+s</strong>快捷组合键打开Interpreter配置界面。</p><p><img src="https://i.loli.net/2019/11/24/dcIxmtazsHkNOQe.png" alt="env.png"></p><p>我选择的都是第一个。这个看个人喜好。如果你用Anaconda的话，也是在这里选择。</p><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p>在界面左上角，File==&gt;New，选择第5个，新建一个python File.</p><p>例如我们输入如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>这里就需要导入numpy，否则后面就无法使用np.array 等函数。</p><p>按下<strong>Ctrl+Alt+s</strong>快捷组合键打开设置，然后选择Project:XXXX==&gt;Project Interpreter配置界面。</p><p><img src="https://i.loli.net/2019/11/24/HYqthumKZL87SbF.png" alt="add.png"></p><p>点击+号。</p><p>因为默认的源是python官方的网址源，实际下载的时候速度可能不理想。所以最好加入国内的清华源或者阿里源。</p><p>点击manage repository。修改源。</p><p><img src="https://i.loli.net/2019/11/24/A83jgfCid27zq9k.png" alt="repo.png"></p><p><img src="https://i.loli.net/2019/11/25/stTpj8iwXSyuYOd.png" alt="yuan.png"></p><p>点击右边的+号，分别添加下面的链接。只添加其中一个也可以，也可以都添加。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure><p>还有一种导包的方式的就是在代码界面，鼠标移动到pycharm划红线提示的地方，会有提示你install这个package，点击那里也可以安装，但是那个是使用默认的python源，即使你上一步换了源也没用。<br><img src="https://i.loli.net/2019/11/25/PFzQTKvVgXZxw6W.png" alt="ppp.png"></p><p>多数情况下，在Interpreter里就可以安装你所需要的包了。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>python很多语法都比C/C++，java等简单很多。具体语法我这里也写不完。个人认为在你入手代码前，去了解一下python的列表和元组。</p><p><a href="https://docs.python.org/zh-cn/3.7/tutorial/index.html" target="_blank" rel="noopener">更多官方教程点击这里</a></p><p>另外，一行python语句结尾不要求分号结尾，换行就行。这很方便，但也导致python对缩进要求较为严格，如果后面你自己对着参考代码写着，结果你的编辑器提示报错，请检查你的代码缩进有没有错误。</p><h2 id="基于CNN的人脸分类"><a href="#基于CNN的人脸分类" class="headerlink" title="基于CNN的人脸分类"></a>基于CNN的人脸分类</h2><p>下面就开始上手，实际上网络上已经有很多实现CNN人脸识别的代码，代码都不是唯一的，实现方式有很多，下面的代码也<strong>仅供参考</strong>。更多的是思路。</p><h3 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h3><p>想要对人脸进行分类，首先得读取人脸图片。</p><p>将你要分类的人脸图片放置在你的新建的项目的文件夹下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(path)</span>:</span></span><br><span class="line">    img_list = []</span><br><span class="line">    label_list = []</span><br><span class="line">    dir_counter = <span class="number">0</span></span><br><span class="line">    IMG_SIZE = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对路径下的所有子文件夹中的所有jpg文件进行读取并存入到一个list中</span></span><br><span class="line">    <span class="keyword">for</span> child_dir <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        child_path = os.path.join(path, child_dir)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> dir_image <span class="keyword">in</span> os.listdir(child_path):</span><br><span class="line">            <span class="keyword">if</span> endwith(dir_image, <span class="string">'jpg'</span>):</span><br><span class="line">                img = cv2.imread(os.path.join(child_path, dir_image))</span><br><span class="line">                resized_img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))</span><br><span class="line">                recolored_img = cv2.cvtColor(resized_img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">                img_list.append(recolored_img)</span><br><span class="line">                label_list.append(dir_counter)</span><br><span class="line"></span><br><span class="line">        dir_counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回的img_list转成了 np.array的格式</span></span><br><span class="line">    img_list = np.array(img_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> img_list, label_list, dir_counter</span><br></pre></td></tr></table></figure><p>这里相当于C++里的函数。函数内容很好理解。输入一个文件路径，对其下的每个文件夹下的图片读取，并对每个文件夹给一个不同的Label。返回一个img的list,返回一个对应label的list,返回一下有几种label。</p><p>这里我用到了cv和os的函数，所以需要导入相关的包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>没有正确导包的话，就没法使用os.listdir等函数。</p><p>其中endwith是另外的函数。作用是输入一个字符串一个标签，对这个字符串的后续和标签进行匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">endwith</span><span class="params">(s, *endstring)</span>:</span></span><br><span class="line">    resultArray = map(s.endswith, endstring)</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span> <span class="keyword">in</span> resultArray:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>好了，现在来验证一下能不能正确的读取图片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img_list, label_lsit, counter = read_file(<span class="string">'D:\\py\\DeepLeaning\\train_imgs'</span>)</span><br><span class="line">    print(counter)</span><br><span class="line">    print(img_list[<span class="number">1</span>])</span><br><span class="line">    print(label_lsit[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>当然，python可以不需要一个main函数，可以按照顺序执行。如果写了if <strong>name</strong> == ‘<strong>main</strong>‘，那么就从这里开始执行。</p><p>路径请输入你的图片的文件夹的绝对路径。</p><p>接下来运行。</p><p><img src="https://i.loli.net/2019/11/25/2ZN8uE314kMHpLo.png" alt="20191125105503.png"></p><p>点击main函数的左边的播放图标。或者鼠标右击任意空白区域。或者快捷键。</p><p><img src="https://i.loli.net/2019/11/25/1lE3ZOBQaGxjS79.png" alt="20191125105552.png"></p><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">D:\py\DeepLeaning\venv\Scripts\python.exe D:/py/DeepLeaning/read_data.py</span><br><span class="line"><span class="number">3</span></span><br><span class="line">[[ <span class="number">70</span>  <span class="number">66</span>  <span class="number">61</span> ... <span class="number">122</span> <span class="number">122</span> <span class="number">122</span>]</span><br><span class="line"> [ <span class="number">71</span>  <span class="number">66</span>  <span class="number">60</span> ... <span class="number">122</span> <span class="number">122</span> <span class="number">122</span>]</span><br><span class="line"> [ <span class="number">69</span>  <span class="number">64</span>  <span class="number">59</span> ... <span class="number">122</span> <span class="number">122</span> <span class="number">122</span>]</span><br><span class="line"> ...</span><br><span class="line"> [ <span class="number">24</span>  <span class="number">30</span>  <span class="number">34</span> ... <span class="number">169</span> <span class="number">169</span> <span class="number">169</span>]</span><br><span class="line"> [ <span class="number">24</span>  <span class="number">30</span>  <span class="number">34</span> ... <span class="number">170</span> <span class="number">170</span> <span class="number">170</span>]</span><br><span class="line"> [ <span class="number">24</span>  <span class="number">30</span>  <span class="number">34</span> ... <span class="number">171</span> <span class="number">171</span> <span class="number">171</span>]]</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>差不多的话就是上面这样，没有报错说明成功了第一步。</p><p>然后下一步处理一下数据集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_data</span><span class="params">(self, path)</span>:</span></span><br><span class="line">    <span class="comment"># 根据指定路径读取出图片、标签和类别数</span></span><br><span class="line">    imgs, labels, counter = read_file(path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机分组</span></span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(imgs, labels, test_size=<span class="number">0.2</span>,</span><br><span class="line">                                                        random_state=random.randint(<span class="number">0</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 归一化处理</span></span><br><span class="line">    X_train = X_train.reshape(X_train.shape[<span class="number">0</span>], <span class="number">1</span>, self.img_size, self.img_size) / <span class="number">255.0</span></span><br><span class="line">    X_test = X_test.reshape(X_test.shape[<span class="number">0</span>], <span class="number">1</span>, self.img_size, self.img_size) / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">    X_train = X_train.astype(<span class="string">'float32'</span>)</span><br><span class="line">    X_test = X_test.astype(<span class="string">'float32'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转化labels</span></span><br><span class="line">    Y_train = np_utils.to_categorical(y_train, num_classes=counter)</span><br><span class="line">    Y_test = np_utils.to_categorical(y_test, num_classes=counter)</span><br></pre></td></tr></table></figure><h3 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h3><p>为了方便后面操作。我们把上面处理数据集的process_data函数写到一个DataSet类里。在这个类初始化的过程中读取path下的训练数据。<br>那么我们下次实例化这个类的时候就已经完成了数据读取的工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataSet</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        self.num_classes = <span class="literal">None</span></span><br><span class="line">        self.X_train = <span class="literal">None</span></span><br><span class="line">        self.X_test = <span class="literal">None</span></span><br><span class="line">        self.Y_train = <span class="literal">None</span></span><br><span class="line">        self.Y_test = <span class="literal">None</span></span><br><span class="line">        self.img_size = <span class="number">100</span></span><br><span class="line">        self.process_data(path) </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_data</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        <span class="comment"># 根据指定路径读取出图片、标签和类别数</span></span><br><span class="line">        imgs, labels, counter = read_file(path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 随机分组</span></span><br><span class="line">        X_train, X_test, y_train, y_test = train_test_split(imgs, labels, test_size=<span class="number">0.2</span>,</span><br><span class="line">                                                            random_state=random.randint(<span class="number">0</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        X_train = X_train.reshape(X_train.shape[<span class="number">0</span>], <span class="number">1</span>, self.img_size, self.img_size) / <span class="number">255.0</span></span><br><span class="line">        X_test = X_test.reshape(X_test.shape[<span class="number">0</span>], <span class="number">1</span>, self.img_size, self.img_size) / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">        X_train = X_train.astype(<span class="string">'float32'</span>)</span><br><span class="line">        X_test = X_test.astype(<span class="string">'float32'</span>)</span><br><span class="line"></span><br><span class="line">        Y_train = np_utils.to_categorical(y_train, num_classes=counter)</span><br><span class="line">        Y_test = np_utils.to_categorical(y_test, num_classes=counter)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.X_train = X_train</span><br><span class="line">        self.X_test = X_test</span><br><span class="line">        self.Y_train = Y_train</span><br><span class="line">        self.Y_test = Y_test</span><br><span class="line">        self.num_classes = counter</span><br></pre></td></tr></table></figure><p>同样的，我们可以写一个FaceModel类，在类里建立模型，主函数里实例化后使用.来访问成员函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FaceModel</span><span class="params">(object)</span>:</span></span><br><span class="line">    FILE_PATH = <span class="string">"D:\py\DeepLeaning\modelcat.h5"</span> </span><br><span class="line">    IMAGE_SIZE = <span class="number">100</span>  <span class="comment"># 模型接受的人脸图片</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.model = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取实例化后的DataSet类作为进行训练的数据源</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_trainData</span><span class="params">(self, dataset)</span>:</span></span><br><span class="line">        self.dataset = dataset</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 建立CNN模型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_model</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.model = Sequential()</span><br><span class="line">        self.model.add(</span><br><span class="line">            Convolution2D(</span><br><span class="line">                filters=<span class="number">64</span>,</span><br><span class="line">                kernel_size=(<span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">                padding=<span class="string">'same'</span>,</span><br><span class="line">                dim_ordering=<span class="string">'th'</span>,</span><br><span class="line">                input_shape=self.dataset.X_train.shape[<span class="number">1</span>:]</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.model.add(Activation(<span class="string">'relu'</span>))</span><br><span class="line">        self.model.add(</span><br><span class="line">            MaxPooling2D(</span><br><span class="line">                pool_size=(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">                strides=(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">                padding=<span class="string">'same'</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.model.add(Convolution2D(filters=<span class="number">128</span>, kernel_size=(<span class="number">5</span>, <span class="number">5</span>), padding=<span class="string">'same'</span>))</span><br><span class="line">        self.model.add(Activation(<span class="string">'relu'</span>))</span><br><span class="line">        self.model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>), strides=(<span class="number">2</span>, <span class="number">2</span>), padding=<span class="string">'same'</span>))</span><br><span class="line"></span><br><span class="line">        self.model.add(Flatten())</span><br><span class="line">        self.model.add(Dense(<span class="number">512</span>))</span><br><span class="line">        self.model.add(Activation(<span class="string">'relu'</span>))</span><br><span class="line"></span><br><span class="line">        self.model.add(Dense(self.dataset.num_classes))</span><br><span class="line">        self.model.add(Activation(<span class="string">'sigmoid'</span>))  <span class="comment"># or softmax</span></span><br><span class="line">        self.model.summary()</span><br></pre></td></tr></table></figure><p>ok,这里就已经完成了模型的建立，上面很多参数可以根据实际情况进行调整。多调整几次，试一试最后哪一种最合适。</p><h3 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span><span class="params">(self)</span>:</span></span><br><span class="line">     self.model.compile(</span><br><span class="line">         optimizer=<span class="string">'RMSprop'</span>, </span><br><span class="line">         loss=<span class="string">'categorical_crossentropy'</span>, </span><br><span class="line">         metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">     self.model.fit(self.dataset.X_train, self.dataset.Y_train, epochs=<span class="number">15</span>, batch_size=<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>optimizer还有RMSprop, Adagrad等可以选择，loss也可以调整。<br>epochs为训练多少轮、batch_size为每次训练多少个样本。这里也不是说一定epochs越大越好，有可能过拟合，数据样本太小的情况下，会有出现后面100%的测试准确率，那就没什么意义。</p><h3 id="评估模型"><a href="#评估模型" class="headerlink" title="评估模型"></a>评估模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_model</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'\nEvaluate model...'</span>)</span><br><span class="line">    loss, accuracy = self.model.evaluate(self.dataset.X_test, self.dataset.Y_test)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Evaluate loss;'</span>, loss)</span><br><span class="line">    print(<span class="string">'Evaluate accuracy:'</span>, accuracy)</span><br></pre></td></tr></table></figure><h2 id="保存和读取模型"><a href="#保存和读取模型" class="headerlink" title="保存和读取模型"></a>保存和读取模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, file_path=FILE_PATH)</span>:</span></span><br><span class="line">    print(<span class="string">'Saving...'</span>)</span><br><span class="line">    self.model.save(file_path)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self, file_path=FILE_PATH)</span>:</span></span><br><span class="line">    print(<span class="string">'Loading...'</span>)</span><br><span class="line">    self.model = load_model(file_path)</span><br></pre></td></tr></table></figure><h2 id="测试模型"><a href="#测试模型" class="headerlink" title="测试模型"></a>测试模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = self.model.predict_proba(img)</span><br></pre></td></tr></table></figure><p>这里返回的是img属于某个label的概率。在这里写一个for循环遍历测试集的图片即可。最后可以用正确预测的数目除以总的测试集数量得出准确率。</p><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><p>首先实例化dataset。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    datasets = DataSet(<span class="string">'D:\\py\\DeepLeaning\\data\\train'</span>)</span><br></pre></td></tr></table></figure><p>此时已经根据绝对路径读取了img和label列表。</p><p>然后实例化FaceModel类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = FaceModel()</span><br><span class="line">model.read_trainData(datasets)</span><br></pre></td></tr></table></figure><p>这里读取实例化后的DataSet类datasets作为进行训练的数据来源。</p><p>然后分别调用上面写好的函数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model.build_model()</span><br><span class="line">model.train_model()</span><br><span class="line">model.evaluate_model()</span><br></pre></td></tr></table></figure><h2 id="人脸分类结果"><a href="#人脸分类结果" class="headerlink" title="人脸分类结果"></a>人脸分类结果</h2><p><img src="https://i.loli.net/2019/11/25/BRkFPNp92b65Igc.png" alt="111.png"></p><h2 id="猫狗分类结果"><a href="#猫狗分类结果" class="headerlink" title="猫狗分类结果"></a>猫狗分类结果</h2><p><img src="https://i.loli.net/2019/11/26/Q6TZ5enfLscASDV.png" alt="dog20191126104653.png"></p><blockquote><p>有时间将不定期更新本文</p></blockquote><h2 id="需要联系我？"><a href="#需要联系我？" class="headerlink" title="需要联系我？"></a>需要联系我？</h2><p>请发邮件</p><p>我的邮箱：<a href="mailto:stefancharles@vip.qq.com" target="_blank" rel="noopener">stefancharles@vip.qq.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Zigbee】终端节点采集温度与协调器通信实验</title>
      <link href="/2019/11/23/UarttoPC/"/>
      <url>/2019/11/23/UarttoPC/</url>
      
        <content type="html"><![CDATA[<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>两个节点的通信，A为协调器，B为终端节点，终端节点采集到温度信息，发送给协调器，我们通过串口助手可以观察到协调器接收到终端节点的温度信息。</p><a id="more"></a><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>IAR v10.30.1</li><li>Win10 1909</li><li>串口调试助手 v4.13.3</li></ul><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><h3 id="1-下载基本工程文件"><a href="#1-下载基本工程文件" class="headerlink" title="1.下载基本工程文件"></a>1.下载基本工程文件</h3><p>首先下载最基本的工程文件，我们在这个的基础上进行代码修改。</p><ul><li>下载地址:<a href="https://www.lanzous.com/i7j1gtc" target="_blank" rel="noopener">https://www.lanzous.com/i7j1gtc</a> </li><li>密码:1024</li></ul><h3 id="2-下载最新版IAR"><a href="#2-下载最新版IAR" class="headerlink" title="2.下载最新版IAR"></a>2.下载最新版IAR</h3><p><a href="https://www.iar.com/iar-embedded-workbench/#!?architecture=8051" target="_blank" rel="noopener">点击这里去官网下载最新版</a>。找到“<strong>Downlaod</strong>”字样进行下载。</p><p><img src="https://i.loli.net/2019/11/23/J2ecy315RTqhf8n.png" alt="download.png"></p><h3 id="3-打开工程文件"><a href="#3-打开工程文件" class="headerlink" title="3.打开工程文件"></a>3.打开工程文件</h3><p>解压你第一步下载的基本工程的压缩包，路径是“<strong>…\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\GenericApp\CC2530DB</strong>”文件夹下的<strong>GenericApp.eww</strong>。</p><p>双击使用最新版IAR打开它。刚打开的时候IAR会<strong>多次</strong>提示你版本不兼容信息，不必理会，直接一路点击Ok就行。</p><h3 id="4-尝试编译"><a href="#4-尝试编译" class="headerlink" title="4.尝试编译"></a>4.尝试编译</h3><p>上一步完成后，先不改动任何地方。直接点击rebuild图标或者按下F7。也就是下图的箭头指向的图标。</p><p><img src="https://i.loli.net/2019/11/23/xwdGPJACeFkg1q2.png" alt="rebuild.png"></p><p>先看是否报错。如果报错，先参考这里<a href="https://stefancharles.xyz/2019/11/21/IARproblem/">【IAR-10.30.1】最新版本IAR常见编译问题总结</a>。</p><p>按照上一篇博客的方法解决问题即可。</p><h2 id="终端节点"><a href="#终端节点" class="headerlink" title="终端节点"></a>终端节点</h2><p>终端节点就做两件事。一个是采集温度，一个是发送消息给协调器。</p><h3 id="1-采集温度"><a href="#1-采集温度" class="headerlink" title="1.采集温度"></a>1.采集温度</h3><p>采集温度有两种方式，一种是使用片内温度，另一种是使用DHT11，前者误差较大，但是很方便；后者数据精确，但是代码部分较麻烦。</p><h4 id="片内温度"><a href="#片内温度" class="headerlink" title="片内温度"></a>片内温度</h4><p>在IAR中打开Enddevice.c。我们在这里加入一个获取片内温度的函数供我们后面调用。</p><blockquote><p>参考代码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取片内温度</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">getTemperature</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> i;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> AdcValue;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ADCCON3|=<span class="number">0x3E</span>;</span><br><span class="line">        ADCCON1|=<span class="number">0x40</span>;<span class="comment">//使用1.25V内部电压</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!(ADCCON1&amp;<span class="number">0x80</span>));</span><br><span class="line">        value=ADCL&gt;&gt;<span class="number">2</span>;</span><br><span class="line">        value|=((<span class="keyword">unsigned</span> <span class="keyword">int</span> )ADCH&lt;&lt;<span class="number">6</span>);</span><br><span class="line">        AdcValue+=value;   </span><br><span class="line">    &#125;</span><br><span class="line">    value=AdcValue&gt;&gt;<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> )(value*<span class="number">0.0629</span><span class="number">-303.3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好先在最开头声明这个函数，然后随意在一个地方实现它就行。</p><p>然后看我们应该在Enddevice.c哪里调用上面的函数。</p><p>仔细阅读代码不难发现，在UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )函数里都是处理事件发生的函数。</p><p>注意到有下面代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( events &amp; SEND_DATA_EVENT )</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="comment">// Send "the" message</span></span><br><span class="line"></span><br><span class="line">   GenericApp_SendTheMessage();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Setup to send message again</span></span><br><span class="line">   osal_start_timerEx( GenericApp_TaskID,SEND_DATA_EVENT,<span class="number">1000</span> );</span><br><span class="line"> <span class="keyword">return</span>( events &amp; SEND_DATA_EVENT );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="DHT11采集温度"><a href="#DHT11采集温度" class="headerlink" title="DHT11采集温度"></a>DHT11采集温度</h4><p>上面使用片内采集温度。如果你不要求精度的话，这里DHT11可以跳过。</p><p>众所周知，DHT11采集温度对时序有着严格的要求。<a href="https://stefancharles.xyz/2019/10/27/getTemperature/">之前的一篇博客</a>简略描述了一下DHT11工作时序。</p><p>代码实现有很多方式，这里给出一个参考代码。</p><ul><li>代码下载地址:<a href="https://www.lanzous.com/i7j45pa" target="_blank" rel="noopener">https://www.lanzous.com/i7j45pa</a> </li><li>密码:1024</li></ul><p>把上面的参考代码加入到工程文件。<br>思路很简单，其中，extern uchar humidity_H,humidity_L,temp_H,temp_L分别是湿度和温度发个位和十位，<br>调用DHT11()函数，然后对应存到char数组里再发送即可。</p><p>问题看似解决了，但是，正如我一开始所说的，<strong>众所周知，DHT11采集温度对时序有着严格的要求</strong>。</p><p>OSAL实现了类似系统一样的调度管理，基于轮询事件驱动的OS。在任意一个<strong>确定的时刻</strong>，OS都只是单线程的，只能执行一个运算，只是时间片轮转，让OS看起来好像是多线程了。</p><p>除此之外，还有单片机的中断。这些都能打断精确的计时任务，也就是说，这种情况下，满足不了DHT11精确的时序，也就获取不到温度了。</p><p>解决方案目前有两种，一种是在采集温度前关闭所有中断。另一种是在整个协议栈运行起来之前获取温度。</p><p>由于多个课程设计等时间原因我还没具体做上面的方案。有时间再更新这部分。</p><p>有其他方案的欢迎留言讨论。</p><h3 id="2-发送消息"><a href="#2-发送消息" class="headerlink" title="2.发送消息"></a>2.发送消息</h3><p>获取温度后，这里调用了 GenericApp_SendTheMessage()函数来发送消息。那么我们在发送消息前，获取温度，把获取到的温度当作消息发送出去即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenericApp_SendTheMessage</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> strtemp[<span class="number">3</span>];</span><br><span class="line">   osal_memset(strtemp, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">   AvgTemp = getTemperature();</span><br><span class="line">   strtemp[<span class="number">0</span>]=AvgTemp/<span class="number">10</span>+<span class="number">0x30</span>;</span><br><span class="line">   strtemp[<span class="number">1</span>]=AvgTemp%<span class="number">10</span>+<span class="number">0x30</span>;</span><br><span class="line">   strtemp[<span class="number">2</span>]=<span class="string">'\0'</span>;</span><br><span class="line">    </span><br><span class="line">   AF_DataRequest( &amp;GenericApp_DstAddr, &amp;GenericApp_epDesc,</span><br><span class="line">                       GENERICAPP_CLUSTERID,</span><br><span class="line">                       (byte)osal_strlen( strtemp ) + <span class="number">1</span>,</span><br><span class="line">                       (byte *)&amp;strtemp,</span><br><span class="line">                       &amp;GenericApp_TransID,</span><br><span class="line">                       AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) ;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里调用AF_DataRequest()函数发送消息给协调器。</p><h2 id="协调器"><a href="#协调器" class="headerlink" title="协调器"></a>协调器</h2><p>协调器要做的事情也只有两个，一个是接收消息，另一个是把消息打印到串口。</p><h3 id="1-接收消息"><a href="#1-接收消息" class="headerlink" title="1.接收消息"></a>1.接收消息</h3><p>在IAR中打开Coordinator.c。找到void GenericApp_Init( byte task_id )函数里面的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//uartConfig.callBackFunc =rxCB;</span></span><br><span class="line">uartConfig.callBackFunc=<span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>因为我不需要串口的回调函数，所以注释，并指向空。</p><p>同样的，我们只需要在UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )函数里，把消息到来的时候的事件处理函数写完整即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UINT16 <span class="title">GenericApp_ProcessEvent</span><span class="params">( byte task_id, UINT16 events )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  afIncomingMSGPacket_t *MSGpkt;</span><br><span class="line">  <span class="keyword">if</span> ( events &amp; SYS_EVENT_MSG )</span><br><span class="line">  &#123;</span><br><span class="line">    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );</span><br><span class="line">    <span class="keyword">while</span> ( MSGpkt )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> ( MSGpkt-&gt;hdr.event )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> AF_INCOMING_MSG_CMD:</span><br><span class="line">          HalLedBlink(HAL_LED_1,<span class="number">6</span>,<span class="number">50</span>,<span class="number">1000</span>);</span><br><span class="line">          GenericApp_MessageMSGCB( MSGpkt );</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Release the memory</span></span><br><span class="line">      osal_msg_deallocate( (uint8 *)MSGpkt );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Next</span></span><br><span class="line">      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return unprocessed events</span></span><br><span class="line">    <span class="keyword">return</span> (events ^ SYS_EVENT_MSG);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Discard unknown events</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-向串口发送"><a href="#2-向串口发送" class="headerlink" title="2.向串口发送"></a>2.向串口发送</h3><p>当有消息过来的时候，进入AF_INCOMING_MSG_CMD的case里，这这里调用GenericApp_MessageMSGCB( MSGpkt )即消息处理函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参考代码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenericApp_MessageMSGCB</span><span class="params">( afIncomingMSGPacket_t *pkt )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buffer[<span class="number">4</span>]=<span class="string">"    "</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *temp;</span><br><span class="line"><span class="built_in">sprintf</span>(temp,<span class="string">"Temperature:"</span>);</span><br><span class="line">HalUARTWrite(<span class="number">0</span>,temp,<span class="number">13</span>);  </span><br><span class="line"><span class="keyword">switch</span> ( pkt-&gt;clusterId )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">case</span> GENERICAPP_CLUSTERID:</span><br><span class="line">      osal_memcpy(buffer,pkt-&gt;cmd.Data, <span class="number">3</span>);</span><br><span class="line">      HalUARTWrite(<span class="number">0</span>,buffer,<span class="number">4</span>);  </span><br><span class="line">      osal_memset(buffer,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>osal_memcpy(buffer,pkt-&gt;cmd.Data, 3)是把消息中的数据复制到buffer里。<br>这里HalUARTWrite()函数是协议栈已经存在的函数，作用是向串口发送信息。</p><h3 id="烧录代码出现Get-Alternative-File"><a href="#烧录代码出现Get-Alternative-File" class="headerlink" title="烧录代码出现Get Alternative File"></a>烧录代码出现Get Alternative File</h3><p><img src="https://i.loli.net/2019/11/23/YuA8RGKCblsr6a3.png" alt="skip.png"></p><blockquote><p>点击“Skip”就行。</p></blockquote><h2 id="说在最后的话"><a href="#说在最后的话" class="headerlink" title="说在最后的话"></a>说在最后的话</h2><p>好了，完成上面的后，编译，烧录代码。连接串口，打开PC串口助手，应该可以在串口助手里看到协调器发来的消息。不过极有可能接收到是乱的，或者看起来不科学的温度数据。</p><p>这也很正常，毕竟这个很不准确。</p><p>我相信，正在看这篇文章的你应该可以想到改进的方法。我抛砖引玉的工作就到这里暂时结束，还有诸多课程设计等待我去完成，有缘下期见。</p><h2 id="需要联系我？"><a href="#需要联系我？" class="headerlink" title="需要联系我？"></a>需要联系我？</h2><p>请发邮件</p><p>我的邮箱：<a href="mailto:stefancharles@vip.qq.com" target="_blank" rel="noopener">stefancharles@vip.qq.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zigbee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【IAR-10.30.1】最新版本IAR常见编译问题总结</title>
      <link href="/2019/11/21/IARproblem/"/>
      <url>/2019/11/21/IARproblem/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>近期，老师经常使用旧版本协议栈布置作业，但是我使用的是最新版本的IAR，导致打开工程的时候，编译的时候总有莫名奇妙的版本兼容问题。</p><p>所以本篇博客总结一些IAR编译旧版本工程报错以及解决方案。</p><p>有不对的地方还请指正，感激不尽。</p><a id="more"></a><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ul><li>Win10 1909</li><li>IAR 10.30.1</li><li>Z-Stack</li><li>VScode</li></ul><h2 id="1-Error-e16-Segment-RAM-CODE-FLASH"><a href="#1-Error-e16-Segment-RAM-CODE-FLASH" class="headerlink" title="1.Error[e16]: Segment RAM_CODE_FLASH"></a>1.Error[e16]: Segment RAM_CODE_FLASH</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error[e16]: Segment RAM_CODE_FLASH (size: 0x27 align: 0) is too long for segment definition. At least 0x4 more bytes needed. The problem occurred while processing the segment placement command  </span><br><span class="line">&quot;-Z(CODE)RAM_CODE_FLASH=_RAM_CODE_FLASH_START-_RAM_CODE_FLASH_END&quot;, where at the moment of placement the available memory ranges were &quot;CODE:39edd-39eff&quot;</span><br></pre></td></tr></table></figure><p>根据报错，RAM_CODE_FLASH需要再扩大至少4个字节。</p><blockquote><p>所以打开Tool里面的f8w2530.xcl文件，将RAM_CODE_FLASH_END的值再增大至少0x04.</p></blockquote><p>在f8w2530.xcl的第226行左右</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-D_RAM_CODE_XDATA_START=<span class="number">0x01EDD</span></span><br><span class="line">-D_RAM_CODE_XDATA_END=(_RAM_CODE_XDATA_START+<span class="number">0x22</span>)</span><br><span class="line">-Z(XDATA)RAM_CODE_XDATA=_RAM_CODE_XDATA_START-_RAM_CODE_XDATA_END</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">-D_RAM_CODE_FLASH_START=<span class="number">0x39EDD</span></span><br><span class="line">-D_RAM_CODE_FLASH_END=(_RAM_CODE_FLASH_START+<span class="number">0x26</span>)<span class="comment">//这里原本是+0x22</span></span><br></pre></td></tr></table></figure><p>修改之后，点击rebuild。应该不会再有<strong>这个</strong>错误。但是一般来说，可能还会遇到下面的错误。</p><h2 id="2-Error-e46-Undefined-external-“-V1”-referred-in-AF"><a href="#2-Error-e46-Undefined-external-“-V1”-referred-in-AF" class="headerlink" title="2.Error[e46]: Undefined external “?V1” referred in AF"></a>2.Error[e46]: Undefined external “?V1” referred in AF</h2><p>这个问题可以参考 <a href="http://supp.iar.com/Support/?Note=98110" target="_blank" rel="noopener">这个连接</a> 。里面解决了这个问题。</p><p>不过，还是简单翻译一下：</p><blockquote><p>需要添加一个workaround.s51 文件加到工程里。注意，这个文件的后缀名就是.s51,不是.c或者其他。请务必保存为正确的后缀名。</p></blockquote><p>我是加到了E:\StudyMaterial2019\URAT\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ZMain\TI2530DB目录下，注意要在工程里该目录右击“add file … ”，添加你新建的这个文件进去。</p><p>然后再次rebuild后，原来的问题没有了，</p><p>workaround.s51文件内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line">;----------------------------------------------------------------;</span><br><span class="line">; Virtual registers ;</span><br><span class="line">; ================= ;</span><br><span class="line">; Below is some segment needed <span class="keyword">for</span> the IAR ICC C/EC++ compiler   ;</span><br><span class="line">; ;</span><br><span class="line">; BREG  : A segment <span class="keyword">for</span> <span class="number">8</span> bit registers <span class="keyword">for</span> use by the compiler. ;</span><br><span class="line">;         ?B0 is the first <span class="keyword">register</span>.                             ;</span><br><span class="line">; VREG  : Segment that holds up to <span class="number">32</span> <span class="keyword">virtual</span> registers <span class="keyword">for</span>      ;</span><br><span class="line">;         use by the compiler. ?V0 is the first <span class="keyword">register</span>.        ;</span><br><span class="line">; PSP   : <span class="function">Segment containing the PDATA <span class="built_in">stack</span> <span class="title">pointer</span> <span class="params">(?PSP)</span>      </span>;</span><br><span class="line">; XSP   : <span class="function">Segment containing the XDATA <span class="built_in">stack</span> <span class="title">pointer</span> <span class="params">(?XSP)</span>      </span>;</span><br><span class="line">;  ;</span><br><span class="line">;----------------------------------------------------------------;</span><br><span class="line">;----------------------------------------------------------------;</span><br><span class="line"></span><br><span class="line">PROGRAM VIRTUAL_REGISTERS</span><br><span class="line">PUBLIC  ?B0</span><br><span class="line">PUBLIC  ?V0</span><br><span class="line">PUBLIC  ?V1</span><br><span class="line">PUBLIC  ?V2</span><br><span class="line">PUBLIC  ?V3</span><br><span class="line">PUBLIC  ?V4</span><br><span class="line">PUBLIC  ?V5</span><br><span class="line">PUBLIC  ?V6</span><br><span class="line">PUBLIC  ?V7</span><br><span class="line">PUBLIC  ?V8</span><br><span class="line">PUBLIC  ?V9</span><br><span class="line">PUBLIC  ?V10</span><br><span class="line">PUBLIC  ?V11</span><br><span class="line">PUBLIC  ?V12</span><br><span class="line">PUBLIC  ?V13</span><br><span class="line">PUBLIC  ?V14</span><br><span class="line">PUBLIC  ?V15</span><br><span class="line">PUBLIC  ?V16</span><br><span class="line">PUBLIC  ?V17</span><br><span class="line">PUBLIC  ?V18</span><br><span class="line">PUBLIC  ?V19</span><br><span class="line">PUBLIC  ?V20</span><br><span class="line">PUBLIC  ?V21</span><br><span class="line">PUBLIC  ?V22</span><br><span class="line">PUBLIC  ?V23</span><br><span class="line">PUBLIC  ?V24</span><br><span class="line">PUBLIC  ?V25</span><br><span class="line">PUBLIC  ?V26</span><br><span class="line">PUBLIC  ?V27</span><br><span class="line">PUBLIC  ?V28</span><br><span class="line">PUBLIC  ?V29</span><br><span class="line">PUBLIC  ?V30</span><br><span class="line">PUBLIC  ?V31</span><br><span class="line">PUBLIC  ?PSP</span><br><span class="line">PUBLIC  ?XSP</span><br><span class="line">RSEG    BREG:BIT:NOROOT</span><br><span class="line">?B0:</span><br><span class="line">DS      <span class="number">8</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">?V0:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line">?V1:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line">?V2:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line">?V3:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line">?V4:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line">?V5:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line">?V6:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line">?V7:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V7</span><br><span class="line">?V8:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V8</span><br><span class="line">?V9:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V9</span><br><span class="line">?V10:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V10</span><br><span class="line">?V11:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V11</span><br><span class="line">?V12:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V12</span><br><span class="line">?V13:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V13</span><br><span class="line">?V14:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V14</span><br><span class="line">?V15:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V15</span><br><span class="line">?V16:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V16</span><br><span class="line">?V17:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V17</span><br><span class="line">?V18:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V18</span><br><span class="line">?V19:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V19</span><br><span class="line">?V20:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V20</span><br><span class="line">?V21:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V21</span><br><span class="line">?V22:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V22</span><br><span class="line">?V23:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V23</span><br><span class="line">?V24:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V24</span><br><span class="line">?V25:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V25</span><br><span class="line">?V26:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V26</span><br><span class="line">?V27:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V27</span><br><span class="line">?V28:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V28</span><br><span class="line">?V29:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V29</span><br><span class="line">?V30:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  RSEG    VREG:DATA:NOROOT</span><br><span class="line">  REQUIRE ?V30</span><br><span class="line">?V31:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">RSEG    PSP:DATA:NOROOT</span><br><span class="line">EXTERN  ?RESET_PSP</span><br><span class="line">REQUIRE?RESET_PSP</span><br><span class="line">?PSP:</span><br><span class="line">DS      <span class="number">1</span></span><br><span class="line"></span><br><span class="line">RSEG    XSP:DATA:NOROOT</span><br><span class="line">EXTERN  ?RESET_XSP</span><br><span class="line">REQUIRE?RESET_XSP</span><br><span class="line">?XSP:</span><br><span class="line">DS      <span class="number">2</span></span><br><span class="line"></span><br><span class="line">ENDMOD ; VIRTUAL_REGISTERS</span><br><span class="line"></span><br><span class="line">END</span><br></pre></td></tr></table></figure><h2 id="3-Error-e16-Segment-ISTACK-size-0xc0-align-0-is-too-long-for-segment-definition"><a href="#3-Error-e16-Segment-ISTACK-size-0xc0-align-0-is-too-long-for-segment-definition" class="headerlink" title="3.Error[e16]: Segment ISTACK (size: 0xc0 align: 0) is too long for segment definition."></a>3.Error[e16]: Segment ISTACK (size: 0xc0 align: 0) is too long for segment definition.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error[e16]: Segment ISTACK (size: 0xc0 align: 0) is too long for segment definition. At least 0xe more bytes needed. The problem occurred while processing the segment placement command</span><br></pre></td></tr></table></figure><blockquote><p>还是打开Tool里面的f8w2530.xcl文件。找到“-Z(DATA)VREG+_NR_OF_VIRTUAL_REGISTERS=08-7F”，修改成“-Z(DATA)VREG=08-7F” 即可。</p></blockquote><h2 id="4-function-“XXXX”-has-no-prototype-…-Texas-Instruments-ZStack-CC2530-2-3-0-1-4-0-Projects-zstack-Samples-GenericApp-CC2530DB-XXX-c"><a href="#4-function-“XXXX”-has-no-prototype-…-Texas-Instruments-ZStack-CC2530-2-3-0-1-4-0-Projects-zstack-Samples-GenericApp-CC2530DB-XXX-c" class="headerlink" title="4.function “XXXX” has no prototype …\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\GenericApp\CC2530DB\XXX.c"></a>4.function “XXXX” has no prototype …\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\GenericApp\CC2530DB\XXX.c</h2><p>解决方法：点击顶部菜单栏的Project,找到options。或者按ALT＋F7，打开选项菜单。</p><p><img src="https://i.loli.net/2019/11/23/MgV3qz7SmrYwDUp.png" alt="options.png"></p><p>把C/C++ Compiler 里面的Require prototypes取消即可。</p><blockquote><p>好了，今天就到这里，后面我遇到问题再更新本博客内容吧。有缘再见。</p></blockquote><h2 id="需要联系我？"><a href="#需要联系我？" class="headerlink" title="需要联系我？"></a>需要联系我？</h2><p>如果有疑问或者建议，可以发邮件至<a href="mailto:stefancharles@qq.com" target="_blank" rel="noopener">stefancharles@qq.com</a>与我交流讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zigbee </tag>
            
            <tag> IAR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HyperLPR字符分割</title>
      <link href="/2019/11/20/hyperlpr/"/>
      <url>/2019/11/20/hyperlpr/</url>
      
        <content type="html"><![CDATA[<h1 id="HyperLPR字符分割"><a href="#HyperLPR字符分割" class="headerlink" title="HyperLPR字符分割"></a>HyperLPR字符分割</h1><h3 id="内容主要介绍"><a href="#内容主要介绍" class="headerlink" title="内容主要介绍"></a>内容主要介绍</h3><ul><li>字符分割</li><li>HyperLPR中的字符分割方法</li><li>字符分割模型的训练</li><li>转换到Caffemodel模型[待续]</li></ul><a id="more"></a><h4 id="字符分割"><a href="#字符分割" class="headerlink" title="字符分割"></a>字符分割</h4><p>字符分割是OCR中非常重要的部分。在讲字符分割之前，简要介绍一下传统OCR所采用的Pipline(当然现在目前大多数据商用的文档OCR解决方案也基本都是基于这种方法)。</p><ul><li>文档分析(提取文档区域，包括了文档的校正等操作)</li><li>行分割</li><li>字符分割</li><li>字符识别</li><li>重新排版</li></ul><p>上列的每一条pipline几乎都决定了OCR系统最后的输出质量。其中字符切割也是OCR中非常重要的组成部分，也是决定OCR系统好坏的比较重要决定因素。</p><p>下面介绍几种字符分割方法:</p><p>1.基于联通域</p><p>基于联通域的分割方法较为简单，影响其效果的主要在在于二值化算法上。本文不再做过多概述，但这种方法在处理非联通字符的过程中往往不能达到良好的效果，所以在应用的过程中往往要结合分类器,概率链等手段来提高效果。</p><p>2.基于投影直方图</p><p>投影直方图是一种很重要的方法，他的思想是去找投影直方图上的极小值点作为分割点，都是在复杂场景的OCR过程中例如手写字符中不是特别理想。</p><p>3.基于滑动窗口</p><p>这里介绍一篇较为经典的论文(<a href="http://ieeexplore.ieee.org/document/6460871/" target="_blank" rel="noopener">End-to-end text recognition with convolutional neural networks</a>)在Cousera上Andrew Ng的Machine Learning课程中也提到了这种方法。在OpenCV的text模块中也有对应的实现。</p><p>它的主要思想是利用一个训练好的正负样本分类器来进行在图像上滑动然后产生概率response图，然后对raw response进行nms(非极大值抑制)。在确定字符bdbox,数目之后使用类似于viterbi算法来获取最佳分割路径。</p><p><img src="https://i.loli.net/2019/11/20/DbaNQu7MGFRfWzL.png" alt="2.png"></p><p>4.基于过分割</p><p>很多商业的OCR系统中采用此方法来进行字符分割，其主要的思想类似于object detection中的 region proposal. 先通过投影直方图等方法产生一系列候选的分割点，然后字符使用分类器对车型候选的分割点的不同组合进行分类，产生分割图。最后使用beamsearch,动态规划等方法找到图中的最佳分割路径。在Tesseract中也使用了这种方法来分割字符。</p><p><img src="https://i.loli.net/2019/11/20/einQTBY8Rlhtq4O.png" alt="0.png"></p><p><img src="https://i.loli.net/2019/11/20/I4qjNVKZyuRk1EP.png" alt="1.png"></p><h3 id="HyperLPR中的字符分割方法"><a href="#HyperLPR中的字符分割方法" class="headerlink" title="HyperLPR中的字符分割方法"></a>HyperLPR中的字符分割方法</h3><p>HyperLPR中使用的字符分割方法很简单.同样也是基于滑动窗口的分割方法。首先我们训练一个分类器输出三种概率分别为正样本、负样本、中文字符。</p><p><img src="https://i.loli.net/2019/11/20/yTpx1jWwGIeUn5f.png" alt="Figure_1.png"></p><p>接着我们对车牌做滑动输出每个位置的三种字符概率（这个滑动的窗口的stride可以设高一点使得速度更快）接着我们对这三种利用车牌的模板进行匹配。使得第一个字符的中文概率+后6个字符的正样本概率最大。这个最大的位置即为最佳分割位置。<br><img src="https://i.loli.net/2019/11/20/2mNPc6ziHbtdDlS.png" alt="6.png"></p><h3 id="字符分割模型的训练"><a href="#字符分割模型的训练" class="headerlink" title="字符分割模型的训练"></a>字符分割模型的训练</h3><p>训练只需提供三种样本</p><p>在config.txt定义三种样本的目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">../character_judgement_samples/T <span class="comment">#正样本 正样本指样本图片的中心有文字</span></span><br><span class="line">../character_judgement_samples/F <span class="comment">#负样本 负样本指样本图片的中心无文字,左右两侧有也没有关系</span></span><br><span class="line">../character_judgement_samples/CH <span class="comment">#中文样本 正样本指样本图片的中心有中文文字</span></span><br></pre></td></tr></table></figure><h4 id="下面提供了三种样本的图例"><a href="#下面提供了三种样本的图例" class="headerlink" title="下面提供了三种样本的图例"></a>下面提供了三种样本的图例</h4><h5 id="负样本"><a href="#负样本" class="headerlink" title="负样本"></a>负样本</h5><p><img src="https://i.loli.net/2019/11/20/l3TXjUKISqsVied.png" alt="5.png"></p><h5 id="中文样本"><a href="#中文样本" class="headerlink" title="中文样本"></a>中文样本</h5><p><img src="https://i.loli.net/2019/11/20/zAb2ZRVJImPNxFr.png" alt="3.png"></p><h5 id="正样本"><a href="#正样本" class="headerlink" title="正样本"></a>正样本</h5><p><img src="https://i.loli.net/2019/11/20/srFXWam8PY5hKtI.png" alt="4.png"></p><h4 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python training_segmentation.py</span><br></pre></td></tr></table></figure><h3 id="转载自"><a href="#转载自" class="headerlink" title="转载自"></a>转载自</h3><p>原文地址：<a href="https://github.com/zeusees/HyperLPR-Training" target="_blank" rel="noopener">https://github.com/zeusees/HyperLPR-Training</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HyperLPR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ZigBee】数据传输实验及协议栈的启动过程具体实现</title>
      <link href="/2019/11/19/zigbeedatasend/"/>
      <url>/2019/11/19/zigbeedatasend/</url>
      
        <content type="html"><![CDATA[<h2 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h2><p>感性认识数据传输实验，观察老师提供的代码的实验现象，在此基础上，在实验报告中阐述清楚协议栈的启动过程及数据收发的具体实现。</p><a id="more"></a><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>Win10 1909</li><li>IAR 10.30</li><li>Z-Stack</li><li>VScode</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>一开始我打算使用最新版本的3.0.2协议栈中的SampleLight工程，这里面有协调器按键控制终端节点的LED灯的亮灭，按下Lighting设备的按键，则能对本地的Led进行亮灭控制。</p><p>但是，我看了很久后，发现了一些东西导致我暂时放弃了魔改3.0.2这个版本的想法。</p><p>Zigbee3.0 较先前的版本对设备的行为做了更多的规范，增加了很多功能。代码中通过使用一个3级目录菜单UI来实现对各个功能的。</p><table><thead><tr><th align="center">菜单</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">A级菜单</td><td align="center">功能菜单</td></tr><tr><td align="center">B级菜单</td><td align="center">commissioning、网络等参数配置菜单</td></tr><tr><td align="center">C级菜单</td><td align="center">installCode配置菜单</td></tr></tbody></table><p>这需要5个按键完成操作：</p><table><thead><tr><th align="center">按键</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">左/右按键</td><td align="center">菜单切换方向键</td></tr><tr><td align="center">上/下按键</td><td align="center">编辑按键</td></tr><tr><td align="center">中间按键</td><td align="center">确认键，即【OK】</td></tr></tbody></table><p>虽然这很方便，但是一个比较现实的问题是我目前手里的开发板没有LCD屏以及较多的按键。</p><p><img src="https://i.loli.net/2019/11/18/spm5C2iyPGLeNrR.png" alt="20191118234915.png"></p><p>如果有上图这样的设备就可以完美进行这个实验了。</p><p>但是限于实验设备，所以如果要使用3.0.2的协议栈的这个工程的话，需要进行一些魔改。</p><p>后面如果有时间再魔改这个吧。下面就使用老师给的旧版本的进行本次实验。</p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>首先打开老师给的代码的工程文件，由于IAR版本较新，一开始会弹出很多不兼容的提示，没有关系，一直点OK下去就行。</p><p>然后尝试编译一下，显然是不行的。提示链接出错。</p><p><img src="https://i.loli.net/2019/11/18/owEqDRIf9lBxnyt.png" alt="op.png"></p><p>如上图，点击option，重新配置一下。</p><p><img src="https://i.loli.net/2019/11/18/ya3CGR5B9Hi7DWb.png" alt="linker.png"></p><p>需要配置设备和linker里的内容。配置过程和你第一次新建一个工程是一样的，这里不再赘述。</p><p>配置好后，再编译，就没有错误了。</p><p>接下来的操作就按照老师的注释进行操作即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一步： 找到下面内容，把appLight();  注释掉，下载到发射模块。</span><br><span class="line">          appSwitch();        //节点为按键S1       P1_2</span><br><span class="line">       // appLight();        //节点为指示灯LED1    P1_0</span><br><span class="line"></span><br><span class="line">第二步：找到相同位置，这次把appSwitch();注释掉，下载到接收模块。 </span><br><span class="line">       //appSwitch();        //节点为按键S1       P0_4</span><br><span class="line">        appLight();         //节点为指示灯LED1   P1_0</span><br></pre></td></tr></table></figure><h2 id="加入串口"><a href="#加入串口" class="headerlink" title="加入串口"></a>加入串口</h2><p>稍微不同的是，我加了之前串口的代码。这样连接电脑的串口助手，讲道理是可以查看收到的数据。<br>首先是之前我们写过的串口实验代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initUART0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLKCONCMD &amp;= ~<span class="number">0x40</span>;<span class="comment">//设置系统时钟源32MHz晶振</span></span><br><span class="line">    <span class="keyword">while</span>(CLKCONSTA&amp;<span class="number">0x40</span>);<span class="comment">//等待晶振稳定</span></span><br><span class="line">    CLKCONCMD&amp;=~<span class="number">0x47</span>;<span class="comment">//设置系统主时钟频率32MHz</span></span><br><span class="line"></span><br><span class="line">    PERCFG= <span class="number">0x00</span>;<span class="comment">//位置1P0口</span></span><br><span class="line">    P0SEL=<span class="number">0x3C</span>;<span class="comment">//P0口是串口</span></span><br><span class="line">    P2DIR&amp;=~<span class="number">0xC0</span>;<span class="comment">//P0优先作为UART0</span></span><br><span class="line">    U0CSR|=<span class="number">0x80</span>;<span class="comment">//串口设置为UART方式</span></span><br><span class="line">    U0GCR|=<span class="number">9</span>;</span><br><span class="line">    U0BAUD|=<span class="number">59</span>;<span class="comment">//波特率19200</span></span><br><span class="line">    UTX0IF=<span class="number">1</span>;<span class="comment">//UART0 TX中断标志初始为1</span></span><br><span class="line">    U0CSR|=<span class="number">0x40</span>;<span class="comment">//允许接受</span></span><br><span class="line">    IEN0|=<span class="number">0x84</span>;<span class="comment">//开总中断，接受中断</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Send_String</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *Data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        U0DBUF=*Data++;</span><br><span class="line">        <span class="keyword">while</span> (UTX0IF==<span class="number">0</span>);</span><br><span class="line">        UTX0IF=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在appLight函数里添加：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(basicRfReceive(pRxData, APP_PAYLOAD_LENGTH, <span class="literal">NULL</span>)&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(pRxData[<span class="number">0</span>] == LIGHT_TOGGLE_CMD) </span><br><span class="line">    &#123;</span><br><span class="line">      Send_String(<span class="string">"Change LED"</span>,<span class="number">10</span>);</span><br><span class="line">      <span class="comment">//Send_String(pRxData,1);</span></span><br><span class="line">      halLedToggle(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，接下来分别烧录，连接串口助手，按下Switch的开发板按键，串口线接appLight开发板：</p><p><img src="https://i.loli.net/2019/11/19/hwfHO4JejB7VIEl.png" alt="20191118233040.png"></p><blockquote><p>注意：这里想打印出pRxData里的内容的话，需要转换一下类型才可以。</p></blockquote><p>实验现象视频：</p><p><a href="https://v.qq.com/x/page/h3022vb9xqr.html" target="_blank" rel="noopener">点击这里去看实验现象视频</a></p><h2 id="zigbee协议栈"><a href="#zigbee协议栈" class="headerlink" title="zigbee协议栈"></a>zigbee协议栈</h2><h3 id="Zigbee协议栈简介"><a href="#Zigbee协议栈简介" class="headerlink" title="Zigbee协议栈简介"></a>Zigbee协议栈简介</h3><p>协议是一系列的通信标准，通信双方需要按照这一标准进行正常的数据发射和接收。协议栈是协议的具体实现形式，协议栈就是协议和用户之间的一个接口，开发人员通过使用协议栈来使用这个协议，实现无线数据收发。<br>Zigbee协议分为两部分，IEEE 802.15.4定义了PHY（物理层）和MAC（介质访问层）技术规范；Zigbee联盟定义了NWK（网络层）、APS（应用程序支持层）、APL（应用层）技术规范。<br>Zigbee协议栈就是将各个层定义的协议都集合在一起，以函数的形式实现，并给用户提供API（应用层），用户可以直接调用。</p><h3 id="Zigbee协议栈启动过程"><a href="#Zigbee协议栈启动过程" class="headerlink" title="Zigbee协议栈启动过程"></a>Zigbee协议栈启动过程</h3><p>下面我以3.0.2的协议栈为示例，描述协议栈启动过程：</p><p>协议栈由ZMain里的ZMain.c中的main函数开始执行。main函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// Turn off interrupts</span></span><br><span class="line">  osal_int_disable( INTS_ALL );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialization for board related stuff such as LEDs</span></span><br><span class="line">  HAL_BOARD_INIT();</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Make sure supply voltage is high enough to run</span></span><br><span class="line">  zmain_vdd_check();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize board I/O</span></span><br><span class="line">  InitBoard( OB_COLD );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialze HAL drivers</span></span><br><span class="line">  HalDriverInit();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize NV System</span></span><br><span class="line">  osal_nv_init( <span class="literal">NULL</span> );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the MAC</span></span><br><span class="line">  ZMacInit();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Determine the extended address</span></span><br><span class="line">  zmain_ext_addr();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined ZCL_KEY_ESTABLISH</span></span><br><span class="line">  <span class="comment">// Initialize the Certicom certificate information.</span></span><br><span class="line">  zmain_cert_init();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize basic NV items</span></span><br><span class="line">  zgInit();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NONWK</span></span><br><span class="line">  <span class="comment">// Since the AF isn't a task, call it's initialization routine</span></span><br><span class="line">  afInit();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the operating system</span></span><br><span class="line">  osal_init_system();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allow interrupts</span></span><br><span class="line">  osal_int_enable( INTS_ALL );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Final board initialization</span></span><br><span class="line">  InitBoard( OB_READY );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Display information about this device</span></span><br><span class="line">  zmain_dev_info();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Display the device info on the LCD */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LCD_SUPPORTED</span></span><br><span class="line">  zmain_lcd_init();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WDT_IN_PM1</span></span><br><span class="line">  <span class="comment">/* If WDT is used, this is a good place to enable it. */</span></span><br><span class="line">  WatchDogEnable( WDTIMX );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  osal_start_system(); <span class="comment">// No Return from here</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// Shouldn't get here.</span></span><br><span class="line">&#125; <span class="comment">// main()</span></span><br></pre></td></tr></table></figure><p>main函数共做了两件事：</p><ul><li>1.系统初始化</li><li>执行 osal_start_system()，进行轮询式操作系统。</li></ul><p>在osal_start_system函数之前的那些函数都是对板载硬件以及协议栈进行的初始化。调用“osal_start_system();”函数之后，整个协议栈系统就算是真正运行起来了。这个函数是TI封装的OSAL操作系统抽象层。OSAL(Operating System Abstraction Layer)，译为“操作系统抽象层”，OSAL就是以实现多任务为核心的系统资源管理机制。但OSAL与标准的操作系统还是有很大的区别。这个并不是并不是真正意义上的操作系统。</p><p>对OSAL有兴趣的同学可以<a href="http://processors.wiki.ti.com/images/a/a9/06_-_OSAL_and_HAL.pdf" target="_blank" rel="noopener">点击这里访问TI的OSAL介绍</a>。</p><p>首先，协议栈对任务进行初始化，在上面代码中的osal_init_system()函数里，有osalInitTasks()函数，再进入这个函数，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * @fn      osalInitTasks</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @brief   This function invokes the initialization function for each task.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   void</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return  none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">osalInitTasks</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint8 taskID = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  tasksEvents = (uint16 *)osal_mem_alloc( <span class="keyword">sizeof</span>( uint16 ) * tasksCnt);</span><br><span class="line">  osal_memset( tasksEvents, <span class="number">0</span>, (<span class="keyword">sizeof</span>( uint16 ) * tasksCnt));</span><br><span class="line"></span><br><span class="line">  macTaskInit( taskID++ );</span><br><span class="line">  nwk_init( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined (DISABLE_GREENPOWER_BASIC_PROXY) &amp;&amp; (ZG_BUILD_RTR_TYPE)</span></span><br><span class="line">  gp_Init( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  Hal_Init( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined( MT_TASK )</span></span><br><span class="line">  MT_TaskInit( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  APS_Init( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined ( ZIGBEE_FRAGMENTATION )</span></span><br><span class="line">  APSF_Init( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  ZDApp_Init( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )</span></span><br><span class="line">  ZDNwkMgr_Init( taskID++ );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="comment">// Added to include TouchLink functionality </span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> defined ( INTER_PAN )</span></span><br><span class="line">    StubAPS_Init( taskID++ );</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="comment">// Added to include TouchLink initiator functionality </span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> defined( BDB_TL_INITIATOR )</span></span><br><span class="line">    touchLinkInitiator_Init( taskID++ );</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="comment">// Added to include TouchLink target functionality </span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> defined ( BDB_TL_TARGET )</span></span><br><span class="line">    touchLinkTarget_Init( taskID++ );</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  zcl_Init( taskID++ );</span><br><span class="line">  bdb_Init( taskID++ );</span><br><span class="line">  zclSampleLight_Init( taskID );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看英文注释：“ This function invokes the initialization function for each task.”</p><p>意思就是说，在任务初始化为每一层分配一个任务ID号，这个ID和事件处理函数是对应的，成映射。<br>每增加一个任务ID++，ID越小表示该任务优先级越高。</p><p>回到osal_start_system函数中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * @fn      osal_start_system</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @brief</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This function is the main loop function of the task system (if</span></span><br><span class="line"><span class="comment"> *   ZBIT and UBIT are not defined). This Function doesn't return.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   void</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return  none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">osal_start_system</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_ICALL</span></span><br><span class="line">  <span class="comment">/* Kick off timer service in order to allocate resources upfront.</span></span><br><span class="line"><span class="comment">   * The first timeout is required to schedule next OSAL timer event</span></span><br><span class="line"><span class="comment">   * as well. */</span></span><br><span class="line">  ICall_Errno errno = ICall_setTimer(<span class="number">1</span>, osal_msec_timer_cback,</span><br><span class="line">                                     (<span class="keyword">void</span> *) osal_msec_timer_seq,</span><br><span class="line">                                     &amp;osal_timerid_msec_timer);</span><br><span class="line">  <span class="keyword">if</span> (errno != ICALL_ERRNO_SUCCESS)</span><br><span class="line">  &#123;</span><br><span class="line">    ICall_abort();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* USE_ICALL */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined ( ZBIT ) &amp;&amp; !defined ( UBIT )</span></span><br><span class="line">  <span class="keyword">for</span>(;;)  <span class="comment">// Forever Loop</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#123;</span><br><span class="line">    osal_run_system();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_ICALL</span></span><br><span class="line">    ICall_wait(ICALL_TIMEOUT_FOREVER);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* USE_ICALL */</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在检查没有错误后，会进入一个Forever Loop，不断调用osal_run_system()函数。</p><p>下面是osal_run_system()函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment"> * @fn      osal_run_system</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @brief</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This function will make one pass through the OSAL taskEvents table</span></span><br><span class="line"><span class="comment"> *   and call the task_event_processor() function for the first task that</span></span><br><span class="line"><span class="comment"> *   is found with at least one event pending. If there are no pending</span></span><br><span class="line"><span class="comment"> *   events (all tasks), this function puts the processor into Sleep.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param   void</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return  none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">osal_run_system</span><span class="params">( <span class="keyword">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uint8 idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_ICALL</span></span><br><span class="line">  uint32 next_timeout_prior = osal_next_timeout();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* USE_ICALL */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HAL_BOARD_CC2538</span></span><br><span class="line">  osalTimeUpdate();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  Hal_ProcessPoll();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* USE_ICALL */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> USE_ICALL</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* Update osal timers to the latest before running any OSAL processes</span></span><br><span class="line"><span class="comment">     * regardless of wakeup callback from ICall because OSAL timers are added</span></span><br><span class="line"><span class="comment">     * relative to the current time. */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> newtimestamp = ICall_getTicks();</span><br><span class="line">    uint32 milliseconds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (osal_tickperiod == <span class="number">1000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      milliseconds = newtimestamp - osal_last_timestamp;</span><br><span class="line">      osal_last_timestamp = newtimestamp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> delta = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)</span><br><span class="line">        ((newtimestamp - osal_last_timestamp) &amp; <span class="number">0xffffffff</span>ul);</span><br><span class="line">      delta *= osal_tickperiod;</span><br><span class="line">      delta /= <span class="number">1000</span>;</span><br><span class="line">      milliseconds = (uint32) delta;</span><br><span class="line">      osal_last_timestamp += (uint32) (delta * <span class="number">1000</span> / osal_tickperiod);</span><br><span class="line">    &#125;</span><br><span class="line">    osalAdjustTimer(milliseconds);</span><br><span class="line">    <span class="comment">/* Set a value that will never match osal_next_timeout()</span></span><br><span class="line"><span class="comment">     * return value so that the next time can be scheduled.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    next_timeout_prior = <span class="number">0xffffffff</span>ul;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (osal_eventloop_hook)</span><br><span class="line">  &#123;</span><br><span class="line">    osal_eventloop_hook();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">void</span> *msg;</span><br><span class="line">    ICall_EntityID src, dst;</span><br><span class="line">    <span class="keyword">osal_msg_hdr_t</span> *hdr;</span><br><span class="line">    uint8 dest_id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ICall_fetchMsg(&amp;src, &amp;dst, &amp;msg) != ICALL_ERRNO_SUCCESS)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hdr = (<span class="keyword">osal_msg_hdr_t</span> *) msg - <span class="number">1</span>;</span><br><span class="line">    dest_id = osal_dispatch2id(dst);</span><br><span class="line">    <span class="keyword">if</span> (dest_id == TASK_NO_TASK)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Something wrong */</span></span><br><span class="line">      ICall_abort();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Message towards one of the tasks */</span></span><br><span class="line">      <span class="comment">/* Create a proxy task ID if necessary and</span></span><br><span class="line"><span class="comment">       * queue the message to the OSAL internal queue.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      uint8 proxyid = osal_alien2proxy(hdr-&gt;srcentity);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (hdr-&gt;format == ICALL_MSG_FORMAT_1ST_CHAR_TASK_ID)</span><br><span class="line">      &#123;</span><br><span class="line">        uint8 *bytes = msg;</span><br><span class="line">        *bytes = proxyid;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (hdr-&gt;format == ICALL_MSG_FORMAT_3RD_CHAR_TASK_ID)</span><br><span class="line">      &#123;</span><br><span class="line">        uint8 *bytes = msg;</span><br><span class="line">        bytes[<span class="number">2</span>] = proxyid;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* now queue the message to the OSAL queue */</span></span><br><span class="line">      osal_msg_send(dest_id, msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* USE_ICALL */</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (tasksEvents[idx])  <span class="comment">// Task is highest priority that is ready.</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (++idx &lt; tasksCnt);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (idx &lt; tasksCnt)</span><br><span class="line">  &#123;</span><br><span class="line">    uint16 events;</span><br><span class="line">    halIntState_t intState;</span><br><span class="line"></span><br><span class="line">    HAL_ENTER_CRITICAL_SECTION(intState);</span><br><span class="line">    events = tasksEvents[idx];</span><br><span class="line">    tasksEvents[idx] = <span class="number">0</span>;  <span class="comment">// Clear the Events for this task.</span></span><br><span class="line">    HAL_EXIT_CRITICAL_SECTION(intState);</span><br><span class="line"></span><br><span class="line">    activeTaskID = idx;</span><br><span class="line">    events = (tasksArr[idx])( idx, events );</span><br><span class="line">    activeTaskID = TASK_NO_TASK;</span><br><span class="line"></span><br><span class="line">    HAL_ENTER_CRITICAL_SECTION(intState);</span><br><span class="line">    tasksEvents[idx] |= events;  <span class="comment">// Add back unprocessed events to the current task.</span></span><br><span class="line">    HAL_EXIT_CRITICAL_SECTION(intState);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined( POWER_SAVING ) &amp;&amp; !defined(USE_ICALL)</span></span><br><span class="line">  <span class="keyword">else</span>  <span class="comment">// Complete pass through all task events with no activity?</span></span><br><span class="line">  &#123;</span><br><span class="line">    osal_pwrmgr_powerconserve();  <span class="comment">// Put the processor/system into sleep</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Yield in case cooperative scheduling is being used. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (configUSE_PREEMPTION) &amp;&amp; (configUSE_PREEMPTION == 0)</span></span><br><span class="line">  &#123;</span><br><span class="line">    osal_task_yield();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined USE_ICALL</span></span><br><span class="line">  <span class="comment">/* Note that scheduling wakeup at this point instead of</span></span><br><span class="line"><span class="comment">   * scheduling it upon ever OSAL start timer request,</span></span><br><span class="line"><span class="comment">   * would only work if OSAL start timer call is made</span></span><br><span class="line"><span class="comment">   * from OSAL tasks, but not from either ISR or</span></span><br><span class="line"><span class="comment">   * non-OSAL application thread.</span></span><br><span class="line"><span class="comment">   * In case, OSAL start timer is called from non-OSAL</span></span><br><span class="line"><span class="comment">   * task, the scheduling should be part of OSAL_Timers</span></span><br><span class="line"><span class="comment">   * module.</span></span><br><span class="line"><span class="comment">   * Such a change to OSAL_Timers module was not made</span></span><br><span class="line"><span class="comment">   * in order not to diverge the OSAL implementations</span></span><br><span class="line"><span class="comment">   * too drastically between pure OSAL solution vs.</span></span><br><span class="line"><span class="comment">   * OSAL upon service dispatcher (RTOS).</span></span><br><span class="line"><span class="comment">   * <span class="doctag">TODO:</span> reconsider the above statement.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  &#123;</span><br><span class="line">    halIntState_t intState;</span><br><span class="line"></span><br><span class="line">    uint32 next_timeout_post = osal_next_timeout();</span><br><span class="line">    <span class="keyword">if</span> (next_timeout_post != next_timeout_prior)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Next wakeup time has to be scheduled */</span></span><br><span class="line">      <span class="keyword">if</span> (next_timeout_post == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">/* No timer. Set time to the max */</span></span><br><span class="line">        next_timeout_post = OSAL_TIMERS_MAX_TIMEOUT;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (next_timeout_post &gt; osal_max_msecs)</span><br><span class="line">      &#123;</span><br><span class="line">        next_timeout_post = osal_max_msecs;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* Restart timer */</span></span><br><span class="line">      HAL_ENTER_CRITICAL_SECTION(intState);</span><br><span class="line">      ICall_stopTimer(osal_timerid_msec_timer);</span><br><span class="line">      ICall_setTimerMSecs(next_timeout_post, osal_msec_timer_cback,</span><br><span class="line">                          (<span class="keyword">void</span> *) (++osal_msec_timer_seq),</span><br><span class="line">                          &amp;osal_timerid_msec_timer);</span><br><span class="line">      HAL_EXIT_CRITICAL_SECTION(intState);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* USE_ICALL */</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数前面的注释大致内容是：这个函数的功能是查询事件表，如果有事件发生，就查找函数表，找到相应的事件处理函数进行处理；<br>如果没有事件发生，系统将进入休眠模式，降低功耗，要进入休眠模式，还需要打开相应的宏开关进而开启低功耗功能。</p><p>触发事件主要有三种情况：</p><ul><li>外部中断</li><li>定时器</li><li>对设备轮询</li></ul><p>前两个不需要干涉，如下图：</p><p><img src="https://i.loli.net/2019/11/19/GoxCvBaXF7neDwO.png" alt="20191119184551.png"></p><p>所以在循环中调用  Hal_ProcessPoll()对串口进行轮询。如果这些设备需要处理，就去tasksEvents[]里找对应的事件处理函数的指针来调用。</p><h3 id="事件和任务的事件处理函数式如何联系起来"><a href="#事件和任务的事件处理函数式如何联系起来" class="headerlink" title="事件和任务的事件处理函数式如何联系起来"></a>事件和任务的事件处理函数式如何联系起来</h3><p>其实这里设计得很巧妙。</p><p>建立一个事件表，保存各个任务对应的事件，建立一个函数表，保存各个任务事件处理函数的地址，建立一个映射关系，有某个事件发生就去调用事件处理函数去处理，</p><p>这个的关键在于tasksArr[] 数组中每个元素的类型是函数指针。执行完事件处理函数之后，再将未处理的事件返回，事件处理函数的返回值保存了未处理的事件，将未处理的事件再次存放到事件表中，下次进行处理。</p><p>执行OSAL的函数就是个大循环，不断取出当前优先级最高的待处理事件进行处理，处理的核心思想在osal_run_task函数内：通过调用一个函数指针来远程调用一个事件处理函数。</p><h2 id="数据收发的具体实现"><a href="#数据收发的具体实现" class="headerlink" title="数据收发的具体实现"></a>数据收发的具体实现</h2><p>当子设备(终端节点或路由器)加入协调器的网络后，它们之间便可以相互通信了。Zigbee设备通信的实质是Zigbee设备端口与另一个Zigbee设备端口之间的通信。只要知道目标设备的网络地址和端口号就可以调用数据发送函数AF_DataRequest() 发送数据给目标设备的端口，再由该端口绑定的任务来处理该数据。</p><p>一般步骤为：</p><ul><li><p>组网：调用协议栈组网函数、加入网络函数，实现网络的建立和节点的加入</p></li><li><p>发送：发送节点调用协议栈的发送函数，实现数据无线发送</p></li><li><p>接收：接收节点调用协议栈的无线接收函数，实现无线数据接收</p></li></ul><h3 id="组网"><a href="#组网" class="headerlink" title="组网"></a>组网</h3><p>这里主要是对网络参数进行设置。</p><ul><li>协议栈规范设置<br>对于协议栈规范，在同一个网络中必须符合同一个协议栈规范。ZigBee协议栈2007定义了两个规范：ZigBee和ZigBee PRO。在默认情况下，Z-Stack的STACK_PROFILE_ID为ZIGBEEPRO_PROFILE,因为ZigBee PRO有较好的通信性能和稳定性，所以默认为此。</li><li>拓扑结构<br>Nwk_globals.h中三个宏定义对应ZigBee网络的三种网络拓扑，选择默认即可。</li><li>逻辑设备类型<br>在Zigbee无线传感器网络中有三种设备类型：协调器、路由器和终端节点。在星状网络拓扑结构中，没有路由器这种逻辑设备类型。</li><li>PANID和信道的选择<br>PANID:16位的网络ID用来标识唯一一个ZigBee网络，主要用于区分同一地区同一信道的网络，使得同一地区可以存在多个ZigBee网络。信道选择在Tools目录下的f8wConfig.cfg中。</li></ul><p><img src="https://i.loli.net/2019/11/19/24siNE9BDgcOW8o.png" alt="xindao.png"></p><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><p>在TI官网有给出API文档，关于数据发送有AF_DataRequest()函数，只需要调用这个函数就可以完成数据的发送。<br>每个参数代表什么意思在文档里描述得很详细。参照文档调用即可。</p><p><img src="https://i.loli.net/2019/11/19/azKn9bUu1wkODeG.png" alt="datasend.png"></p><p><img src="https://i.loli.net/2019/11/19/BA3ednkzJmrSEwf.png" alt="datasend2.png"></p><p>在代码的位置如下图：</p><p><img src="https://i.loli.net/2019/11/19/u4DwvFZfnNpBm1L.png" alt="20191119185906.png"></p><p>但是在无线点灯的具体实现中，数据的发送是创建一个buffer，把payload放进去，调用basicRfSendPacket()发送，并查看其返回值。</p><p><img src="https://i.loli.net/2019/11/19/XaIrGPn8YKoBsu1.png" alt="send.png"></p><p>作用是向目的地址发送指定长度的数据，成功时返回SUCCESS，失败时返回FAILED</p><h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><p>接收这边复杂一点。在示例中，上层通过basicRfPacketIsReady()检测是否收到一个新数据包，如果准备好新数据包时返回TRUE<br>调用basicRfReceive()把收到的数据复制到缓冲区中。</p><p><img src="https://i.loli.net/2019/11/19/JdjVvImXnxHp1KW.png" alt="basicRfPacketIsReady.png"></p><p>uint8 basicRfReceive(uint8* pRxData, uint8 len, int16* pRssi)：<br>函数的作用是接收来自Basic RF层的数据包，并为数据和RSSI分配缓冲区。<br>具体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************************</span></span><br><span class="line"><span class="comment">* @fn          basicRfReceive</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @brief       Copies the payload of the last incoming packet into a buffer</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @param       pRxData - pointer to data buffer to fill. This buffer must be</span></span><br><span class="line"><span class="comment">*                        allocated by higher layer.</span></span><br><span class="line"><span class="comment">*              len - Number of bytes to read in to buffer</span></span><br><span class="line"><span class="comment">*              rxi - file scope variable holding the information of the last</span></span><br><span class="line"><span class="comment">*                    incoming packet</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @return      uint8 - number of bytes actually copied into buffer</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">uint8 <span class="title">basicRfReceive</span><span class="params">(uint8* pRxData, uint8 len, int16* pRssi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Accessing shared variables -&gt; this is a critical region</span></span><br><span class="line">    <span class="comment">// Critical region start</span></span><br><span class="line">    halIntOff();</span><br><span class="line">    <span class="built_in">memcpy</span>(pRxData, rxi.pPayload, min(rxi.length, len));</span><br><span class="line">    <span class="keyword">if</span>(pRssi != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(rxi.rssi &lt; <span class="number">128</span>)&#123;</span><br><span class="line">            *pRssi = rxi.rssi - halRfGetRssiOffset();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            *pRssi = (rxi.rssi - <span class="number">256</span>) - halRfGetRssiOffset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rxi.isReady = FALSE;</span><br><span class="line">    halIntOn();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Critical region end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> min(rxi.length, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总体来看：<br>basic_rf.c中打开了RF接收中断，所以接收端可以接收到射频信号后接收数据</p><p>halRfRxInterruptConfig(basicRfRxFrmDoneIsr);</p><p>basicRfRxFrmDoneIsr是接收到RF数据时的中断服务程序</p><p>halRfInit中有使能RF接收中断： halRfEnableRxInterrupt();</p><p>在main中调用了halRfInit()： if(halRfInit()==FAILED) { HAL_ASSERT(FALSE); }</p><p>如果对开发板进行抓板应该是可以抓到数据的，下次有时间再更新这部分内容。</p><blockquote><p>好了，今天就到这里，后面有时间再更新本博客内容吧。有缘再见。</p></blockquote><h2 id="需要联系我？"><a href="#需要联系我？" class="headerlink" title="需要联系我？"></a>需要联系我？</h2><p>如果有疑问或者建议，可以发邮件至<a href="mailto:stefancharles@qq.com" target="_blank" rel="noopener">stefancharles@qq.com</a>与我交流讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zigbee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keras卷积神经网络对MNIST数据集进行操作</title>
      <link href="/2019/11/18/mnistinkeras/"/>
      <url>/2019/11/18/mnistinkeras/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在上一章中介绍了<a href="https://stefancharles.xyz/2019/11/17/mnistinpython/">【TensorFlow】利用MNIST数字识别数据集识别</a>,本篇将介绍keras卷积神经网络对MNIST数据集进行操作。</p><a id="more"></a><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>Pycharm 2019.3 BETA</li><li>Win10 1909</li><li>Python 3.7.0</li><li>Chrome Dev 80.3964.0</li></ul><h2 id="使用Colab编辑和运行Python代码"><a href="#使用Colab编辑和运行Python代码" class="headerlink" title="使用Colab编辑和运行Python代码"></a>使用Colab编辑和运行Python代码</h2><p>按照谷歌官方的介绍：</p><blockquote><p>Colaboratory 是一个免费的 Jupyter 笔记本环境，不需要进行任何设置就可以使用，并且完全在云端运行。借助 Colaboratory，您可以编写和执行代码、保存和共享分析结果，以及利用强大的计算资源，所有这些都可通过浏览器免费使用。</p></blockquote><p>也就是说可以在线运行python代码，不需要进行麻烦的配置。</p><p> <a href="https://colab.research.google.com/" target="_blank" rel="noopener">点击这里去CoLab</a></p><p>今天我发现官方介绍的<strong>强大的计算资源</strong>真不是盖的。看来昨天是我冤枉它了。</p><p>经过几步简单的设置，就可以使用GPU和TPU进行加速。</p><p><img src="https://i.loli.net/2019/11/18/mZOUWougXPkzqcN.png" alt="Snipaste_2019-11-18_11-27-42.png"></p><p>我在我自己电脑上跑一个周期需要20秒，在Colab上使用GPU一个周期仅仅需要2秒。</p><p>当我用我自己电脑跑时，电脑CPU已经100%负载，此时我做不了其他事情，只能等程序跑完。<br>而在colab上，代码是在google云上跑，自己的电脑只是显示结果，CPU与平时一样，还能做其他工作。</p><h2 id="读取MNIST数据"><a href="#读取MNIST数据" class="headerlink" title="读取MNIST数据"></a>读取MNIST数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(x_Train, y_Train), (x_Test, y_Test) = mnist.load_data()</span><br><span class="line"><span class="comment"># 将features（数字图像特征值）转换成6000 28 28 * 1的4纬矩阵</span></span><br><span class="line">x_Train4D = x_Train.reshape(x_Train.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>).astype(<span class="string">'float32'</span>)</span><br><span class="line">x_Test4D = x_Test.reshape(x_Test.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>).astype(<span class="string">'float32'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准化特征值，提高模型精准度</span></span><br><span class="line">x_Train4D_normalize = x_Train4D / <span class="number">255</span></span><br><span class="line">x_Test4D_normalize = x_Test4D / <span class="number">255</span></span><br><span class="line"><span class="comment"># label数字真实值转换，使用One-Hot Encoding进行转换</span></span><br><span class="line">y_TrainOneHot = np_utils.to_categorical(y_Train)</span><br><span class="line">y_TestOneHot = np_utils.to_categorical(y_Test)</span><br></pre></td></tr></table></figure><p>这一步在自己电脑上跑时，下载数据集需要翻墙，不翻墙的情况下，下到一会就下载失败。<br>不过在google的colab上跑时，这一步简直飞快。基本上看不到进度条。当你下载过一次后，后面的运行就不会再次下载了。</p><h2 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h2><p>建立Sequential模型。序贯模型是函数式模型的简略版，为最简单的线性、从头到尾的结构顺序，不分叉。<br>Sequential模型的基本组件一般需要：</p><ul><li>1、model.add，添加层；</li><li>2、model.compile,模型训练的BP模式设置；</li><li>3、model.fit，模型训练参数设置 + 训练；</li><li>4、模型评估</li><li>5、模型预测<h3 id="建立卷积层1"><a href="#建立卷积层1" class="headerlink" title="建立卷积层1"></a>建立卷积层1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line">model.add(Conv2D(filters=<span class="number">16</span>,</span><br><span class="line">                 kernel_size=(<span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">                 padding=<span class="string">'same'</span>,</span><br><span class="line">                 input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>),</span><br><span class="line">                 activation=<span class="string">'relu'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立16分5*5的滤镜</span></span><br><span class="line"><span class="comment"># 输入图像大小为28*28，第一次卷积计算会产生16个图像，卷积层不会改变图像大小，还是28*28</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="建立池化层1"><a href="#建立池化层1" class="headerlink" title="建立池化层1"></a>建立池化层1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line"><span class="comment"># 池化层会将图像缩减采样，利用参数pool_size(2,2)将16分28*28的图像缩小为16个14*14的图像</span></span><br></pre></td></tr></table></figure><h3 id="建立卷积层2"><a href="#建立卷积层2" class="headerlink" title="建立卷积层2"></a>建立卷积层2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model.add(Conv2D(filters=<span class="number">36</span>,</span><br><span class="line">                 kernel_size=(<span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">                 padding=<span class="string">'same'</span>,</span><br><span class="line">                 activation=<span class="string">'relu'</span>))</span><br></pre></td></tr></table></figure><h3 id="建立池化层2"><a href="#建立池化层2" class="headerlink" title="建立池化层2"></a>建立池化层2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model.add(MaxPooling2D(pool_size=(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">model.add(Dropout(<span class="number">0.25</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次采样将14*14的图像缩小为36份7*7的图像</span></span><br><span class="line"><span class="comment"># Dropout(0.25)在每次迭代时会随机在神经网络中放弃25%的神经元，避免过度拟合</span></span><br></pre></td></tr></table></figure><h3 id="建立平坦层"><a href="#建立平坦层" class="headerlink" title="建立平坦层"></a>建立平坦层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">model.add(Flatten())</span><br><span class="line"><span class="comment"># 将之前建立的池化层2中36个7*7的图像转为一纬的向量，长度为36*7*7=1764个Float数，对应1764个神经元</span></span><br><span class="line"><span class="comment"># 建立隐藏层并且把Dropout层加入模型中</span></span><br><span class="line">model.add(Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line"><span class="comment"># 共有128个神经元，每次训练迭代会随机放弃50%的神经元</span></span><br></pre></td></tr></table></figure><h3 id="建立输出层"><a href="#建立输出层" class="headerlink" title="建立输出层"></a>建立输出层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model.add(Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用softmax激活函数</span></span><br></pre></td></tr></table></figure><h3 id="查看模型摘要"><a href="#查看模型摘要" class="headerlink" title="查看模型摘要"></a>查看模型摘要</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(model.summary())</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/18/PpmdzEVKMgeGic4.png" alt="11_18.png"></p><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用compile方法进行训练</span></span><br><span class="line">model.compile(loss=<span class="string">'categorical_crossentropy'</span>, optimizer=<span class="string">'adam'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">train_history = model.fit(x=x_Train4D_normalize,</span><br><span class="line">                          y=y_TrainOneHot, validation_split=<span class="number">0.2</span>,</span><br><span class="line">                          epochs=<span class="number">10</span>, batch_size=<span class="number">300</span>, verbose=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_train_history</span><span class="params">(train_history, train, validation)</span>:</span></span><br><span class="line">    plt.plot(train_history.history[train])</span><br><span class="line">    plt.plot(train_history.history[validation])</span><br><span class="line">    plt.title(<span class="string">'Train histoty'</span>)</span><br><span class="line">    plt.ylabel(train)</span><br><span class="line">    plt.xlabel(<span class="string">'Epoch'</span>)</span><br><span class="line">    plt.legend([<span class="string">'train'</span>, <span class="string">'validation'</span>, ], loc=<span class="string">'upper left'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制准确率图</span></span><br><span class="line">show_train_history(train_history, <span class="string">'acc'</span>, <span class="string">'val_acc'</span>)</span><br><span class="line"><span class="comment"># 绘制误差率图</span></span><br><span class="line">show_train_history(train_history, <span class="string">'loss'</span>, <span class="string">'val_loss'</span>)</span><br></pre></td></tr></table></figure><p>本地电脑：</p><p><img src="https://i.loli.net/2019/11/18/5sGgqiXVujwxCtL.png" alt="20191118115543.png"></p><p>colab：</p><p><img src="https://i.loli.net/2019/11/18/PVmAhbrWM57lKq3.png" alt="20191118115632.png"></p><blockquote><p>可以看出，colab比我本地快很多</p></blockquote><h2 id="评估模型准确率"><a href="#评估模型准确率" class="headerlink" title="评估模型准确率"></a>评估模型准确率</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用test数据集来进行测试</span></span><br><span class="line">scores = model.evaluate(x_Test4D_normalize, y_TestOneHot)</span><br><span class="line">print(<span class="string">'The Test sets accuracy is :'</span>, scores[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/18/axRtDcW8P9ziGLO.png" alt="20191118115812.png"></p><h2 id="进行预测"><a href="#进行预测" class="headerlink" title="进行预测"></a>进行预测</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predicition = model.predict_classes(x_Test4D_normalize)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/18/ghMAUIOKvLf1olY.png" alt="20191118115953.png"></p><h2 id="说在最后的话"><a href="#说在最后的话" class="headerlink" title="说在最后的话"></a>说在最后的话</h2><p>总的来说，keras已经写好了读数据，训练，测试等api，我们只需要学会调用就行。</p><p>深层的原理还需要仔细研究，后面有时间我研究后单独开几篇博客。</p><p>当然这些花里胡哨的东西最终要用于实际，我打算对车牌识别使用这个进行改进。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>本次实验参考了很多资料，在此表示感谢。如果有侵权的地方，请联系我：<a href="mailto:stefancharles@qq.com" target="_blank" rel="noopener">stefancharles@qq.com</a>，我会立刻删除侵权内容。</p><p>如果你认为我哪里写得不对，也可以联系我一起讨论。</p><p>以下是参考来源。</p><ul><li><p>1.MNIST <a href="http://archive.ics.uci.edu/ml/datasets/Iris" target="_blank" rel="noopener">数据地址</a></p></li><li><p>2.CoLAB <a href="https://colab.research.google.com/" target="_blank" rel="noopener">CoLab</a></p></li><li><p>3.<a href="https://keras.io/zh/" target="_blank" rel="noopener">Keras中文官网</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mnist </tag>
            
            <tag> Keras </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TensorFlow】MNIST数字识别数据集识别</title>
      <link href="/2019/11/17/mnistinpython/"/>
      <url>/2019/11/17/mnistinpython/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在上一章中介绍了<a href="https://stefancharles.xyz/2019/11/12/mnist/">基于OpenCV的MNIST手写体SVM分类</a>,本篇将介绍一些使用Python对MNIST数据集进行操作。</p><a id="more"></a><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>Pycharm 2019.3 BETA</li><li>Win10 1909</li><li>Python 3.7.0</li><li>Chrome Dev 80.3964.0</li></ul><h2 id="使用Colab编辑和运行Python代码"><a href="#使用Colab编辑和运行Python代码" class="headerlink" title="使用Colab编辑和运行Python代码"></a>使用Colab编辑和运行Python代码</h2><p>按照谷歌官方的介绍：</p><blockquote><p>Colaboratory 是一个免费的 Jupyter 笔记本环境，不需要进行任何设置就可以使用，并且完全在云端运行。借助 Colaboratory，您可以编写和执行代码、保存和共享分析结果，以及利用强大的计算资源，所有这些都可通过浏览器免费使用。</p></blockquote><p>也就是说可以在线运行python代码，不需要进行麻烦的配置。</p><p> <a href="https://colab.research.google.com/" target="_blank" rel="noopener">点击这里去CoLab</a></p><p>今天我发现官方介绍的<strong>强大的计算资源</strong>真不是盖的。看来昨天是我冤枉它了。</p><p>经过几步简单的设置，就可以使用GPU和TPU进行加速。</p><p><img src="https://i.loli.net/2019/11/18/mZOUWougXPkzqcN.png" alt="Snipaste_2019-11-18_11-27-42.png"></p><p>我在我自己电脑上跑一个周期需要20秒，在Colab上使用GPU一个周期仅仅需要2秒。</p><p>当我用我自己电脑跑时，电脑CPU已经100%负载，此时我做不了其他事情，只能等程序跑完。<br>而在colab上，代码是在google云上跑，自己的电脑只是显示结果，CPU与平时一样，还能做其他工作。</p><h2 id="下载数据"><a href="#下载数据" class="headerlink" title="下载数据"></a>下载数据</h2><p>建立TensorFlow程序下载并读取MNIST数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'train'</span>, mnist.train.num_examples,</span><br><span class="line">      <span class="string">',validation'</span>, mnist.validation.num_examples,</span><br><span class="line">      <span class="string">',test'</span>, mnist.test.num_examples)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'train_images : '</span>, mnist.train.images.shape,</span><br><span class="line">      <span class="string">' - labels : '</span>, mnist.train.labels.shape)</span><br></pre></td></tr></table></figure><p>运行后，会在你的项目下新建一个MNIST_data文件夹，等待一会后，这个文件夹里会自动多出四个GZ压缩文件。<br><img src="https://i.loli.net/2019/11/17/WNR2rkxFaSHnlzu.png" alt="data.png"><br>控制台输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train <span class="number">55000</span> ,validation <span class="number">5000</span> ,test <span class="number">10000</span></span><br><span class="line">train_images :  (<span class="number">55000</span>, <span class="number">784</span>)  - labels :  (<span class="number">55000</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="查看多项数据images与labels"><a href="#查看多项数据images与labels" class="headerlink" title="查看多项数据images与labels"></a>查看多项数据images与labels</h2><p>为了后面方便的显示图像与标签，我们这里def一个显示的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_images_labels_prediction</span><span class="params">(images, labels, prediction, idx, num=<span class="number">10</span>)</span>:</span></span><br><span class="line">    fig = plt.gcf()</span><br><span class="line">    fig.set_size_inches(<span class="number">12</span>, <span class="number">14</span>)</span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">25</span>: num = <span class="number">25</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, num):</span><br><span class="line">        ax = plt.subplot(<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span> + i)</span><br><span class="line"></span><br><span class="line">        ax.imshow(np.reshape(images[idx], (<span class="number">28</span>, <span class="number">28</span>)),</span><br><span class="line">                  cmap=<span class="string">'binary'</span>)</span><br><span class="line"></span><br><span class="line">        title = <span class="string">"label="</span> + str(np.argmax(labels[idx]))</span><br><span class="line">        <span class="keyword">if</span> len(prediction) &gt; <span class="number">0</span>:</span><br><span class="line">            title += <span class="string">",predict="</span> + str(prediction[idx])</span><br><span class="line"></span><br><span class="line">        ax.set_title(title, fontsize=<span class="number">10</span>)</span><br><span class="line">        ax.set_xticks([]);</span><br><span class="line">        ax.set_yticks([])</span><br><span class="line">        idx += <span class="number">1</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>上面默认打印10个。</p><h2 id="按批次读取数据"><a href="#按批次读取数据" class="headerlink" title="按批次读取数据"></a>按批次读取数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">batch_images_xs, batch_labels_ys = mnist.train.next_batch(batch_size=<span class="number">100</span>)</span><br><span class="line">print(len(batch_images_xs), len(batch_labels_ys))</span><br></pre></td></tr></table></figure><p>可以调用上面的显示函数进行显示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示批次数据</span></span><br><span class="line">plot_images_labels_prediction(batch_images_xs,batch_labels_ys,[],<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="建立多层感知器"><a href="#建立多层感知器" class="headerlink" title="建立多层感知器"></a>建立多层感知器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义layer函数，建立2层网络</span></span><br><span class="line"><span class="comment"># 以正态分布的随机数建立并初始化W（权重）</span></span><br><span class="line"><span class="comment"># 以正态分布的随机数建立b(偏差)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">layer</span><span class="params">(output_dim,input_dim,inputs, activation=None)</span>:</span></span><br><span class="line">    W = tf.Variable(tf.random_normal([input_dim, output_dim]))</span><br><span class="line">    b = tf.Variable(tf.random_normal([<span class="number">1</span>, output_dim]))</span><br><span class="line">    XWb = tf.matmul(inputs, W) + b</span><br><span class="line">    <span class="keyword">if</span> activation <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        outputs = XWb</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outputs = activation(XWb)</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立输入层，使用placeholder方法建立输入层</span></span><br><span class="line"><span class="comment"># 输入数据类型为Float，即浮点数</span></span><br><span class="line"><span class="comment"># 第一维设置None，因为后续训练传入图像项数不确定</span></span><br><span class="line"><span class="comment"># 第二维维784，输入数字图像是784像素</span></span><br><span class="line">X = tf.placeholder(<span class="string">"float"</span>,[<span class="literal">None</span>,<span class="number">784</span>])</span><br><span class="line"><span class="comment"># 建立隐藏层</span></span><br><span class="line"><span class="comment"># 隐藏层神经元个数为226</span></span><br><span class="line"><span class="comment"># 输入层的神经元个数，也就是X=784</span></span><br><span class="line"><span class="comment"># 输入层 = X 连接输入层</span></span><br><span class="line"><span class="comment"># 定义激活函数为ReLU</span></span><br><span class="line">h1 = layer(output_dim=<span class="number">256</span>,input_dim=<span class="number">784</span>,inputs=X,activation=tf.nn.relu)</span><br><span class="line"><span class="comment"># 建立输出层</span></span><br><span class="line"><span class="comment"># 建立输出层神经元个数为10</span></span><br><span class="line"><span class="comment"># 输入神经元个数为隐藏层的个数 h1 = 256</span></span><br><span class="line"><span class="comment"># 连接隐藏层</span></span><br><span class="line"><span class="comment"># 没有激活函数</span></span><br><span class="line">y_predict = layer(output_dim=<span class="number">10</span>,input_dim=<span class="number">256</span>,inputs=h1,activation=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h2 id="定义训练方法"><a href="#定义训练方法" class="headerlink" title="定义训练方法"></a>定义训练方法</h2><p>TensorFlow的定义训练方式必须自己定义损失函数的公式、优化器和设置参数，并定义评估模型准确率的公式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立训练数据label真实值的placeholder</span></span><br><span class="line"><span class="comment"># 第二位设置为10，因为输入数字真实值已经是使用one-hot转换的值,0~9</span></span><br><span class="line">y_label = tf.placeholder(<span class="string">"float"</span>,[<span class="literal">None</span>,<span class="number">10</span>])</span><br><span class="line"><span class="comment"># 定义损失函数</span></span><br><span class="line"><span class="comment"># 使用cross_entropy()交叉熵训练</span></span><br><span class="line">loss_function = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=y_predict,labels=y_label))</span><br><span class="line"><span class="comment"># 定义优化器</span></span><br><span class="line"><span class="comment"># 调用tf.train模块，定义optimizer(优化器)</span></span><br><span class="line"><span class="comment"># 使用AdaOptimizer并设置learning_rate = 0.001</span></span><br><span class="line"><span class="comment"># 优化器使用loss_function计算误差，并且按照误差更新模型权重与偏差，使误差最小化</span></span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate=<span class="number">0.001</span>).minimize(loss_function)</span><br></pre></td></tr></table></figure><h2 id="定义评估模型准确率的方法"><a href="#定义评估模型准确率的方法" class="headerlink" title="定义评估模型准确率的方法"></a>定义评估模型准确率的方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先计算每一项数据是否预测正确</span></span><br><span class="line"><span class="comment"># 将运算结果存储在correct_prdiction中</span></span><br><span class="line"><span class="comment"># tf.equal判断真实值与测试值是否相等</span></span><br><span class="line"><span class="comment"># argmax将one-hot encoding转成数字0~9</span></span><br><span class="line">correct_prdiction = tf.equal(tf.argmax(y_label,<span class="number">1</span>), tf.argmax(y_predict,<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 计算预测正确结果的平均值</span></span><br><span class="line"><span class="comment"># 将tf.cast转换成float，再使用reduce_mean转成所有数平均值</span></span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prdiction,<span class="string">"float"</span>))</span><br></pre></td></tr></table></figure><h2 id="进行训练"><a href="#进行训练" class="headerlink" title="进行训练"></a>进行训练</h2><p>训练数据共55000项，分为每一批次100项，要将所有数据训练完毕后需要执行550批次（55000/100=550），当所有数据训练完毕，成为完成一个训练周期。我们将执行15个训练周期，降低误差，提高准确率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义训练参数</span></span><br><span class="line"><span class="comment"># 执行15个训练周期</span></span><br><span class="line"><span class="comment"># 每一批次项数为100</span></span><br><span class="line"><span class="comment"># loss、epoch、accuracy三个列表分别记录误差、训练周期、准确率</span></span><br><span class="line"><span class="comment"># time导入时间模块</span></span><br><span class="line">trainEpochs = <span class="number">15</span></span><br><span class="line">batchSize = <span class="number">100</span></span><br><span class="line">totalBatchs = int(mnist.train.num_examples / batchSize)</span><br><span class="line">loss_list = []</span><br><span class="line">epoch_list = []</span><br><span class="line">accuracy_list = []</span><br><span class="line"></span><br><span class="line">startTime = time()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"><span class="comment"># 进行迭代训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(trainEpochs):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(totalBatchs):</span><br><span class="line">        batch_x, batch_y = mnist.train.next_batch(batchSize)</span><br><span class="line">        sess.run(optimizer, feed_dict=&#123;X: batch_x, y_label: batch_y&#125;)</span><br><span class="line"></span><br><span class="line">    loss, acc = sess.run([loss_function, accuracy],</span><br><span class="line">                         feed_dict=&#123;X: mnist.validation.images,</span><br><span class="line">                                    y_label: mnist.validation.labels&#125;)</span><br><span class="line"></span><br><span class="line">    epoch_list.append(epoch);</span><br><span class="line">    loss_list.append(loss)</span><br><span class="line">    accuracy_list.append(acc)</span><br><span class="line">    print(<span class="string">"Train Epoch:"</span>, <span class="string">'%02d'</span> % (epoch + <span class="number">1</span>), <span class="string">"Loss="</span>,</span><br><span class="line">          <span class="string">"&#123;:.9f&#125;"</span>.format(loss), <span class="string">" Accuracy="</span>, acc)</span><br><span class="line"></span><br><span class="line">duration = time() - startTime</span><br><span class="line">print(<span class="string">"Train Finished takes:"</span>, duration)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Train Epoch: <span class="number">01</span> Loss= <span class="number">6.145112991</span>  Accuracy= <span class="number">0.8448</span></span><br><span class="line">Train Epoch: <span class="number">02</span> Loss= <span class="number">3.810992956</span>  Accuracy= <span class="number">0.8902</span></span><br><span class="line">Train Epoch: <span class="number">03</span> Loss= <span class="number">2.916266680</span>  Accuracy= <span class="number">0.908</span></span><br><span class="line">Train Epoch: <span class="number">04</span> Loss= <span class="number">2.435287952</span>  Accuracy= <span class="number">0.916</span></span><br><span class="line">Train Epoch: <span class="number">05</span> Loss= <span class="number">2.132323503</span>  Accuracy= <span class="number">0.9244</span></span><br><span class="line">Train Epoch: <span class="number">06</span> Loss= <span class="number">1.904199958</span>  Accuracy= <span class="number">0.9306</span></span><br><span class="line">Train Epoch: <span class="number">07</span> Loss= <span class="number">1.830164433</span>  Accuracy= <span class="number">0.9342</span></span><br><span class="line">Train Epoch: <span class="number">08</span> Loss= <span class="number">1.654303908</span>  Accuracy= <span class="number">0.9386</span></span><br><span class="line">Train Epoch: <span class="number">09</span> Loss= <span class="number">1.512639999</span>  Accuracy= <span class="number">0.9408</span></span><br><span class="line">Train Epoch: <span class="number">10</span> Loss= <span class="number">1.484358191</span>  Accuracy= <span class="number">0.94</span></span><br><span class="line">Train Epoch: <span class="number">11</span> Loss= <span class="number">1.389361858</span>  Accuracy= <span class="number">0.9434</span></span><br><span class="line">Train Epoch: <span class="number">12</span> Loss= <span class="number">1.329701424</span>  Accuracy= <span class="number">0.9438</span></span><br><span class="line">Train Epoch: <span class="number">13</span> Loss= <span class="number">1.301885366</span>  Accuracy= <span class="number">0.9444</span></span><br><span class="line">Train Epoch: <span class="number">14</span> Loss= <span class="number">1.228815317</span>  Accuracy= <span class="number">0.947</span></span><br><span class="line">Train Epoch: <span class="number">15</span> Loss= <span class="number">1.276753068</span>  Accuracy= <span class="number">0.943</span></span><br><span class="line">Train Finished takes: <span class="number">10.961797952651978</span></span><br></pre></td></tr></table></figure><h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><h3 id="Loss"><a href="#Loss" class="headerlink" title="Loss"></a>Loss</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.gcf()</span><br><span class="line">fig.set_size_inches(<span class="number">6</span>, <span class="number">3</span>)</span><br><span class="line">plt.plot(epoch_list, loss_list, label=<span class="string">'loss'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'loss'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'epoch'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/17/AQpKjBr9P2kNTzM.png" alt="loss.png"></p><h3 id="Accuracy"><a href="#Accuracy" class="headerlink" title="Accuracy"></a>Accuracy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(epoch_list, accuracy_list, label=<span class="string">"accuracy"</span>)</span><br><span class="line">fig = plt.gcf()</span><br><span class="line">fig.set_size_inches(<span class="number">6</span>, <span class="number">3</span>)</span><br><span class="line">plt.ylim(<span class="number">0.8</span>, <span class="number">1</span>)</span><br><span class="line">plt.ylabel(<span class="string">'accuracy'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'epoch'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/17/9pacr31EvO7uf2F.png" alt="acc.png"></p><h2 id="模型准确率评估"><a href="#模型准确率评估" class="headerlink" title="模型准确率评估"></a>模型准确率评估</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Accuracy:"</span>, sess.run(accuracy, feed_dict=&#123;X: mnist.test.images, y_label: mnist.test.labels&#125;))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accuracy: <span class="number">0.9412</span></span><br></pre></td></tr></table></figure><h2 id="进行预测"><a href="#进行预测" class="headerlink" title="进行预测"></a>进行预测</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">prediction_result = sess.run(tf.argmax(y_predict, <span class="number">1</span>), feed_dict=&#123;X: mnist.test.images&#125;)</span><br><span class="line"><span class="comment"># 显示预测结果，前10项</span></span><br><span class="line">prediction_result[:<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_images_labels_prediction</span><span class="params">(images, labels, prediction, idx, num=<span class="number">10</span>)</span>:</span></span><br><span class="line">    fig = plt.gcf()</span><br><span class="line">    fig.set_size_inches(<span class="number">12</span>, <span class="number">12</span>)</span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">25</span>: num = <span class="number">25</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, num):</span><br><span class="line">        ax = plt.subplot(<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span> + i)</span><br><span class="line"></span><br><span class="line">        ax.imshow(np.reshape(images[idx], (<span class="number">28</span>, <span class="number">28</span>)), cmap=<span class="string">'binary'</span>)</span><br><span class="line"></span><br><span class="line">        title = <span class="string">"label="</span> + str(np.argmax(labels[idx]))</span><br><span class="line">        <span class="keyword">if</span> len(prediction) &gt; <span class="number">0</span>:</span><br><span class="line">            title += <span class="string">",predict="</span> + str(prediction[idx])</span><br><span class="line"></span><br><span class="line">        ax.set_title(title, fontsize=<span class="number">10</span>)</span><br><span class="line">        ax.set_xticks([]);</span><br><span class="line">        ax.set_yticks([])</span><br><span class="line">        idx += <span class="number">1</span></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plot_images_labels_prediction(mnist.test.images, mnist.test.labels, prediction_result, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/17/s179tRKXxcojCTE.png" alt="top10.png"></p><p>从输出的图片可以看出，大部分的预测是正确的，还是有错误的情况，例如说5判断为6.</p><h2 id="输出前500个错误的判断"><a href="#输出前500个错误的判断" class="headerlink" title="输出前500个错误的判断"></a>输出前500个错误的判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">if</span> prediction_result[i] != np.argmax(mnist.test.labels[i]):</span><br><span class="line">        print(<span class="string">"i="</span> + str(i) +</span><br><span class="line">              <span class="string">"   label="</span>, np.argmax(mnist.test.labels[i]),</span><br><span class="line">              <span class="string">"predict="</span>, prediction_result[i])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">8</span>   label= <span class="number">5</span> predict= <span class="number">6</span></span><br><span class="line">i=<span class="number">24</span>   label= <span class="number">4</span> predict= <span class="number">7</span></span><br><span class="line">i=<span class="number">33</span>   label= <span class="number">4</span> predict= <span class="number">0</span></span><br><span class="line">i=<span class="number">61</span>   label= <span class="number">8</span> predict= <span class="number">2</span></span><br><span class="line">i=<span class="number">62</span>   label= <span class="number">9</span> predict= <span class="number">8</span></span><br><span class="line">i=<span class="number">78</span>   label= <span class="number">9</span> predict= <span class="number">7</span></span><br><span class="line">i=<span class="number">96</span>   label= <span class="number">1</span> predict= <span class="number">5</span></span><br><span class="line">i=<span class="number">118</span>   label= <span class="number">9</span> predict= <span class="number">8</span></span><br><span class="line">i=<span class="number">124</span>   label= <span class="number">7</span> predict= <span class="number">4</span></span><br><span class="line">i=<span class="number">125</span>   label= <span class="number">9</span> predict= <span class="number">4</span></span><br><span class="line">i=<span class="number">133</span>   label= <span class="number">7</span> predict= <span class="number">2</span></span><br><span class="line">i=<span class="number">149</span>   label= <span class="number">2</span> predict= <span class="number">6</span></span><br><span class="line">i=<span class="number">151</span>   label= <span class="number">9</span> predict= <span class="number">2</span></span><br><span class="line">i=<span class="number">159</span>   label= <span class="number">4</span> predict= <span class="number">1</span></span><br><span class="line">i=<span class="number">195</span>   label= <span class="number">3</span> predict= <span class="number">1</span></span><br><span class="line">i=<span class="number">211</span>   label= <span class="number">5</span> predict= <span class="number">8</span></span><br><span class="line">i=<span class="number">244</span>   label= <span class="number">2</span> predict= <span class="number">8</span></span><br><span class="line">i=<span class="number">245</span>   label= <span class="number">3</span> predict= <span class="number">5</span></span><br><span class="line">i=<span class="number">247</span>   label= <span class="number">4</span> predict= <span class="number">2</span></span><br><span class="line">i=<span class="number">306</span>   label= <span class="number">2</span> predict= <span class="number">1</span></span><br><span class="line">i=<span class="number">318</span>   label= <span class="number">2</span> predict= <span class="number">3</span></span><br><span class="line">i=<span class="number">320</span>   label= <span class="number">9</span> predict= <span class="number">7</span></span><br><span class="line">i=<span class="number">321</span>   label= <span class="number">2</span> predict= <span class="number">7</span></span><br><span class="line">i=<span class="number">324</span>   label= <span class="number">0</span> predict= <span class="number">3</span></span><br><span class="line">i=<span class="number">340</span>   label= <span class="number">5</span> predict= <span class="number">3</span></span><br><span class="line">i=<span class="number">359</span>   label= <span class="number">9</span> predict= <span class="number">4</span></span><br><span class="line">i=<span class="number">381</span>   label= <span class="number">3</span> predict= <span class="number">7</span></span><br><span class="line">i=<span class="number">389</span>   label= <span class="number">9</span> predict= <span class="number">4</span></span><br><span class="line">i=<span class="number">399</span>   label= <span class="number">4</span> predict= <span class="number">2</span></span><br><span class="line">i=<span class="number">404</span>   label= <span class="number">2</span> predict= <span class="number">7</span></span><br><span class="line">i=<span class="number">412</span>   label= <span class="number">5</span> predict= <span class="number">3</span></span><br><span class="line">i=<span class="number">445</span>   label= <span class="number">6</span> predict= <span class="number">0</span></span><br><span class="line">i=<span class="number">448</span>   label= <span class="number">9</span> predict= <span class="number">8</span></span><br><span class="line">i=<span class="number">449</span>   label= <span class="number">3</span> predict= <span class="number">5</span></span><br><span class="line">i=<span class="number">450</span>   label= <span class="number">3</span> predict= <span class="number">5</span></span><br><span class="line">i=<span class="number">457</span>   label= <span class="number">6</span> predict= <span class="number">5</span></span><br><span class="line">i=<span class="number">468</span>   label= <span class="number">7</span> predict= <span class="number">3</span></span><br><span class="line">i=<span class="number">478</span>   label= <span class="number">5</span> predict= <span class="number">3</span></span><br><span class="line">i=<span class="number">479</span>   label= <span class="number">9</span> predict= <span class="number">5</span></span><br><span class="line">i=<span class="number">486</span>   label= <span class="number">8</span> predict= <span class="number">7</span></span><br><span class="line">i=<span class="number">495</span>   label= <span class="number">8</span> predict= <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="改进方案"><a href="#改进方案" class="headerlink" title="改进方案"></a>改进方案</h2><p>这里的正确率还是不太理想。改进的方法有很多，例如我们将之前隐藏层原本的256个神经元改成1000个，或者使用两层隐藏层。<br>或者使用卷积神经网络等等来提高正确率。<br>这里我暂时没有深入再去研究。后面如果有时间和精力再研究。<br>有兴趣的同学可以暂时参考林博主的<a href="https://blog.csdn.net/qq_40318498/article/details/103071141" target="_blank" rel="noopener">关于MNIST手写数字识别的几种实现方式</a>。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>本次实验参考了很多资料，在此表示感谢。如果有侵权的地方，请联系我：<a href="mailto:stefancharles@qq.com" target="_blank" rel="noopener">stefancharles@qq.com</a>，我会立刻删除侵权内容。</p><p>如果你认为我哪里写得不对，也可以联系我一起讨论。</p><p>以下是参考来源。</p><ul><li><p>1.MNIST <a href="http://archive.ics.uci.edu/ml/datasets/Iris" target="_blank" rel="noopener">数据地址</a></p></li><li><p>2.CoLAB <a href="https://colab.research.google.com/" target="_blank" rel="noopener">CoLab</a></p></li><li><p>3.<a href="https://blog.csdn.net/rtygbwwwerr/article/details/50778098" target="_blank" rel="noopener">交叉熵（Cross-Entropy）</a></p></li><li><p>4.林博主 - <a href="https://blog.csdn.net/qq_40318498/article/details/103071141" target="_blank" rel="noopener">关于MNIST手写数字识别的几种实现方式</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mnist </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于OpenCV的MNIST手写体SVM分类</title>
      <link href="/2019/11/12/mnist/"/>
      <url>/2019/11/12/mnist/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MNIST 数据集来自美国国家标准与技术研究所, National Institute of Standards and Technology (NIST).<br>训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员. 测试集(test set) 也是同样比例的手写数字数据.<br>它的训练集有6万项数据，而测试集有1万项数据（其中前5000个来自最初NIST项目的训练集，后5000个来自最初NIST项目的测试集）。在<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">官方网站</a>上，这些数据以4个gz压缩包的方式提供下载：</p><a id="more"></a><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>采用SVM实现实现MNIST手写体分类，数据下载链接在<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">官方网站</a>上；上传源码和实现结果，语言不限</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>Pycharm 2019.3 BETA</li><li>Win10 1909</li><li>Python 3.7.0</li><li>OpenCV 4.1.1</li><li>VS 2019</li></ul><h2 id="OpenCV的配置"><a href="#OpenCV的配置" class="headerlink" title="OpenCV的配置"></a>OpenCV的配置</h2><p>本次实验我选择使用C++的OpenCV实现。所以需要先<strong>配置OpenCV环境</strong>。</p><p>在windows下配置OpenCV是一个技术活，这里引用一下本专业最强的达哥博客，他的博客把windows下配置OpenCV讲解的很详细。</p><p><a href="https://blog.csdn.net/weixin_43871310/article/details/97271775" target="_blank" rel="noopener">点击这里去配置OpenCV</a></p><p>OpenCV的全称是Open Source Computer Vision Library，是一个跨平台的计算机视觉库。</p><h2 id="python传送门"><a href="#python传送门" class="headerlink" title="python传送门"></a>python传送门</h2><ul><li><p><a href="https://stefancharles.xyz/2019/11/17/mnistinpython/">【TensorFlow】利用MNIST数字识别数据集识别</a></p></li><li><p><a href="https://stefancharles.xyz/2019/11/18/mnistinkeras/">keras卷积神经网络对MNIST数据集进行操作</a></p></li></ul><h2 id="总体概览"><a href="#总体概览" class="headerlink" title="总体概览"></a>总体概览</h2><ul><li><p>train-images-idx3-ubyte.gz: training set images (9912422 bytes)</p></li><li><p>train-labels-idx1-ubyte.gz: training set labels (28881 bytes)</p></li><li><p>t10k-images-idx3-ubyte.gz: test set images (1648877 bytes)</p></li><li><p>t10k-labels-idx1-ubyte.gz: test set labels (4542 bytes)</p></li></ul><p><img src="https://i.loli.net/2019/11/12/A5ysQvjExH9pKPa.png" alt="warning.png"></p><blockquote><p>The data is stored in a very simple file format designed for storing vectors and multidimensional matrices. General info on this format is given at the end of this page, but you don’t need to read that to use the data files.<br>All the integers in the files are stored in the MSB first (high endian) format used by most non-Intel processors. Users of Intel processors and other low-endian machines must flip the bytes of the header.</p></blockquote><p>如上图，这些数据的格式还是比较简单的，上面文件中的所有的数字都是按照MSB（大端）的方式存储的。值得注意的的是，intel处理器是little-endian的。所以在intel处理器上或者其它的little-endian处理器上，必须要进行相应的翻转处理。也就是<strong>大端转小端</strong>。</p><p>那么什么是大小端？</p><p>最标准的解释可以是Wiki百科自己学习一下。<a href="https://en.wikipedia.org/wiki/Endianness" target="_blank" rel="noopener">点击这里去Wiki</a>。可能需要翻墙访问，或者你可以自行百度&amp;谷歌。<br><img src="https://i.loli.net/2019/11/12/zmQxUTYbuth9jKV.png" alt="wiki.png"></p><p>但是我还是“断章取义”一下：<br>例如，一个多位的整数，按照存储地址从低到高排序的字节中，如果该整数的最低有效字节（类似于最低有效位）在最高有效字节的前面，则称小端序；反之则称大端序。</p><p>MNIST网站上对数据集TRAINING SET LABEL FILE (train-labels-idx1-ubyte)的介绍如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[offset] [type]          [value]          [description]</span><br><span class="line">0000     32 bit integer  0x00000801(2049) magic number (MSB first)</span><br><span class="line">0004     32 bit integer  60000            number of items</span><br><span class="line">0008     unsigned byte   ??               label</span><br><span class="line">0009     unsigned byte   ??               label</span><br><span class="line">........</span><br><span class="line">xxxx     unsigned byte   ??               label</span><br><span class="line">The labels values are 0 to 9.</span><br></pre></td></tr></table></figure></p><p>其实MNIST网站上对上面很多的东西解释的很清楚了。大家最好自行研读一下英文文档。</p><p>我这里还是稍微讲一下。或者说翻译一下。</p><p>这四个文件采用了IDX的文件格式，一种平铺直叙的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">magic number</span><br><span class="line"></span><br><span class="line">size in dimension 0</span><br><span class="line"></span><br><span class="line">size in dimension 1</span><br><span class="line"></span><br><span class="line">size in dimension 2</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">size in dimension N</span><br><span class="line"></span><br><span class="line">data</span><br></pre></td></tr></table></figure><p>其中magic number为4字节，前2字节永远是0，第3字节代表数据的格式：<br>0x08: unsigned byte<br>0x09: signed byte<br>0x0B: short (2 bytes)<br>0x0C: int (4 bytes)<br>0x0D: float (4 bytes)<br>0x0E: double (8 bytes)</p><p>第4字节的含义表示维度的数量（dimensions）: 1 表示一维（比如vectors）, 2 表示二维（ 比如matrices），3表示三维（比如numpy表示的图像，高，宽，通道数）。</p><p>训练集和测试集的标签文件的格式(train-labels-idx1-ubyte和t10k-labels-idx1-ubyte)格式：</p><ul><li><p>1.前4个字节（第0～3个字节）是magic number2049（int型，0x00000801, 大端）;</p></li><li><p>2.再往后4个字节（第4～7个字节）是标签的个数：60000或10000；</p></li><li><p>3.再往后每1个字节是一个无符号型的数，值为0～9。</p></li></ul><p>训练集和测试集的图像文件的格式(train-images-idx3-ubyte和t10k-images-idx3-ubyte)格式比label复杂些：</p><ul><li><p>1.前4个字节（第0～3个字节）是magic number2051（int型，0x00000803, 大端）;</p></li><li><p>2.再往后4个字节（第4～7个字节）是图像的个数：60000或10000（第1个维度）；</p></li><li><p>3.再往后4个字节（第8～11个字节）是图像在高度上由多少个像素组成（第2个维度，高28个像素）；</p></li><li><p>4.再往后4个字节（第12～15个字节）是图像在宽度上由多少个像素组成（第3个维度，宽28个像素）；</p></li><li><p>5.再往后是一个三维数组，表示10000个或60000个分辨率28x28的灰度图像，一句话来说就是10000x28x28个像素，每个像素的值为0～255（0是背景，为白色；255是黑色）。</p></li></ul><h2 id="在python中绘制"><a href="#在python中绘制" class="headerlink" title="在python中绘制"></a>在python中绘制</h2><p>先来直观看一下数据集是什么样的吧。</p><p>新建一个Pycharm工程，输入以下源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coded by Stefan</span></span><br><span class="line"><span class="comment"># 2019.11.12</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 博客地址 https://stefancharles.xyz/</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_mnist</span><span class="params">()</span>:</span></span><br><span class="line">    labels_path = <span class="string">'D:\\py\\mnist\\data\\train-labels.idx1-ubyte'</span></span><br><span class="line">    images_path = <span class="string">'D:\\py\\mnist\\data\\train-images.idx3-ubyte'</span></span><br><span class="line">    <span class="keyword">with</span> open(labels_path, <span class="string">'rb'</span>) <span class="keyword">as</span> lbpath:</span><br><span class="line">        magic, n = struct.unpack(<span class="string">'&gt;II'</span>,</span><br><span class="line">                                 lbpath.read(<span class="number">8</span>))</span><br><span class="line">        labels = np.fromfile(lbpath,</span><br><span class="line">                             dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(images_path, <span class="string">'rb'</span>) <span class="keyword">as</span> imgpath:</span><br><span class="line">        magic, num, rows, cols = struct.unpack(<span class="string">'&gt;IIII'</span>,</span><br><span class="line">                                               imgpath.read(<span class="number">16</span>))</span><br><span class="line">        images = np.fromfile(imgpath,</span><br><span class="line">                             dtype=np.uint8).reshape(len(labels), <span class="number">784</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> images, labels</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(</span><br><span class="line">    nrows=<span class="number">2</span>,</span><br><span class="line">    ncols=<span class="number">5</span>,</span><br><span class="line">    sharex=<span class="literal">True</span>,</span><br><span class="line">    sharey=<span class="literal">True</span>, )</span><br><span class="line"></span><br><span class="line">X_train,y_train = load_mnist()</span><br><span class="line">ax = ax.flatten()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    img = X_train[y_train == i][<span class="number">0</span>].reshape(<span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">    ax[i].imshow(img, cmap=<span class="string">'Greys'</span>, interpolation=<span class="string">'nearest'</span>)</span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].set_xticks([])</span><br><span class="line">ax[<span class="number">0</span>].set_yticks([])</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>怎么导包，导包失败的这些问题我就不再说了，相信你已经轻车熟路了。</p><blockquote><p>需要把上面的代码的绝对路径换成你下载MNIST数据集的解压后的路径。</p></blockquote><p>运行上面的代码，我们现在应该可以看到一个 2*5 的图片, 里面分别是 0-9 单个数字的图片.</p><p><img src="https://i.loli.net/2019/11/12/9Ok23JegfyrnmTG.png" alt="0000.png"></p><p>当然还能显示很多数据集中的图片，这里不再赘述。有兴趣的同学可以自己研究。</p><h2 id="开始上手OpenCV"><a href="#开始上手OpenCV" class="headerlink" title="开始上手OpenCV"></a>开始上手OpenCV</h2><p>我主要需要写三个函数，一个训练函数，一个用测试集的测试函数，一个随机的测试函数。</p><p>所以我的主函数如下：</p><blockquote><p>注意：以下所有实现代码有很多方式写，仅供参考。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Input function you want to run:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> type = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; type;</span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Start running MnistTrain..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">mnistTrain();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Start running MnistAccuracyTest..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">mnistAccuracyTest();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Start running RandomImageTest..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">randomImageTest();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//coded BY Stefan on 2019.11.12</span></span><br><span class="line">    <span class="comment">//博客地址 https://stefancharles.xyz/</span></span><br><span class="line">waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我设置的头文件如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/ml.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/ml/ml.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//coded BY Stefan on 2019.11.12</span></span><br><span class="line"><span class="comment">//博客地址 https://stefancharles.xyz/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mnistAccuracyTest</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">randomImageTest</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">reverseInt</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mnistTrain</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="svm训练数据集"><a href="#svm训练数据集" class="headerlink" title="svm训练数据集"></a>svm训练数据集</h3><p>首先需要读取数据集。值得注意的是由于SVM需要的测试数据格式是CV_32FC1，所以需要进行转换。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取测试图像</span></span><br><span class="line"><span class="keyword">int</span> imgVectorLen = nrows * ncols;</span><br><span class="line">Mat testFeatures = Mat::zeros(testImgsNum, imgVectorLen, CV_32FC1);</span><br><span class="line">Mat temp = Mat::zeros(nrows, ncols, CV_8UC1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; testImgsNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">if_testImags.read((<span class="keyword">char</span>*)temp.data, imgVectorLen);</span><br><span class="line">Mat tempFloat;</span><br><span class="line">    <span class="comment">//coded BY Stefan on 2019.11.12</span></span><br><span class="line">       <span class="comment">//博客地址 https://stefancharles.xyz/</span></span><br><span class="line">temp.convertTo(tempFloat, CV_32FC1);</span><br><span class="line"><span class="built_in">memcpy</span>(testFeatures.data + i * imgVectorLen * <span class="keyword">sizeof</span>(<span class="keyword">float</span>), tempFloat.data, imgVectorLen * <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再归一化testFeatures。<br>下面读取测试图像对应的分类标签。由于SVM需要输入的标签类型是CV_32SC1，所以也在这里进行转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> magic_num_2, testLblsNum;</span><br><span class="line"><span class="comment">//读取magic number</span></span><br><span class="line">if_testLabels.read((<span class="keyword">char</span>*)&amp;magic_num_2, <span class="keyword">sizeof</span>(magic_num_2));</span><br><span class="line">magic_num_2 = reverseInt(magic_num_2);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"测试图像标签数据库t10k-labels-idx1-ubyte的magic number为："</span> &lt;&lt; magic_num_2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//读取测试图像的分类标签的数量</span></span><br><span class="line">if_testLabels.read((<span class="keyword">char</span>*)&amp;testLblsNum, <span class="keyword">sizeof</span>(testLblsNum));</span><br><span class="line">testLblsNum = reverseInt(testLblsNum);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"测试图像标签数据库t10k-labels-idx1-ubyte的标签总数为："</span> &lt;&lt; testLblsNum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//coded BY Stefan on 2019.11.12</span></span><br><span class="line">    <span class="comment">//博客地址 https://stefancharles.xyz/</span></span><br><span class="line">Mat testLabels = Mat::zeros(testLblsNum, <span class="number">1</span>, CV_32SC1);</span><br><span class="line">Mat readLabels = Mat::zeros(testLblsNum, <span class="number">1</span>, CV_8UC1);</span><br><span class="line">if_testLabels.read((<span class="keyword">char</span>*)readLabels.data, testLblsNum * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">readLabels.convertTo(testLabels, CV_32SC1);</span><br></pre></td></tr></table></figure><p>就如我前面提到的<strong>大小端转换问题</strong>，这里reverseInt()函数就是为了转换。这里是一个关键点。<br>其函数具体如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大端转小端</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverseInt</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c1, c2, c3, c4;</span><br><span class="line"></span><br><span class="line">c1 = i &amp; <span class="number">255</span>;</span><br><span class="line">c2 = (i &gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>;</span><br><span class="line">c3 = (i &gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>;</span><br><span class="line">c4 = (i &gt;&gt; <span class="number">24</span>) &amp; <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ((<span class="keyword">int</span>)c1 &lt;&lt; <span class="number">24</span>) + ((<span class="keyword">int</span>)c2 &lt;&lt; <span class="number">16</span>) + ((<span class="keyword">int</span>)c3 &lt;&lt; <span class="number">8</span>) + c4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图像和标签准备好了之后，接下来需要<strong>设置svm的参数</strong></p><h3 id="设置svm的参数"><a href="#设置svm的参数" class="headerlink" title="设置svm的参数"></a>设置svm的参数</h3><p>这里算是整个工程的核心部分，参数的设置直接关系到后面测试集测试的准确率。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cv::Ptr&lt;cv::ml::SVM&gt; svm = cv::ml::SVM::create();</span><br><span class="line">svm-&gt;setType(cv::ml::SVM::Types::C_SVC);</span><br><span class="line">svm-&gt;setKernel(cv::ml::SVM::KernelTypes::RBF);</span><br><span class="line">svm-&gt;setDegree(<span class="number">10.0</span>);</span><br><span class="line">svm-&gt;setGamma(<span class="number">0.01</span>);</span><br><span class="line">svm-&gt;setCoef0(<span class="number">1.0</span>);</span><br><span class="line">svm-&gt;setC(<span class="number">10.0</span>);</span><br><span class="line">svm-&gt;setNu(<span class="number">0.5</span>);</span><br><span class="line">svm-&gt;setP(<span class="number">0.1</span>);</span><br><span class="line">svm-&gt;setTermCriteria(cv::TermCriteria(cv::TermCriteria::EPS, <span class="number">100</span>, FLT_EPSILON));</span><br><span class="line">svm-&gt;train(trainFeatures, cv::ml::SampleTypes::ROW_SAMPLE, trainLabels);</span><br><span class="line"><span class="comment">//coded BY Stefan on 2019.11.12</span></span><br><span class="line">   <span class="comment">//博客地址 https://stefancharles.xyz/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"训练结束，正写入xml:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">svm-&gt;save(<span class="string">"mnist.xml"</span>);</span><br></pre></td></tr></table></figure><p>上面的参数怎么设置，可以<a href="https://docs.opencv.org/4.1.1/d1/d2d/classcv_1_1ml_1_1SVM.html" target="_blank" rel="noopener">去查看OpenCV的官方文档</a>。</p><p>后面如果有时间的话，我会再仔细讲解这里的调参。</p><p>有一篇关于svm参数的csdn博客还可以吧。<a href="https://blog.csdn.net/zhuiqiuk/article/details/52934177" target="_blank" rel="noopener">点击这里访问</a></p><p>这里完成后，就可以跑一下程序了。</p><blockquote><p>注意把DEBUG模式调到X64</p></blockquote><p>训练需要一些时间。</p><p><img src="https://i.loli.net/2019/11/13/svirCeIEfVBbXAo.png" alt="train.png"></p><p>上面的图里就是训练结束后的我的截图。回到工程目录下，应该能看到一个mnist.xml文件了。可以使用VScode打开。</p><p><img src="https://i.loli.net/2019/11/13/ECsYpF57rOHfbwl.png" alt="xml.png"></p><h3 id="加载训练好的SVM模型"><a href="#加载训练好的SVM模型" class="headerlink" title="加载训练好的SVM模型"></a>加载训练好的SVM模型</h3><p>首先也需要和上面一样读取图像集和标签集，代码很类似，改动几个小地方就行。这里我就不赘述了。相信认真看完上面代码的你一定懂得怎么修改。</p><p>然后就是加载训练好的SVM模型。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cv::Ptr&lt;cv::ml::SVM&gt; svm = cv::ml::SVM::create();</span><br><span class="line">svm = Algorithm::load&lt;ml::SVM&gt;(<span class="string">"mnist.xml"</span>);</span><br></pre></td></tr></table></figure><h3 id="对每一个测试图像进行SVM分类预测"><a href="#对每一个测试图像进行SVM分类预测" class="headerlink" title="对每一个测试图像进行SVM分类预测"></a>对每一个测试图像进行SVM分类预测</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; testLblsNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">Mat predict_mat = Mat::zeros(<span class="number">1</span>, imgVectorLen, CV_32SC1);</span><br><span class="line"><span class="built_in">memcpy</span>(predict_mat.data, testFeatures.data + i * imgVectorLen * <span class="keyword">sizeof</span>(<span class="keyword">float</span>), imgVectorLen * <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line"><span class="keyword">int</span> predict_label = svm-&gt;predict(predict_mat);</span><br><span class="line"><span class="keyword">int</span> truth_label = testLabels.at&lt;<span class="keyword">int</span>&gt;(i);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">int</span>)predict_label == (<span class="keyword">int</span>)truth_label)</span><br><span class="line">&#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//coded BY Stefan on 2019.11.13</span></span><br><span class="line"><span class="comment">//博客地址 https://stefancharles.xyz/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"预测准确率为："</span> &lt;&lt; (<span class="keyword">double</span>)sum / (<span class="keyword">double</span>)testLblsNum &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>上面的代码很容易读懂的。</p><p>大概就是把预测的样本结果和真实的样本标签进行比较，一致的话就让sum加1，循环如此，直到测试集结束。然后就除以总的测试样本数据，就是正确率了。</p><p>这里我进行的测试结果是98.33%.</p><p>如下图所示：<br><img src="https://i.loli.net/2019/11/13/c7jt6KF8wfOWaHA.png" alt="predict.png"></p><p>也就是错误率在0.0167‬左右了。<br><img src="https://i.loli.net/2019/11/13/A3cWvk9I7ntzMuj.png" alt="23wrong.png"><br>在MNIST的官方网址上最低的错误率是2012年的0.23。</p><p>不过现在是2019了，应该有人比我上面得出的正确率还要高了。</p><h3 id="随机测试"><a href="#随机测试" class="headerlink" title="随机测试"></a>随机测试</h3><p>随机选取一张图片进行测试。代码和上面类似，就不具体贴出来了。<br>就贴一下运行结果。<br><img src="https://i.loli.net/2019/11/13/OUEypaGH6qsPbwS.png" alt="test1.png"></p><p>可以看出，实际的图片1，程序预测出即为1.</p><blockquote><p>希望你看完这篇文章对你有所启发，文章有错误的地方，还请指出。感谢观看。下期再见。</p></blockquote><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>本次实验参考了很多资料和著名博主的博客内容，在此表示感谢。如果有侵权的地方，请联系我：<a href="mailto:stefancharles@qq.com" target="_blank" rel="noopener">stefancharles@qq.com</a>，我会立刻删除侵权内容。</p><p>如果你认为我哪里写得不对，也可以联系我一起讨论。</p><p>以下是参考来源。</p><ul><li><p>1.本专业最强的陈博主，达哥，<a href="https://blog.csdn.net/weixin_43871310/article/details/97271775" target="_blank" rel="noopener">点击这里去他的博客</a></p></li><li><p>2.MNIST <a href="http://archive.ics.uci.edu/ml/datasets/Iris" target="_blank" rel="noopener">数据地址</a></p></li><li><p>3.svm参数的csdn博客。<a href="https://blog.csdn.net/zhuiqiuk/article/details/52934177" target="_blank" rel="noopener">点击这里访问</a></p></li><li><p>4.<a href="https://docs.opencv.org/4.1.1/d1/d2d/classcv_1_1ml_1_1SVM.html" target="_blank" rel="noopener">查看OpenCV的官方文档</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mnist </tag>
            
            <tag> OpenCV </tag>
            
            <tag> SVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OMNET++入门教程</title>
      <link href="/2019/11/08/omnetpp/"/>
      <url>/2019/11/08/omnetpp/</url>
      
        <content type="html"><![CDATA[<h2 id="OMNETPP简介"><a href="#OMNETPP简介" class="headerlink" title="OMNETPP简介"></a>OMNETPP简介</h2><p>OMNeT++ (Objective Modular Network Testbed in C++) is a modular, component-based C++ simulation library and framework, primarily for building network simulators.<br>OMNeT++是一个免费的、开源的多协议网络仿真软件，在网络仿真领域中占有十分重要的地位。OMNeT++英文全称是Objective Modular Network Testbed in C++，是近年来在科学和工业领域里逐渐流行的一种基于组件的模块化的开放的网络仿真平台。<br>OMNeT++作为离散事件仿真器，具备强大完善的图形界面接口。</p><a id="more"></a><p>好了，上面的介绍我也不知道具体说的什么意思。先来动手安装。</p><p>首先我想说一下，omnetpp官网给出了安装教程，不过是英文版的教程。<a href="https://omnetpp.org/doc/omnetpp/InstallGuide.pdf" target="_blank" rel="noopener">点击这里访问官方教程</a></p><p>请先尝试看英文原版，原版讲解比我详细多了。但是如果你看英文有理解困难，可以参考以下我的安装过程。</p><h2 id="Win10环境下安装"><a href="#Win10环境下安装" class="headerlink" title="Win10环境下安装"></a>Win10环境下安装</h2><p>后面有机会我再介绍在Ubuntu环境下安装。先来在win10下安装。</p><p>我安装的版本是5.5.1。是目前时间里最新的稳定版。当然有技术喜欢探究的同学可以安装最版的Preview 6.0版本。</p><p>先<a href="https://omnetpp.org/download/" target="_blank" rel="noopener">点击这里</a>下载<strong>对应版本</strong>的zip。这里别下载错了。linux版本只有200多MB，但是win的版本有600多MB。</p><p><img src="https://i.loli.net/2019/11/08/oTaKzkAgyvXqCZj.png" alt="8.png"></p><p>由于它这里使用的外国服务器amazonaws，速度可能有些慢。可以考虑翻墙下载。</p><p>或者你可以联系我，我私发安装文件给你。</p><p>下载后是一个zip文件。请解压到一个<strong>不带空格的名字的文件夹</strong>下，最好也不要有中文。</p><blockquote><p>特别注意：整个路径也不能含有空格或者中文。建议直接在磁盘的根目录下直接新建一个名作OMNETPP的文件夹。然后在这下面解压。如果这一步你没做，下面的安装你可能会失败。</p></blockquote><p>解压后大致如下图所示：<br><img src="https://i.loli.net/2019/11/08/vF2lmLXGe39r7UH.png" alt="9.png"></p><h3 id="Configuring-and-Building-OMNeT"><a href="#Configuring-and-Building-OMNeT" class="headerlink" title="Configuring and Building OMNeT++"></a>Configuring and Building OMNeT++</h3><p>双击打开mingwenv.cmd。</p><p><img src="https://i.loli.net/2019/11/09/NFWbRwvUr6dm3QP.png" alt="33.png"></p><p>如上图，出现类似命令提示行的界面。任意按一个键等待解压MinGW的toolchain就行。例如你按下回车即可。</p><blockquote><p>这里需要注意，如果你的电脑之前安装过带有MinGW的软件时，例如codeblocks，请检查你的环境变量是不是有MinGW，如果有，请务必先删除其对应Path。<br>因为后面的操作是基于上面解压的MinGW，如果你不删除你环境变量里的，那么默认就会使用你环境变量里指向的MinGW。从而可能导致后面make失败。</p></blockquote><p>稍微熟悉一点linux命令的同学对下面的操作应该很了解。</p><p>如果你不熟悉linux命令，那也没有关系，按照下面的操作按部就班即可成功安装。不要看到黑漆漆的框框就有畏难心理。</p><p>等待解压完成后。然后输入下面的一行命令并回车：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/08/xS2XDnbFHKtTRaQ.png" alt="1.png"></p><p>等待它自动完成后，再输入命令并回车：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>接下来就需要等待<strong>一段较长的时间</strong>。<br><img src="https://i.loli.net/2019/11/08/LurDnfxJXvFHoBW.png" alt="2.png"></p><h3 id="Verifying-the-Installation"><a href="#Verifying-the-Installation" class="headerlink" title="Verifying the Installation"></a>Verifying the Installation</h3><p>上一步完成后，需要验证一下安装是否正确。</p><p>输入下面的一行命令并回车：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> samples/aloha</span><br></pre></td></tr></table></figure><p>上面的命令就是切换了一下目录。</p><p>然后再输入下面的一行命令并回车：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./aloha</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/08/Vmr7lbznt2xM34I.png" alt="4.png"><br>默认情况下，就应该可以看到GUI窗口和对话框。</p><h3 id="Starting-the-IDE"><a href="#Starting-the-IDE" class="headerlink" title="Starting the IDE"></a>Starting the IDE</h3><p>然后输入下面的一行命令并回车：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">omnetpp</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/08/PodfhJ4iZ5TDspn.png" alt="6.png"><br>就可以启动IDE了。</p><p>当然，你可以把快捷方式发送到桌面。如下图所示。点击exe的效果和命令行一样。但是命令行看起来更帅很多。</p><p><img src="https://i.loli.net/2019/11/08/EZN2WJahgqA1z4m.png" alt="7.png"></p><h3 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h3><p>如果你想直接在win的cmd下启动 OMNeT++ 的 simulations ，你需要配置一下环境变量。</p><p>不过这里可有可无。有兴趣的同学可以按照官方教程配置即可。这里我就不赘述了。</p><h3 id="关于Preview版本"><a href="#关于Preview版本" class="headerlink" title="关于Preview版本"></a>关于Preview版本</h3><p>在win10环境下，6.0版本在make时会报错，需要你自行修复一下。有兴趣的同学可以参照github上的issue自己解决。</p><p><a href="https://github.com/omnetpp/omnetpp/issues" target="_blank" rel="noopener">点击这里访问</a></p><h2 id="OMNeT-的使用"><a href="#OMNeT-的使用" class="headerlink" title="OMNeT++的使用"></a>OMNeT++的使用</h2><h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><h4 id="Setting-up-the-project"><a href="#Setting-up-the-project" class="headerlink" title="Setting up the project"></a>Setting up the project</h4><p>首先从最简单的步骤开始，我们新建一个工程文件。</p><p><img src="https://i.loli.net/2019/11/09/nGki2j6yVhwXL5q.png" alt="11.png"></p><p>就如上图所展示的这样。</p><h4 id="Adding-the-NED-file"><a href="#Adding-the-NED-file" class="headerlink" title="Adding the NED file"></a>Adding the NED file</h4><p>接下来新建一个NED文件。</p><p>OMNeT ++使用NED文件来定义组件并将它们组装成更大的单元，例如网络。 我们开始通过添加NED文件来实现我们的模型。 要将文件添加到项目中，</p><p>在左侧的项目资源管理器中右键单击项目目录，然后从菜单中选择新建-&gt;Network Description File（网络描述文件）（NED）。 当提示输入文件名时，例如输入tictoc1.ned。</p><p><img src="https://i.loli.net/2019/11/09/ih1MYuAQ3ecvEmB.png" alt="44.png"></p><p>如上图所示。</p><p>看下图的左下角，这里有两种模式，一个是设计模式，一个是源码模式。<br><img src="https://i.loli.net/2019/11/09/4jdH7tTJfXCSAyv.png" alt="55.png"><br>点击切换到源码模式，输入下面的代码进去。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">simple Txc1</span><br><span class="line">&#123;</span><br><span class="line">    gates:</span><br><span class="line">        input in;</span><br><span class="line">        output out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Two instances (tic and toc) of Txc1 connected both ways.</span></span><br><span class="line"><span class="comment">// Tic and toc will pass messages to one another.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">network Tictoc1</span><br><span class="line">&#123;</span><br><span class="line">    submodules:</span><br><span class="line">        tic: Txc1 &#123;</span><br><span class="line">            @display(<span class="string">"p=57,132"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        toc: Txc1;</span><br><span class="line">    connections:</span><br><span class="line">        tic.out --&gt; &#123;  delay = <span class="number">100</span>ms; &#125; --&gt; toc.in;</span><br><span class="line">        tic.in &lt;-- &#123;  delay = <span class="number">100</span>ms; &#125; &lt;-- toc.out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你应该大概猜得出上面代码做了什么。我再这里还是稍微解释一下：<br>代码中的第一个块将Txc1声明为简单模块类型。 简单模块在NED级别上是最基本的。 它们也是活动组件，其行为是用C ++实现的。<br>以及Txc1有一个名为in的输入门和一个名为out的输出门。</p><p>第二个块将Tictoc1声明为网络。 Tictoc1由两个子模块tic和toc组装而成，两个子模块均为Txc1模块类型。 tic的输出门连接到toc的输入门，反之亦然。 两种方式都有100ms的传播延迟。</p><p>这里补充一下，其实你可以找到你设定的wrokspace，找到tictoc1.ned文件，直接使用你喜欢的文本编辑器打开即可。例如我喜欢VScode进行编辑。如下面两张图。<br><img src="https://i.loli.net/2019/11/09/youeAci2nCvfLFp.png" alt="66.png"><br><img src="https://i.loli.net/2019/11/09/j48z6cWFkfpZNHt.png" alt="77.png"></p><p>然后再点击Design，回到设计模式。如下图。<br><img src="https://i.loli.net/2019/11/09/8Rm2vWEDy1SawMr.png" alt="88.png"></p><h4 id="Adding-the-C-files"><a href="#Adding-the-C-files" class="headerlink" title="Adding the C++ files"></a>Adding the C++ files</h4><p>和上面一样添加NED文件时差不多，只不过这一次选择<strong>Source File</strong>。</p><p>然后输入以下代码并保存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;omnetpp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> omnetpp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Derive the Txc1 class from cSimpleModule. In the Tictoc1 network,</span></span><br><span class="line"><span class="comment"> * both the `tic' and `toc' modules are Txc1 objects, created by OMNeT++</span></span><br><span class="line"><span class="comment"> * at the beginning of the simulation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Txc1</span> :</span> <span class="keyword">public</span> cSimpleModule</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// The following redefined virtual function holds the algorithm.</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(cMessage *msg)</span> override</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The module class needs to be registered with OMNeT++</span></span><br><span class="line">Define_Module(Txc1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Txc1::initialize()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Initialize is called at the beginning of the simulation.</span></span><br><span class="line">    <span class="comment">// To bootstrap the tic-toc-tic-toc process, one of the modules needs</span></span><br><span class="line">    <span class="comment">// to send the first message. Let this be `tic'.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Am I Tic or Toc?</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"tic"</span>, getName()) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// create and send first message on gate "out". "tictocMsg" is an</span></span><br><span class="line">        <span class="comment">// arbitrary string which will be the name of the message object.</span></span><br><span class="line">        cMessage *msg = <span class="keyword">new</span> cMessage(<span class="string">"tictocMsg"</span>);</span><br><span class="line">        send(msg, <span class="string">"out"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Txc1::handleMessage(cMessage *msg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// The handleMessage() method is called whenever a message arrives</span></span><br><span class="line">    <span class="comment">// at the module. Here, we just send it to the other module, through</span></span><br><span class="line">    <span class="comment">// gate `out'. Because both `tic' and `toc' does the same, the message</span></span><br><span class="line">    <span class="comment">// will bounce between the two.</span></span><br><span class="line">    send(msg, <span class="string">"out"</span>); <span class="comment">// send out the message</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是简单说下上面的代码吧，<br>Txc1简单模块类型由C ++类Txc1表示。 Txc1类需要从OMNeT ++的cSimpleModule类继承而来，<br>并且需要使用Define_Module（）宏在OMNeT ++中进行注册。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Define_Module(Txc1);</span><br></pre></td></tr></table></figure><p>这一句如果没加就定会报错，因为这一句就是注册（register）。</p><p>从cSimpleModule重新定义了两个方法：initialize（）和handleMessage（）。<br>从英文注释里可以知道，<br>它们是从仿真内核调用的，第一个仅调用一次，第二条在消息到达模块时调用。</p><p>在initialize（）中，我们创建一个消息对象（cMessage），在gate out 中将其发送出去。 由于此门连接到另一个模块的输入门，因此在分配给NED文件中的链接的传播延迟为100ms之后，仿真内核将在handleMessage（）的参数中将此消息传递给另一个模块。</p><p>另一个模块只是将其发送回去（100毫秒延迟）。</p><p>消息（数据包，帧，作业等）和事件（计时器，超时）都是由OMNeT ++中的cMessage对象或它的子类表示。<br>在发送或安排它们之后，它们将由仿真内核保存在“scheduled events”或“future events”列表中，等到时间到了，就通过handleMessage（）将它们传递到模块中。<br>就好像一个定时器引起中断事件。</p><h4 id="Adding-omnetpp-ini"><a href="#Adding-omnetpp-ini" class="headerlink" title="Adding omnetpp.ini"></a>Adding omnetpp.ini</h4><p>为了能够运行模拟，需要创建一个omnetpp.ini文件。<br>omnetpp.ini告诉模拟程序要模拟哪个网络（因为NED文件可能包含多个网络）。</p><p>和上面添加文件差不多，File -&gt; New -&gt; Initialization file (INI) 。</p><p>到Source模式，输入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[General]</span><br><span class="line">network = Tictoc1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/09/qM6lbNQ9HWPJixC.png" alt="99.png"></p><p>做好之后，在你的工作文件夹下应该多出上图三个文件。<br>下面就可以开始进行模拟了。</p><h4 id="Launching-the-simulation-program"><a href="#Launching-the-simulation-program" class="headerlink" title="Launching the simulation program"></a>Launching the simulation program</h4><p><img src="https://i.loli.net/2019/11/09/oQLsGmIjnxuFl7c.png" alt="100.png"></p><p>如上图，右击omnetpp.ini，选择run as ，即图里箭头那里。</p><p>然后出现下图：<br><img src="https://i.loli.net/2019/11/09/yn1ZCB2wTxWg4kJ.png" alt="120.png"></p><p>点击箭头指向的播放图标，开始模拟。</p><p><strong>如你所见。</strong></p><ul><li>补充一点，操作上面模拟的时候，它可能提示你要不要切换到release模式。你选择yes就行。</li><li>在release模式下运行速度会比debug模式下快很多。</li><li>因为release下编译器没有做多余的内存越界等等检查。</li><li>在Eroneko（罗大佬）的发现下，在OpenCV项目下，如果使用release也会快很多。道理一样。</li></ul><p><strong>入门教程我就讲到这里，下面的就靠你们自己了。相信看这篇博客的你可以做得比我好很多。</strong></p><blockquote><p>好了，今天就到这里，后面有时间再更新本博客内容吧。有缘再见。</p></blockquote><h2 id="需要联系我？"><a href="#需要联系我？" class="headerlink" title="需要联系我？"></a>需要联系我？</h2><p>如果有疑问或者建议，可以发邮件至<a href="mailto:stefancharles@qq.com" target="_blank" rel="noopener">stefancharles@qq.com</a>与我交流讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Omnetpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fisher线性判决函数</title>
      <link href="/2019/11/03/fisher/"/>
      <url>/2019/11/03/fisher/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Iris Data Set（鸢尾属植物数据集）是历史较为久远的数据集，它首次出现在著名的英国统计学家和生物学家Ronald Fisher 1936年的论文《The use of multiple measurements in taxonomic problems》中，被用来介绍线性判别式分析。在这个数据集中，包括了三类不同的鸢尾属植物：Iris Setosa，Iris Versicolour，Iris Virginica。每类收集了50个样本，因此这个数据集一共包含了150个样本。</p><a id="more"></a><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>编写fisher线性判别函数，实现Iris Data Set（鸢尾属植物数据集,数据<a href="http://archive.ics.uci.edu/ml/datasets/Iris" target="_blank" rel="noopener">下载地址</a> ）的数据分类，上传源码和实现结果，语言不限。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>Fisher线性判别分析的基本思想：通过寻找一个投影方向（线性变换，线性组合），将高维问题降低到一维问题来解决，并且要求变换后的一维数据具有性质：<strong>同类样本尽可能聚集在一起，不同类样本尽可能地远。</strong></p><p>Fisher线性判别分析，是通过给定的训练数据，确定投影方向w和阈值y0，即确定线性判别函数，然后根据这个线性判别函数，对测试数据进行测试，得到测试数据的类别。</p><p>所以这里把每一组50个数据分成40个训练集和10个测试集。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>Pycharm 2019.3 EAP</li><li>Win10 1909</li><li>Python 3.7.0</li></ul><h2 id="环境搭建中遇到的问题及解决方案"><a href="#环境搭建中遇到的问题及解决方案" class="headerlink" title="环境搭建中遇到的问题及解决方案"></a>环境搭建中遇到的问题及解决方案</h2><h3 id="1-安装时报Non-zero-exit-code-1"><a href="#1-安装时报Non-zero-exit-code-1" class="headerlink" title="1.安装时报Non-zero exit code (1)"></a>1.安装时报Non-zero exit code (1)</h3><p>解决方法：因为pip版本太低。<br>cmd下执行下面命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/31/OAZ7JYa8GU3puzH.png" alt="updatepip.png"><br>这里下载较慢，推荐翻墙进行操作。</p><h3 id="2-package的安装"><a href="#2-package的安装" class="headerlink" title="2.package的安装"></a>2.package的安装</h3><ul><li>1.这里可以使用pycharm来安装和管理package。推荐换国内源。</li></ul><p><img src="https://i.loli.net/2019/10/31/l9g6UePsONidYHq.png" alt="ailiyuan.png"></p><ul><li>2.也可以使用cmd安装。</li></ul><p><img src="https://i.loli.net/2019/10/31/U1scirf8R3lpEFZ.png" alt="imprort.png"></p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>首先下载数据集。一个方法是按照Iris Data Set（鸢尾属植物数据集,数据<a href="http://archive.ics.uci.edu/ml/datasets/Iris" target="_blank" rel="noopener">下载地址</a> ）。这个下载地址下载数据。另一个比较方便的方式是，直接利用Python中的机器学习包scikit-learn直接导入该数据集，可参考<a href="https://scikit-learn.org/stable/datasets/index.html#iris-plants-dataset" target="_blank" rel="noopener">Iris Plants Database</a>，具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = load_iris()</span><br><span class="line">print(dir(data))</span><br><span class="line">print(data.DESCR)  </span><br><span class="line"></span><br><span class="line">pd.DataFrame(data=data.data, columns=data.feature_names)</span><br></pre></td></tr></table></figure><p>现在来运行一下，如下图：<br><img src="https://i.loli.net/2019/10/31/NJDzmAGv9uxgtQY.png" alt="irismain.png"></p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>从上面输出的信息可以知道，该数据集测量了所有150个样本的4个特征，分别是：</p><ul><li>sepal length（花萼长度）</li><li>sepal width（花萼宽度）</li><li>petal length（花瓣长度）</li><li>petal width（花瓣宽度）<br>以上四个特征的单位都是厘米（cm）。<br><img src="https://i.loli.net/2019/11/03/MgA91Ejk8scKiTD.gif" alt="iris_attributes.gif"></li></ul><h3 id="整体印象"><a href="#整体印象" class="headerlink" title="整体印象"></a>整体印象</h3><p>将数据用图像的形式展示出来，可以对该数据集有一个直观的整体印象。下面分别利用该数据集4个特征中的前、后两个，来描绘所有的样本点。</p><p>展示前两个特征的参考代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">data = load_iris()</span><br><span class="line"></span><br><span class="line">pd.DataFrame(data=data.data, columns=data.feature_names)</span><br><span class="line">X = data.data  </span><br><span class="line">y = data.target </span><br><span class="line">features = data.feature_names  </span><br><span class="line">targets = data.target_names  </span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line">plt.plot(X[:, <span class="number">1</span>][y == <span class="number">0</span>], X[:, <span class="number">2</span>][y == <span class="number">0</span>], <span class="string">'bs'</span>, label=targets[<span class="number">0</span>])</span><br><span class="line">plt.plot(X[:, <span class="number">1</span>][y == <span class="number">1</span>], X[:, <span class="number">2</span>][y == <span class="number">1</span>], <span class="string">'kx'</span>, label=targets[<span class="number">1</span>])</span><br><span class="line">plt.plot(X[:, <span class="number">1</span>][y == <span class="number">2</span>], X[:, <span class="number">2</span>][y == <span class="number">2</span>], <span class="string">'ro'</span>, label=targets[<span class="number">2</span>])</span><br><span class="line">plt.xlabel(features[<span class="number">1</span>])</span><br><span class="line">plt.ylabel(features[<span class="number">2</span>])</span><br><span class="line">plt.title(<span class="string">'Iris Data Set'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>结果如下图：<br><img src="https://i.loli.net/2019/11/03/8duFvYlzUVMtsQH.png" alt="Iris_1.png"></p><p>输出后两个特征的代码就不再赘述了。基本和上面一样，改动几个参数即可。</p><p>结果如下图：<br><img src="https://i.loli.net/2019/11/03/ICfDQjSRtiGMe3W.png" alt="Iris.png"></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p align="center">Iris Setosa</p><p align="center"></p><p><img src="https://i.loli.net/2019/11/03/ChFe1IdQmJtrcjb.jpg" alt="Iris_setosa.jpg"></p><p align="center">Iris Virginica</p><p align="center"></p><p><img src="https://i.loli.net/2019/11/03/wNvHeXD3pL6GTQE.jpg" alt="Iris_versicolor.jpg"></p><p align="center">Iris Versicolor</p><p align="center"></p><p><img src="https://i.loli.net/2019/11/03/npsQlZ9IvKhWJzd.jpg" alt="Iris_virginica.jpg"></p><h3 id="思路步骤"><a href="#思路步骤" class="headerlink" title="思路步骤"></a>思路步骤</h3><p><img src="https://i.loli.net/2019/11/03/ldwnQZ2Wy1KJBOD.png" alt="1.png"><br><img src="https://i.loli.net/2019/11/03/MxygSJazD3AEZFi.png" alt="2.png"></p><blockquote><p>下面按照上面图里的思路一步一步来。注意：代码片段仅供参考，实现的方法有很多,请勿直接照搬。</p></blockquote><p>输入特征数据集，类标签，类别个数</p><p>计算每类数据的均值</p><p>用于计算散度矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">class_mean</span><span class="params">(avg1,avg2,iris,class_kind)</span>:</span></span><br><span class="line">    <span class="comment"># 40个训练集,10个测试集</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        mean_1 = <span class="number">0</span></span><br><span class="line">        mean_2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(class_kind[<span class="number">0</span>]*<span class="number">50</span>,class_kind[<span class="number">0</span>]*<span class="number">50</span>+<span class="number">40</span>):</span><br><span class="line">            mean_1 = mean_1 + iris.data[j][i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(class_kind[<span class="number">1</span>]*<span class="number">50</span>,class_kind[<span class="number">1</span>]*<span class="number">50</span>+<span class="number">40</span>):</span><br><span class="line">            mean_2 = mean_2 + iris.data[j][i]</span><br><span class="line">        avg1.append(mean_1/<span class="number">40</span>)</span><br><span class="line">        avg2.append(mean_2/<span class="number">40</span>)</span><br><span class="line">    print(<span class="string">"avg_1 is "</span> + str(avg1))</span><br><span class="line">    print(<span class="string">"avg_2 is "</span> + str(avg2))</span><br></pre></td></tr></table></figure><p>计算类内散度，散度矩阵式m∗m的对称矩阵，m是特征（属性）的个数</p><p>由上面计算的类内均值</p><p>对每一类中的每条数据减去均值进行矩阵乘法（列向量乘以行向量，所得的矩阵秩为1 ）</p><p>再相加是类内散度矩阵S_W</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment"># 计算类内散度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">within_class_SW</span><span class="params">(data,label,clusters)</span>:</span></span><br><span class="line">    m = data.shape[<span class="number">1</span>]</span><br><span class="line">    S_W = np.zeros((m,m))</span><br><span class="line">    avg1 = class_mean(data,label,clusters)</span><br><span class="line">    <span class="keyword">for</span> cl ,mv <span class="keyword">in</span> zip(range(<span class="number">1</span>,clusters+<span class="number">1</span>),avg1):</span><br><span class="line">        class_sc_mat = np.zeros((m,m))</span><br><span class="line">        <span class="comment"># 对每个样本数据进行矩阵乘法 </span></span><br><span class="line">        <span class="keyword">for</span> row  <span class="keyword">in</span> data[label == cl]:</span><br><span class="line">            row ,mv =row.reshape(<span class="number">4</span>,<span class="number">1</span>),mv.reshape(<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">            class_sc_mat += (row-mv).dot((row-mv).T)</span><br><span class="line">        S_W += class_sc_mat</span><br><span class="line">    <span class="comment">#print S_W </span></span><br><span class="line">    <span class="keyword">return</span> S_W</span><br></pre></td></tr></table></figure><p>下面用于计算类间散度矩阵S_B，这里某一类的特征用改类的均值向量体现。</p><p>C个秩为1的矩阵的和，数据集中心是整体数据的中心，S_B是秩为C-1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"># 计算类间散度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">between_class_SB</span><span class="params">(data,label,clusters)</span>:</span></span><br><span class="line">    m = data.shape[<span class="number">1</span>]</span><br><span class="line">    all_mean =np.mean(data,axis = <span class="number">0</span>)</span><br><span class="line">    S_B = np.zeros((m,m))</span><br><span class="line">    avg1 = class_mean(data,label,clusters)</span><br><span class="line">    <span class="keyword">for</span> cl ,mean_vec <span class="keyword">in</span> enumerate(avg1):</span><br><span class="line">        n = data[label==cl+<span class="number">1</span>,:].shape[<span class="number">0</span>]</span><br><span class="line">        mean_vec = mean_vec.reshape(<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">        all_mean = all_mean.reshape(<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">        S_B += n * (mean_vec - all_mean).dot((mean_vec - all_mean).T)</span><br><span class="line">    <span class="comment">#print S_B </span></span><br><span class="line">    <span class="keyword">return</span> S_B</span><br></pre></td></tr></table></figure><p>求解S_W的逆矩阵，再根据逆矩阵求解u值。</p><p>再按照步骤7，8来计算m，和y_t。</p><p>最后对那10个数据进行测试。</p><p>这里以第一类和第二类进行测试为例子：</p><p><img src="https://i.loli.net/2019/11/03/JjoiHek7qfdVbSh.png" alt="1234.png"></p><h2 id="更多深度学习博客"><a href="#更多深度学习博客" class="headerlink" title="更多深度学习博客"></a>更多深度学习博客</h2><p>传送门：</p><ul><li>1.<a href="https://stefancharles.xyz/2019/11/12/mnist/">基于OpenCV的MNIST手写体SVM分类</a></li><li>2.<a href="https://stefancharles.xyz/2019/11/17/mnistinpython/">【TensorFlow】利用MNIST数字识别数据集识别</a></li><li>3.<a href="https://stefancharles.xyz/2019/11/18/mnistinkeras/">keras卷积神经网络对MNIST数据集进行操作</a></li></ul><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p>本次实验参考了很多资料和著名博主的博客内容，在此表示感谢。如果有侵权的地方，请联系我：<a href="mailto:stefancharles@qq.com" target="_blank" rel="noopener">stefancharles@qq.com</a>，我会立刻删除侵权内容。<br>以下是参考来源。</p><ul><li><p>1.本专业最强的林博主，<a href="https://lzjusc2017.github.io/" target="_blank" rel="noopener">点击这里去他的博客</a>，<a href="https://me.csdn.net/qq_40318498" target="_blank" rel="noopener">点击这里访问林博主csdn博客</a></p></li><li><p>2.CSDN某博主，<a href="https://blog.csdn.net/u012005313/article/details/50933517" target="_blank" rel="noopener">博客地址</a></p></li><li><p>3.IRIS <a href="http://archive.ics.uci.edu/ml/datasets/Iris" target="_blank" rel="noopener">数据地址</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fisher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于时间</title>
      <link href="/2019/11/01/AboutTime/"/>
      <url>/2019/11/01/AboutTime/</url>
      
        <content type="html"><![CDATA[<p>前几天看到一个大神在他的一篇博客中写道：</p><blockquote><p>距离去年的高考已经一年了，而去年的这时候，就像我在开头提及的一样，正在为高中的一些很 naïve 的事情而苦恼。才不过一年，当时所谓心中很重要的人，就已经说再见了。毕竟最后我们仍然不是一个世界的人，仍然没有机会走到一起。有时候有点想嘲笑过去的自己。</p></blockquote><p>看到他写的这句话，我突然一怔，突然意识到两年过去了，突然意识到这两年来我做错了很多，失去了很多，错过了很多……</p><a id="more"></a><h2 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h2><p>这几天去实验室的路上，总是能看到19级的新生在军训。突然意识到自己这个学期也已经是要大三的人了，粗略想想，距离2017年高考结束也已经过去两年多了。慢了一拍的我似乎还没意识到时间过去这么快。每天几乎重复的生活很能麻痹一个人的神经，闲下来的时间不敢去思考未来何去何从，也不敢让自己沉溺在过去的记忆中。所以只好找事情做，让自己忙起来，Too busy to think about now.  白天去实验室学东西，有时候去值班，晚上9点回寝室玩玩游戏看看视频放松一下。</p><p>前几天看到的一篇博客有很大感触，就想着什么时候为过去做个<strong>关于时间</strong>的总结吧。因为随着时间的推移，我明白了很多事情如果不及时记录下来，这些记忆自己会渐渐模糊，甚至将会有一天我们自己都记不清那些我们自己作为主角的故事了。</p><h2 id="两年前"><a href="#两年前" class="headerlink" title="两年前"></a>两年前</h2><p>时间倒回到两年前，刚刚步入大学的我，有期待，有遗憾，有失落，有后悔。</p><p>期待的是大学生活，高中老师对于大学的美好描绘，是我们那个天天被题目淹没的时候我们不断努力的动力之一。高中老师以前向我们描绘着“远处杨梅”，我们听了以后，个个对着远方的杨梅垂涎欲滴，短暂的做梦后手里的笔又握的更紧，字写得更快，心中暗暗想着，熬过这段时间就好了。</p><p>站在我现在这个时间节点，如果说我非得评论一下当初想象的杨梅甜不甜美，我的答案将会是“不是那么甜美，甚至还有苦味”。要我说，这个答案到底如何还是看个人吧。大学生活精不精彩，除了外界因素，自己也是一个重要的主导方面。</p><p>遗憾失落的事情无非就是高考的那一次没有考出我平时的状态和水平吧。摆在那个时候的我的面前有两个选择，一个是重新再读一年高三，再考一次高考；另一个选择是接受当前的现实。几番权衡之后，我选择了后者，而和我一样遭遇滑铁卢的朋友，甚至差不多可以说和我面对差不多处境选择的朋友，他选择了前者。不同的选择将会有不同的结果，或者说也会有一些事情并不受这些选择的影响。那个时候的我们，谁也不知道未来会发生什么，只能做好当前的选择，等待结果的到来。如果有机会的话，我后面再详细写写关于他的故事。</p><p>后悔的事情大致就是高二和高三被很多事情分神。</p><p>两年前的我，还不知道未来将会有什么等着我，我也希望能是好的事情即将发生，然而不幸的是，后来很多一连串的事情就如暴风雨一般接二连三地敲打着巨浪之中的破旧船只。</p><p>两年前也就是我大一，估计是我高考成绩太差，本来填的计算机专业结果被调剂到了土木工程学院，差点我又想着回去再读一年了。后来想到过一个学期可以转专业，我就打消了那个念头。</p><p>而我也没想到这只是错位的开始。</p><p>在土木道桥待了一个学期后，差不多到期末了我准备去申请转专业，这过去的一个学期里没有挂过科，成绩都还算靠前，应该符合转专业的规定吧。然而令我始料不及的是，土木学院规定所有人大一上学期都不准转出去，我就觉得这有点离谱。无奈我只是一个17新生，也没什么其他<em>特殊手段</em>，只得服从安排。</p><p>这也就意味着，我只有大二才有机会转出去。</p><blockquote><p>后面有时间再更….</p></blockquote><h2 id="2019-10-19-更"><a href="#2019-10-19-更" class="headerlink" title="2019/10/19 更"></a>2019/10/19 更</h2><p>2019/10/12，距离上次去长沙已经过去十个多月，因为参加比赛，又一次来到这座熟悉又陌生的城市，心中其实感慨很多。本想着13号回来的那天写下心中的所想，谁想到回来的路上感冒了，到今天感觉好很多，所以闲下来写点东西。</p><p>12号下午我们一行人提着参赛设备来到火车站广场，这里和我记忆里的没有多大变化，广场有的行人匆匆，有的人坐在花坛旁，有的人在出站口，似乎着急等待着某个人。进站口有一些小贩幺和着卖东西。进站口的两段楼梯，楼梯尽头的玻璃门像一根刺刺进我心里。</p><p>十个月零十九天前的这个时候，刺骨的雨雪肆虐着广场的每一个行人，我只带了一把伞，背了一个包，包里放着这几年来我往返两地的火车票，做成纪念册，却没有机会填满整本纪念册，也没有机会在最重要的那天送给重要的人。去车站的路上我们十分有默契地一句话也没说，到了车站，我撑开雨伞，走过两段楼梯，到了尽头的玻璃门前，我们不约而同准备开口准备说话，</p><p>她说：你先说。</p><p>我从背包里慢慢小心地拿出纪念册，递给了她，想说点什么却又不知道怎么开始。</p><p><img src="https://i.loli.net/2019/10/20/svqQe2LZfzmh7wU.jpg" alt="IMG_20180618_153815.jpg"></p><p>她也从包里拿出一本线圈的本子。一直没说话的她，这个时候欲言又止。</p><p>我低着头，没敢直视她，只听到她似乎抽泣了一下，只说了一句声音很低的话，“抱一下吧”，听到这句话，我强忍着眼泪。在我们最后利落干脆的拥抱中，她对我说了一句“好好照顾自己”，我似乎还在挣扎，对她说了一句“回来好不好”。她没有回答，拿着东西回头走进玻璃门里面。透过玻璃门，看着她的背影进入候车厅越走越远，我异常冷静，直到我看不见了，我的视线渐渐模糊，我一转身，撑开伞，想起随手翻翻手中的线圈本，才发现一些页面有字，“最近天气变冷了，记得多加衣服。”，再也掩饰不了，眼眶模糊到再也看不清楚字迹…</p><p><img src="https://i.loli.net/2019/10/20/zTiQufg6BtNlCxr.jpg" alt="1122.jpg"></p><p>我回来神来，轻声叹息，提着设备大步向楼梯走去。</p><p>两地的车站承载了我太多的记忆，有过很多期待，有过很多不舍，现在最多的却是遗憾。我曾在刺骨寒夜中跨越人山人海，只为见到期待的人，一起去进行我计划中期待的旅行，我曾一人孤独在烈日下踏上归途，无人问津。我曾有一个理由跋山涉水，跨越险阻，现在这些都是过去，都是记忆。十个月，差不多一年，感觉久远，但又十分清晰，恍如昨日。</p><p>2019/10/12晚饭后，我一个人先去了楼上房间，准备打开电脑再复习一遍项目代码。</p><p><img src="https://i.loli.net/2019/10/20/jVGd4LRawgySE7o.jpg" alt="2233.jpg"></p><p>房间正好面对着马路，窗外的车鸣声、人声混杂在一起。这座城市还是一样的繁华。看着窗外车来车往我有些莫名失落。</p><p>我打开地图，看了我现在的位置，我在湘江的东边。想来今天是星期六，此时她应该在宿舍吧，那就是正好在湘江的西边。一个荒诞的假设跳进了我的脑中：假如我们还没有分开的话，她会来我现在这里吗？比赛完后还可以在林业大学–一个我们都不熟悉的大学转转。</p><p>我笑了笑自己的愚蠢。</p><p>一想到13号就要正式比赛了，其实心里很紧张。可能是因为为了这次比赛我们准备了暑假一大段时间吧。大概是我不想辜负老师，同学以及自己吧。</p><p>此时的时间似乎过得很快，很快就晚上十一、十二点了。躺下后还是久久不能入睡。时间似乎又变得很慢。</p><p>终于熬到第二天早上，我们七点就下楼，随意吃点早餐后准备出发去比赛的场地了。来的时候没想到会这么冷，只是穿了一件衣服的我有些后悔没有带件外套来。</p><p>这次比赛出乎意外的简单。出了比赛场地后，一个悬着的心终于放下。心情也轻松了很多。</p><p>13号下午，我们一行人准备回学校了。不幸的是，路上出了汗后吹了冷风，我不出意外地感冒了。</p><p>在回去的路上，途经海立方海洋公园。</p><p>那时八月烈阳当空，赶在开学前的几天去的那里。</p><p><img src="https://i.loli.net/2019/11/01/EeWPfHqdLl3jrOu.png" alt="20191101210016.png"></p><p>微冷的风迎着面吹来，把我拉回了现实。曾去过眼前的风景，过去与现实交织在一起，有那么一瞬间我忘记了所有。</p><p>回学校后感冒了几天。</p><h2 id="2019-11-1-更"><a href="#2019-11-1-更" class="headerlink" title="2019/11/1 更"></a>2019/11/1 更</h2><p>今天下午，支付宝突然来了一个通知。点开后，只是过去。</p><p><img src="https://i.loli.net/2019/11/01/cwzRxGabsqdom2u.jpg" alt="23456.jpg"></p><p>Memories are hunting me in some differents ways. </p><blockquote><p>后会有期 ，本文随缘更新</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【Zigbee】温湿度采集实验</title>
      <link href="/2019/10/27/getTemperature/"/>
      <url>/2019/10/27/getTemperature/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近学习通上老师布置温湿度采集实验作业的实验。实验过程中，在不同的开发板上烧录同一份代码最后结果不一样，有的甚至通过串口助手返回的是乱码。所以建立本博客，记录问题。</p><a id="more"></a><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p> 温湿度采集实验（可以采集芯片内温感器也可以是芯片外的DHT11的温湿度传感器的数据，然后通过串口送出来，通过串口助手可以看到采集到数据）</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>IAR v10.30.1</li><li>Win10 1903</li><li>串口调试助手 v4.13.3</li></ul><h2 id="ADC温度代码"><a href="#ADC温度代码" class="headerlink" title="ADC温度代码"></a>ADC温度代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ioCC2530.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initUART0</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Send_String</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *Data, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">getTemperature</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> str1[<span class="number">40</span>]=<span class="string">"Please wait for a moment"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> AvgTemp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">* 函数名  :initUART0(void)</span></span><br><span class="line"><span class="comment">* 函数功能:初始化串口0函数</span></span><br><span class="line"><span class="comment">* 输入    : void</span></span><br><span class="line"><span class="comment">* 输出    : 无</span></span><br><span class="line"><span class="comment">********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initUART0</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLKCONCMD &amp;= ~<span class="number">0x40</span>;<span class="comment">//设置系统时钟源32MHz晶振</span></span><br><span class="line">    <span class="keyword">while</span>(CLKCONSTA&amp;<span class="number">0x40</span>);<span class="comment">//等待晶振稳定</span></span><br><span class="line">    CLKCONCMD&amp;=~<span class="number">0x47</span>;<span class="comment">//设置系统主时钟频率32MHz</span></span><br><span class="line"></span><br><span class="line">    PERCFG= <span class="number">0x00</span>;<span class="comment">//位置1P0口</span></span><br><span class="line">    P0SEL=<span class="number">0x3C</span>;<span class="comment">//P0口是串口</span></span><br><span class="line">    P2DIR&amp;=~<span class="number">0xC0</span>;<span class="comment">//P0优先作为UART0</span></span><br><span class="line">    U0CSR|=<span class="number">0x80</span>;<span class="comment">//串口设置为UART方式</span></span><br><span class="line">    U0GCR|=<span class="number">9</span>;</span><br><span class="line">    U0BAUD|=<span class="number">59</span>;<span class="comment">//波特率19200</span></span><br><span class="line">    UTX0IF=<span class="number">1</span>;<span class="comment">//UART0 TX中断标志初始为1</span></span><br><span class="line">    U0CSR|=<span class="number">0x40</span>;<span class="comment">//允许接受</span></span><br><span class="line">    IEN0|=<span class="number">0x84</span>;<span class="comment">//开总中断，接受中断</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">* 函数名  : getTemperature(void)</span></span><br><span class="line"><span class="comment">* 函数功能:获取片内温度</span></span><br><span class="line"><span class="comment">* 输入    : void</span></span><br><span class="line"><span class="comment">* 输出    : unsigned int </span></span><br><span class="line"><span class="comment">********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">getTemperature</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> i;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> AdcValue;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ADCCON3|=<span class="number">0x3E</span>;</span><br><span class="line">        ADCCON1|=<span class="number">0x40</span>;<span class="comment">//使用1.25V内部电压</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!(ADCCON1&amp;<span class="number">0x80</span>));</span><br><span class="line">        value=ADCL&gt;&gt;<span class="number">2</span>;</span><br><span class="line">        value|=((<span class="keyword">unsigned</span> <span class="keyword">int</span> )ADCH&lt;&lt;<span class="number">6</span>);</span><br><span class="line">        AdcValue+=value;   </span><br><span class="line">    &#125;</span><br><span class="line">    value=AdcValue&gt;&gt;<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> value*<span class="number">0.0629</span><span class="number">-303.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">* 函数名  :Send_String(unsigned char *Data, int len)</span></span><br><span class="line"><span class="comment">* 函数功能:串口发送字符串函数</span></span><br><span class="line"><span class="comment">* 输入    : void</span></span><br><span class="line"><span class="comment">* 输出    : 无</span></span><br><span class="line"><span class="comment">********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Send_String</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *Data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        U0DBUF=*Data++;</span><br><span class="line">        <span class="keyword">while</span> (UTX0IF==<span class="number">0</span>);</span><br><span class="line">        UTX0IF=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">* 函数名  :MAIN</span></span><br><span class="line"><span class="comment">* 函数功能:主函数</span></span><br><span class="line"><span class="comment">* 输入    : void</span></span><br><span class="line"><span class="comment">* 输出    : 无</span></span><br><span class="line"><span class="comment">********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P1DIR=<span class="number">0x03</span>;<span class="comment">//LED开</span></span><br><span class="line">    initUART0();</span><br><span class="line">    Send_String(str1,<span class="number">40</span>);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> strtemp[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    AvgTemp=<span class="number">0</span>;</span><br><span class="line">    AvgTemp=getTemperature();</span><br><span class="line">    strtemp[<span class="number">0</span>]=( <span class="keyword">unsigned</span> <span class="keyword">char</span> )AvgTemp/<span class="number">10</span>+<span class="number">0x30</span>;</span><br><span class="line">    strtemp[<span class="number">1</span>]=( <span class="keyword">unsigned</span> <span class="keyword">char</span> )AvgTemp%<span class="number">10</span>+<span class="number">0x30</span>;</span><br><span class="line"></span><br><span class="line">    strtemp[<span class="number">2</span>]=<span class="string">'\0'</span>;</span><br><span class="line">    </span><br><span class="line">    Send_String(strtemp,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> vector=URX0_VECTOR</span></span><br><span class="line">__<span class="function">interrupt <span class="keyword">void</span> <span class="title">UART0_ISR</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    URX0IF=<span class="number">0</span>;<span class="comment">//清中断标志</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>getTemperature()这个函数是本次的重点。<br>ADCCON3|=0x3E;<br><img src="https://i.loli.net/2019/10/27/WBLw1tiHIZqeC9Q.png" alt="123456.png"><br>0011 1110：使用内部参考电压，12位分辨率，片内温度传感器<br><img src="https://i.loli.net/2019/10/27/e6iEjsa75dzApB8.png" alt="111.png"><br>ADCCON1|=0x40;<br>0100 0000：启动AD转化<br>while (!(ADCCON1&amp;0x80))：等待 AD 转换完成。<br>value=ADCL&gt;&gt;2;<br>value|=((unsigned int )ADCH&lt;&lt;6);<br><img src="https://i.loli.net/2019/10/27/pW6CDKFLecJZS8f.png" alt="666666.png"><br>ADCL寄存器低两位无效。For循环4次累加后再求平均值。</p><h2 id="烧录代码"><a href="#烧录代码" class="headerlink" title="烧录代码"></a>烧录代码</h2><p><img src="https://i.loli.net/2019/10/27/w4pGVZQbvOX9Hxm.png" alt="temp.png"></p><p>后面的17是得出的温度数值。单位摄氏度。</p><h2 id="待解决的问题"><a href="#待解决的问题" class="headerlink" title="待解决的问题"></a>待解决的问题</h2><p>用同一个代码在不同的开发板上进行烧录测试时结果会不同。甚至有的串口助手里还返回了乱码。return value*0.0629-303.3;这里公式是参考教材上的，但是不知道如何的来的，也不知道正确性。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>关于温度计算公式，大致是AD值与温度之间有个函数关系。这里可以参考TI公司的文档。</p><p><a href="http://www.ti.com/lit/an/swra101a/swra101a.pdf" target="_blank" rel="noopener">点击这里访问文档</a></p><p>后面再试试用芯片外的DHT11的温湿度传感器。</p><h2 id="DHT11温湿度传感器"><a href="#DHT11温湿度传感器" class="headerlink" title="DHT11温湿度传感器"></a>DHT11温湿度传感器</h2><h3 id="DHT11的工作原理"><a href="#DHT11的工作原理" class="headerlink" title="DHT11的工作原理"></a>DHT11的工作原理</h3><p>DHT11使用单一总线通信，DATA引脚和开发板单一相连接。<br><img src="https://i.loli.net/2019/10/30/QvkWZ1RECj8zfPd.png" alt="213.png"><br>如图所示，这是我所用的开发板原理图。DATA引脚在P0口的第4位。<br>其总线总处于<strong>通信状态</strong>或者<strong>空闲状态</strong>。</p><ul><li>当开发板没有和DHT11进行通信时，总线处于空闲状态，在上拉电阻的作用下，处于高电平状态；</li><li>当开发板和DHT11正在通信时，总线处于通信状态</li></ul><p>一次完整的通信过程如下：</p><ul><li>1.开发板把驱动总线IO配置为输出模式，准备向DHT11发送数据。</li><li>2.开发板将总线拉低至少18ms，以此来发送起始信号。再将总线拉高并延时20~40us，以此来代表起始信号结束。</li><li>3.开发板将驱动总线的IO配置为输入模式，准备接收DHT11回传的数据。</li><li>4.当DHT11检测倒单片机发送的起始信号后，就开始应答，回传采集到的传感器数据。DHT11先将总线拉低80us作为对单片机的应答（ACK），然后接着将总线拉高80us，准备回传采集到的温湿度数据。温湿度数据以固定的帧格式发送。</li><li>5.当一帧数据传输完成后，DHT11释放总线，总线在上拉电阻的作用下再次恢复到高电平状态。 </li></ul><p>固定的帧格式格式如下图：<br><img src="https://i.loli.net/2019/10/30/rXoIancwhDtJfHL.png" alt="123.png"></p><p>总过程如下图：<br><img src="https://i.loli.net/2019/10/30/Kq7z2HsDxMnS4li.png" alt="666.png"></p><p>可以发现一帧为40个bit，而每一个bit的传输时序逻辑为：每一个bit都以50us的低电平（DHT11将总线拉低）为先导，然后紧接着DHT11拉高总线，如果这个高电平持续时间为26~28us，则代表逻辑0，如果持续70us则代表逻辑1。</p><h3 id="关于DHT11需要注意"><a href="#关于DHT11需要注意" class="headerlink" title="关于DHT11需要注意"></a>关于DHT11需要注意</h3><ul><li>1.DHT11上电后，要等待 1秒 以越过不稳定状态，在此期间不能发送任何指令。</li><li>2.DHT11属于低速传感器，两次通信请求之间的间隔时间不能太短，一般来说要不能低于1秒。</li><li>3.当前DHT11通信帧的小数部分默认都是0，厂商预留给以后实现。所以一般只读取整数值部分即可。校验和定义为：前4个Byte的总和的低8位。</li></ul><h2 id="DHT11实现代码"><a href="#DHT11实现代码" class="headerlink" title="DHT11实现代码"></a>DHT11实现代码</h2><blockquote><p>后面有时间再更新，目前我需要跟上opencv进度</p></blockquote><h2 id="需要联系我？"><a href="#需要联系我？" class="headerlink" title="需要联系我？"></a>需要联系我？</h2><p>请发邮件</p><p>我的邮箱：<a href="mailto:stefancharles@vip.qq.com" target="_blank" rel="noopener">stefancharles@vip.qq.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zigbee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Zigbee】串口收发实验</title>
      <link href="/2019/10/26/UART/"/>
      <url>/2019/10/26/UART/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近学习通上老师布置串口收发作业的实验。与51单片机不同的是，2530配置串口稍微麻烦一些。所以记录下来。</p><a id="more"></a><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>串口收发实验（从串口助手发送一个字符或者一个字符串到开发板，开发板又将收到的字符或者字符串回送到串口助手上）</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>IAR v10.30.1</li><li>Win10 1903</li><li>串口调试助手 v4.13.3</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ioCC2530.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initUART0</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Send_String</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *Data, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> str1[<span class="number">45</span>]=<span class="string">"Please send a string with a '#' in the end"</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> Recdata[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> RXTXflag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> temp;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> datanumber=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> stringlen;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">* 函数名  :initUART0(void)</span></span><br><span class="line"><span class="comment">* 函数功能:初始化串口0函数</span></span><br><span class="line"><span class="comment">* 输入    : void</span></span><br><span class="line"><span class="comment">* 输出    : 无</span></span><br><span class="line"><span class="comment">********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initUART0</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CLKCONCMD &amp;= ~<span class="number">0x40</span>;<span class="comment">//设置系统时钟源32MHz晶振</span></span><br><span class="line">    <span class="keyword">while</span>(CLKCONSTA&amp;<span class="number">0x40</span>);<span class="comment">//等待晶振稳定</span></span><br><span class="line">    CLKCONCMD&amp;=~<span class="number">0x47</span>;<span class="comment">//设置系统主时钟频率32MHz</span></span><br><span class="line"></span><br><span class="line">    PERCFG= <span class="number">0x00</span>;<span class="comment">//位置1P0口</span></span><br><span class="line">    P0SEL=<span class="number">0x3C</span>;<span class="comment">//P0口是串口</span></span><br><span class="line">    P2DIR&amp;=~<span class="number">0xC0</span>;<span class="comment">//P0优先作为UART0</span></span><br><span class="line">    U0CSR|=<span class="number">0x80</span>;<span class="comment">//串口设置为UART方式</span></span><br><span class="line">    U0GCR|=<span class="number">9</span>;</span><br><span class="line">    U0BAUD|=<span class="number">59</span>;<span class="comment">//波特率19200</span></span><br><span class="line">    UTX0IF=<span class="number">1</span>;<span class="comment">//UART0 TX中断标志初始为1</span></span><br><span class="line">    U0CSR|=<span class="number">0x40</span>;<span class="comment">//允许接受</span></span><br><span class="line">    IEN0|=<span class="number">0x84</span>;<span class="comment">//开总中断，接受中断</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">* 函数名  :Send_String(unsigned char *Data, int len)</span></span><br><span class="line"><span class="comment">* 函数功能:串口发送字符串函数</span></span><br><span class="line"><span class="comment">* 输入    : void</span></span><br><span class="line"><span class="comment">* 输出    : 无</span></span><br><span class="line"><span class="comment">********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Send_String</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *Data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        U0DBUF=*Data++;</span><br><span class="line">        <span class="keyword">while</span> (UTX0IF==<span class="number">0</span>);</span><br><span class="line">        UTX0IF=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">* 函数名  :MAIN</span></span><br><span class="line"><span class="comment">* 函数功能:主函数</span></span><br><span class="line"><span class="comment">* 输入    : void</span></span><br><span class="line"><span class="comment">* 输出    : 无</span></span><br><span class="line"><span class="comment">********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P1DIR=<span class="number">0x03</span>;<span class="comment">//LED开</span></span><br><span class="line">    initUART0();</span><br><span class="line">    Send_String(str1,<span class="number">45</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (RXTXflag==<span class="number">1</span>)<span class="comment">//接受状态</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((temp!=<span class="string">'#'</span>)&amp;&amp;(datanumber&lt;<span class="number">25</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    Recdata[datanumber++]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    RXTXflag=<span class="number">3</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                temp=<span class="number">0</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (RXTXflag==<span class="number">3</span>)<span class="comment">//发送状态</span></span><br><span class="line">        &#123;</span><br><span class="line">            U0CSR&amp;=~<span class="number">0x40</span>;<span class="comment">//关闭接受</span></span><br><span class="line">            Send_String(Recdata,datanumber);</span><br><span class="line">            U0CSR|=<span class="number">0x40</span>;<span class="comment">//开接收</span></span><br><span class="line">            RXTXflag=<span class="number">1</span>;<span class="comment">//接收状态</span></span><br><span class="line">            datanumber=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">* Stefan </span></span><br><span class="line"><span class="comment">********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> vector=URX0_VECTOR</span></span><br><span class="line">__<span class="function">interrupt <span class="keyword">void</span> <span class="title">UART0_ISR</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    URX0IF=<span class="number">0</span>;<span class="comment">//清中断标志</span></span><br><span class="line">    temp=U0DBUF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>首先看硬件原理图：<br> <img src="https://i.loli.net/2019/10/26/Of59xolUBsdSzpw.png" alt="1.png"><br>确定串口在P0口。<br>把初始化都封装在void initUART0(void)函数中，主要看下其中需要初始化哪些寄存器和如何初始化。<br>先在芯片资料手册中找到关于CLKCONCMD的详细说明如下图：<br> <img src="https://i.loli.net/2019/10/26/DHybsL8kcxG6wzl.png" alt="2.png"><br>一共8位，0-2位这三位用于设置Clock speed，也就是时钟速度。3-5位用于设置定时器输出配置。这两个各占据三位，也就是各有8种配置可以选择。6bit位用于设置系统时钟频率，7bit位设置32kHZ时钟源的选择，其中xosc是指外部的晶振给系统提供clock，rcosc是指单片机内部的RC震荡电路提供系统clock。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CLKCONCMD &amp;= ~<span class="number">0x40</span>;<span class="comment">//设置系统时钟源32MHz晶振</span></span><br><span class="line"><span class="keyword">while</span>(CLKCONSTA&amp;<span class="number">0x40</span>);<span class="comment">//等待晶振稳定</span></span><br><span class="line">CLKCONCMD&amp;=~<span class="number">0x47</span>;<span class="comment">//设置系统主时钟频率32MHz</span></span><br></pre></td></tr></table></figure><p> <img src="https://i.loli.net/2019/10/26/ZR9tYcib7Aly5XB.png" alt="3.png"><br>然后按照说明取相应的值，使用&amp;=是为了不改变CLKCONCMD的其他位。<br>下面再看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PERCFG= <span class="number">0x00</span>;<span class="comment">//位置1P0口</span></span><br><span class="line">P0SEL=<span class="number">0x3C</span>;<span class="comment">//P0口是串口</span></span><br><span class="line">P2DIR&amp;=~<span class="number">0xC0</span>;<span class="comment">//P0优先作为UART0</span></span><br><span class="line">U0CSR|=<span class="number">0x80</span>;<span class="comment">//串口设置为UART方式</span></span><br><span class="line">U0GCR|=<span class="number">9</span>;</span><br><span class="line">U0BAUD|=<span class="number">59</span>;<span class="comment">//波特率19200</span></span><br></pre></td></tr></table></figure><p>在前面的LED实验中，当这些IO引脚用作通用IO时，需要设置对应的PxSEL位为0。这里我们串口需要实现片内外设IO功能，所以需要设置对应的PxSEL为1。<br> <img src="https://i.loli.net/2019/10/26/JeiM56dG8q2ELrP.png" alt="4.png"><br>PERCFG寄存器用于设置定时器和USART使用位置1还是备用位置2。<br>这里结合硬件电路图设置PERCFG，USART 0使用位置1，P0_2 ,P0_3口<br> <img src="https://i.loli.net/2019/10/26/xj4cLTOdDerkJ9V.png" alt="5.png"><br>结合引脚映射表格所以设置PERCFG= 0x00。<br>从硬件原理图可以看出，有些I/O位置是重叠的，可以通过寄存器P2SEL和P2DIR来设置优先级，选择端口2引脚的I/O功能（通用I/O还是外设I/O）和方向（作为输入还是输出）。<br> <img src="https://i.loli.net/2019/10/26/TJCfApar1t4bPH5.png" alt="6.png"><br>根据上面这个图设置P0优先作为UART0。<br> <img src="https://i.loli.net/2019/10/26/Fl8kSxIVcCHeZBL.png" alt="7.png"><br>串口USART0和USART1均有两种模式：异步UART模式和同步SPI模式。根据上图设置相应的位。<br>下面设置串行通信接口寄存器波特率<br> <img src="https://i.loli.net/2019/10/26/I9kpg6MQ7hEO1ma.png" alt="11.png"><br> <img src="https://i.loli.net/2019/10/26/Pi43MsApqfvjWzw.png" alt="22.png"><br> <img src="https://i.loli.net/2019/10/26/Vy67tvPxJgb81Fh.png" alt="33.png"><br>U0GCR|=9; U0BAUD|=59;<br>对照上面的图不难设置波特率为19200。</p><h2 id="烧录代码"><a href="#烧录代码" class="headerlink" title="烧录代码"></a>烧录代码</h2><p><img src="https://i.loli.net/2019/10/26/4e7SJAqCtRuH2UV.png" alt="123.png"><br>这里我打开串口助手。<br>可以看到串口助手收到了来自板子的传递来的字符串。<br>然后我们发送字符串给板子。<br>我打算发送I can see you#。<br>以#代表结尾。<br><img src="https://i.loli.net/2019/10/26/W4vzBo6LwaQcrE9.png" alt="234.png"><br>可以看到的是，这里收到了来自开发板的回复。<br>至此，开发板又将收到的字符或者字符串回送到串口助手上。实验完成。</p><h2 id="需要联系我？"><a href="#需要联系我？" class="headerlink" title="需要联系我？"></a>需要联系我？</h2><p>请发邮件</p><p>我的邮箱：<a href="mailto:stefancharles@vip.qq.com" target="_blank" rel="noopener">stefancharles@vip.qq.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zigbee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV形态学操作</title>
      <link href="/2019/10/08/morphology/"/>
      <url>/2019/10/08/morphology/</url>
      
        <content type="html"><![CDATA[<h2 id="形态学概述"><a href="#形态学概述" class="headerlink" title="形态学概述"></a>形态学概述</h2><p>在图像处理技术中，有一些的操作会对图像的形态发生改变，这些操作一般称之为形态学操作。形态学<strong>操作的对象是二值化图像</strong>。<br>有名的形态学操作中包括腐蚀，膨胀，开操作，闭操作等。其中腐蚀，膨胀是许多形态学操作的基础。</p><a id="more"></a><h2 id="腐蚀和膨胀"><a href="#腐蚀和膨胀" class="headerlink" title="腐蚀和膨胀"></a>腐蚀和膨胀</h2><p>腐蚀和膨胀能实现的功能：</p><ul><li>消除噪声</li><li>分割(isolate)出独立的图像元素，在图像中连接(join)相邻的元素。</li><li>寻找图像中的明显的极大值区域或极限值区域。</li><li>求图像的梯度</li></ul><blockquote><p>注意：腐蚀和膨胀是对高亮部分而言的，也就是白色的区域。不是黑色区域。膨胀是对高亮部分进行膨胀。腐蚀是对高亮部分进行腐蚀。</p></blockquote><h2 id="开运算"><a href="#开运算" class="headerlink" title="开运算"></a>开运算</h2><p>开运算就是对图像<strong>先腐蚀，再膨胀</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = open(src , element) = dilate(erode(src, element))</span><br></pre></td></tr></table></figure><p>开运算可以用来消除小物体，在纤细点处分离物体，并且在平滑较大物体的边界的同时不明显改变其面积。</p><h2 id="闭运算"><a href="#闭运算" class="headerlink" title="闭运算"></a>闭运算</h2><p>闭操作就是对图像<strong>先膨胀，再腐蚀</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dst = close(src , element) = erode(dilate(src, element))</span><br></pre></td></tr></table></figure><p>闭运算可以排除小型黑色区域。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用MVP架构对Android课程表重构</title>
      <link href="/2019/10/03/projects/ClassSchedule/"/>
      <url>/2019/10/03/projects/ClassSchedule/</url>
      
        <content type="html"><![CDATA[<h2 id="应用MVP架构对Android课程表重构"><a href="#应用MVP架构对Android课程表重构" class="headerlink" title="应用MVP架构对Android课程表重构"></a>应用MVP架构对Android课程表重构</h2><p>最初的课程表是由<a href="https://me.csdn.net/qq_40318498" target="_blank" rel="noopener">林博主</a>开发而成。但是代码冗余的部分很多，UI也不够现代化。所以现在我应用MVP架构对课程表软件进行重构。另外使用Material Design重新设计UI。</p><p>文中若有不正确的地方，还请多多指教。</p><a id="more"></a><h2 id="1-MVP分别指什么？"><a href="#1-MVP分别指什么？" class="headerlink" title="1.MVP分别指什么？"></a>1.MVP分别指什么？</h2><p>对于一个应用而言我们需要对它抽象出各个层面，而在MVP架构中它将UI界面和数据进行隔离，所以我们的应用也就分为三个层次。</p><ul><li><p>M：M层，也就是我们在程序中经常出现的model层，他的功能就是处理数据，其他任务不由他来接手。区别于MVC架构中的Model，在这里不仅仅只是数据模型。在MVP架构中Model它负责对数据的存取操作，例如对数据库的读写，网络的数据的请求等。在Android开发中通常将Activity或者Fragment作为View层。</p></li><li><p>V：V层，我们的view层，也就是显示数据的地方，我们在得到数据之后，把数据传递给view层，通过他来显示数据。同时，view层的点击事件等处理会在这里出现，但真正的数据处理不是在这里，而是在model层中处理。</p></li><li><p>P：P层，也就是Presenter层，他是我们mvp架构中的中间人，通过p层的连接，让我们可以让M层和V层进行通信。M层在获取到数据之后，把它交给P，P层在交给View层，同样，View层的点击事件等处理通过P层去通知M层，让他去进行数据处理。</p></li></ul><p>这里我用一个图来大致说明MVP三者之间的关系。<br><img src="https://i.loli.net/2019/10/03/5FAaPTpcMKGYjg8.png" alt="123.png"></p><p>在Presenter层它会从Model层获得所需要的数据，进行一些适当的处理后交由View层进行显示。这样通过Presenter将View与Model进行隔离，使得View和Model之间不存在耦合，同时也将业务逻辑从View中抽离。</p><p>用一位博主的比较专业的话来说：</p><blockquote><p>在MVP架构中将这三层分别抽象到各自的接口当中。通过接口将层次之间进行隔离，而Presenter对View和Model的相互依赖也是依赖于各自的接口。这点符合了接口隔离原则，也正是面向接口编程。在Presenter层中包含了一个View接口，并且依赖于Model接口，从而将Model层与View层联系在一起。而对于View层会持有一个Presenter成员变量并且只保留对Presenter接口的调用，具体业务逻辑全部交由Presenter接口实现类中处理。</p></blockquote><h2 id="2-总体结构"><a href="#2-总体结构" class="headerlink" title="2.总体结构"></a>2.总体结构</h2><p><img src="https://i.loli.net/2019/10/03/7yZurRdIMEFpb2a.png" alt="Snipaste_2019-10-03_16-13-38.png"></p><p>1.我们把课程表的数据，数据库的读写，网络的请求操作放在data包内。这里就算是Model层。</p><p>2.utils下面放置一些本项目使用的工具类。</p><p>3.在最外层存放了两个接口，即BasePresenter和BaseView。它们是Presenter层接口和View层接口的基类，项目中所有的Presenter接口和View层接口都继承自这两个接口。</p><p>BasePresenter:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stefan.classscheduleforusc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在BasePresenter中只存在一个start方法和onDestroy方法。start方法一般所执行的任务是在Presenter中从Model层获取数据，并调用View接口显示。start这个方法一般是在Fragment中的onResume方法中调用。onDestroy方法用来remove 一个activity。</p><p>BaseView:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stefan.classscheduleforusc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(T presenter)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在BaseView中只有一个setPresenter方法，对于View层会存在一个Presenter对象。而setPresenter正是对View中的Presenter进行初始化。</p><p>4.在mvp这个包中，我们存放主要的功能模块，内部结构如图：<br><img src="https://i.loli.net/2019/10/03/8sn9KJNmtaYLBjQ.png" alt="Snipaste_2019-10-03_16-46-09.png"></p><p>在每个功能模块下面将类分作xxActivity,xxFragment,xxPresenter,xxContract等。也正是这些类构成了项目中的Presenter层与View层。</p><h2 id="3-Contract：契约类"><a href="#3-Contract：契约类" class="headerlink" title="3.Contract：契约类"></a>3.Contract：契约类</h2><p><strong>Contract</strong>：契约类，一个功能模块中View接口、Model接口和请求数据回调统一在对应模块的Contract中定义，便于管理。</p><p>我们以导入课程表这一功能为例子：</p><p>其ImptContract代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stefan.classscheduleforusc.mvp.impt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.stefan.classscheduleforusc.BasePresenter;</span><br><span class="line"><span class="keyword">import</span> com.stefan.classscheduleforusc.BaseView;</span><br><span class="line"><span class="keyword">import</span> com.stefan.classscheduleforusc.data.bean.CourseTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by stefan on 2019/10/03.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImptContract</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">importCustomCourses</span><span class="params">(String courseTime, String term)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">importDefaultCourses</span><span class="params">(String courseTime, String term)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">loadCourseTimeAndTerm</span><span class="params">(String xh, String pwd, String captcha)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">getCaptcha</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function">ImageView <span class="title">getCaptchaIV</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showImpting</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">hideImpting</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">captchaIsLoading</span><span class="params">(<span class="keyword">boolean</span> isLoading)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showErrToast</span><span class="params">(String errMsg, <span class="keyword">boolean</span> reLoad)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showSucceed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showCourseTimeDialog</span><span class="params">(CourseTime times)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">getCaptcha</span><span class="params">(ImageView iv)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里将Presenter中的接口和View的接口都放在了ImptContract类里面。这样一来我们能够更清晰的看到在Presenter层和View层中有哪些功能，方便我们以后的维护。我寻思着这应该就是它被叫做“契约类”的原因吧。</p><p>Presenter的实现在ImptPresenter.java中，View的实现在ImptActivity.java中。</p><h2 id="待完成，明天见"><a href="#待完成，明天见" class="headerlink" title="待完成，明天见"></a>待完成，明天见</h2><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>最后，</p><p>感谢林博主的支持和指导。<a href="https://me.csdn.net/qq_40318498" target="_blank" rel="noopener">点击这里</a>可以关注他的个人博客。</p><p>感谢一些csdn博主的博客，<a href="https://blog.csdn.net/ljd2038/article/details/51477475?utm_source=blogxgwz7" target="_blank" rel="noopener">点击这里访问</a>我参考的博客文章。</p><p>感谢Github上的很多开源代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">com.android.support:design</span><br><span class="line">com.android.support:appcompat-v7</span><br><span class="line">com.android.support.constraint:constraint-layout</span><br><span class="line">org.jsoup:jsoup</span><br><span class="line">io.reactivex.rxjava2:rxandroid</span><br><span class="line">io.reactivex.rxjava2:rxjava</span><br><span class="line">org.greenrobot:eventbus</span><br><span class="line">org.greenrobot:greendao</span><br><span class="line">com.mnnyang.ClassSchedule</span><br><span class="line">com.google.code.gson:gson</span><br><span class="line">jp.wasabeef:glide-transformations</span><br><span class="line">de.hdodenhof:circleimageview</span><br><span class="line">com.zhy:okhttputils</span><br><span class="line">com.github.yuzhiqiang1993:zxing</span><br><span class="line">com.github.franmontiel:PersistentCookieJar</span><br><span class="line">com.github.didikee:AndroidDonate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> MVP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> MVP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV On Android的车牌识别</title>
      <link href="/2019/09/26/projects/CarPlateIdentity/"/>
      <url>/2019/09/26/projects/CarPlateIdentity/</url>
      
        <content type="html"><![CDATA[<h2 id="OpenCV-On-Android的车牌识别"><a href="#OpenCV-On-Android的车牌识别" class="headerlink" title="OpenCV On Android的车牌识别"></a>OpenCV On Android的车牌识别</h2><p>现在已经是9月底了，下个月就要去参加新大陆物联网比赛。在那个比赛中我主要负责安卓端代码的编写。10月的比赛一结束又要全力投入OpenCV中。<br>所以我在想，为什么不做一个基于OpenCV 的安卓端的车牌识别呢？这样一来可以锻炼安卓端代码编写能力，又可以为后续的学习打下一个基础。</p><p>文章中借鉴了很多前人的轮子和一些算法思想，在此表示感谢。另外本文的疏漏之处在所难免。希望当你看到我的这篇博客时，如果发现我的错误，请指出。感激不尽。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>一、下载OpenCV-android-sdk</p><p>这里我使用OpenCV Android 3.4.6 版本<br><a href="https://nchc.dl.sourceforge.net/project/opencvlibrary/3.4.6/opencv-3.4.6-android-sdk.zip" target="_blank" rel="noopener">点击这里下载</a></p><p>二、新建AS项目，依赖OpenCV</p><p>在AS新建一个新项目名字Plate_Recognition，然后在 APP 上右键 New—–&gt; Module 在弹窗里选择 Import Eclipse ADT Project 点Next 。<br>选择你刚才解压的OpenCV目录下的 sdk/java 目录 点击 OK ,然后填下 Module Name ,例如填 “openCVLibrary346” 然后 点Next —–&gt; Finish。</p><p>但是，gradle会报错。如图所示：<br><img src="https://i.loli.net/2019/09/26/hR8CDmAMzErIVgO.png" alt="1.png"></p><p>不要慌张，打开刚导入的OpenCV 的 AndroidManifest.xml 删除 <uses-sdk android:minsdkversion="8" android:targetsdkversion="21"> 这行代码。如下图所示：<br><img src="https://i.loli.net/2019/09/26/HJ7tNZOj8galrVL.png" alt="2.png"></uses-sdk></p><p>接下来再gradle一下就好了。</p><p>再打开 OpenCV 的 build.gradle 文件，把版本改成和APP 的build.gradle 文件一致的版本，另外还要删除   buildToolsVersion “29.0.0” 这一行，</p><p>如下图：<br><img src="https://i.loli.net/2019/09/26/XID5kpAYLnlSZ89.png" alt="4.png"></p><p>在APP 的 build.gradle 加入 implementation project(path: ‘:openCV’) 这行代码 ，然后再gradle一下项目。</p><p>然后添加 SO 文件。</p><p>这里插播一下<strong>什么是SO文件？</strong></p><blockquote><p>SO文件是Linux下共享库文件，它的文件格式被称为ELF文件格式。由于Android操作系统的底层基于Linux系统，所以SO文件可以运行在Android平台上。Android系统也同样开放了C/C++接口供开发者开发Native程序。由于基于虚拟机的编程语言JAVA更容易被人反编译，因此越来越多的应用将其中的核心代码以C/C++为编程语言，并且以SO文件的形式供上层JAVA代码调用，以保证安全性。</p></blockquote><p>如果想要了解更深入，可以去谷歌一下SO文件。这里就不作过多的深入讨论。</p><p>我们这里，在App 的 buidl.gradle 中 defaultConfig 下加入ndk的配置：<br><img src="https://i.loli.net/2019/09/26/6tu1o5zk8PHNbhM.png" alt="5.png"></p><p>在main下新建jinLibs 目录 ，把OpenCV SDK 的解压目录下 sdk/native/libs/armeabi-v7a 目录拷到 jniLibs 下<br><img src="https://i.loli.net/2019/09/26/8QNwfFcgKpVbrk9.png" alt="6.png"></p><p>好了OpenCV 现在完成了，接下来检验下是否可用。</p><p>在MainActivity.java中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stefan.plate_recognition;</span><br><span class="line"><span class="comment">//import...</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = getClass().getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Toolbar toolbar = findViewById(R.id.toolbar);</span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line"></span><br><span class="line">        FloatingActionButton fab = findViewById(R.id.fab);</span><br><span class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Snackbar.make(view, <span class="string">"With codes ,change world."</span>, Snackbar.LENGTH_LONG)</span><br><span class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></span><br><span class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></span><br><span class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></span><br><span class="line">        <span class="keyword">int</span> id = item.getItemId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BaseLoaderCallback mLoaderCallback = <span class="keyword">new</span> BaseLoaderCallback(<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="meta">@SuppressLint</span>(<span class="string">"StaticFieldLeak"</span>)</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onManagerConnected</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onManagerConnected(status);</span><br><span class="line">            <span class="keyword">if</span> (status == LoaderCallbackInterface.SUCCESS) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"OpenCV 加载成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"OpenCV 加载失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        <span class="keyword">if</span> (!OpenCVLoader.initDebug()) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"Internal OpenCV library not found. Using OpenCV Manager for initialization"</span>);</span><br><span class="line">            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_3_4_0, getApplicationContext(), mLoaderCallback);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"OpenCV library found inside package. Using it!"</span>);</span><br><span class="line">            mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后连接手机运行程序，值得注意的是，这里应该使用不了模拟器，模拟器不支持arm。</p><p>接下来应该可以看到log打印信息。</p><p><img src="https://i.loli.net/2019/09/27/UP8s5oWaXTpfDrc.png" alt="1236.png"></p><p>到这里说明OpenCV可以正常使用。</p><h2 id="2-配置NDK，编译库文件"><a href="#2-配置NDK，编译库文件" class="headerlink" title="2.配置NDK，编译库文件"></a>2.配置NDK，编译库文件</h2><p><img src="https://i.loli.net/2019/09/27/ulAHDCX849gKFzr.png" alt="66.png"></p><blockquote><p>Android NDK 是一套允许您使用 C 和 C++ 等语言，以原生代码实现部分应用的工具集。在开发某些类型的应用时，这有助于您重复使用以这些语言编写的代码库。</p></blockquote><p>目前的NDK版本已经到了r20了。但是我们暂时不使用新版本。先按照网上的其他作者的轮子学习一下，等到熟悉了过程再换新版本的NDK。<br><img src="https://i.loli.net/2019/09/27/IoO6CSgvEFXHPhB.png" alt="77.png"></p><p>这里我们下载NDK-r14b的版本。<a href="https://developer.android.google.cn/ndk/downloads/older_releases.html" target="_blank" rel="noopener">点击这里下载地址</a></p><p>下载完成后，在项目中添加NDK依赖。<br><img src="https://i.loli.net/2019/09/27/awPFmSIkVqUNCQb.png" alt="88.png"></p><p>配置好NDK，我们在main目录下面新建 jin 目录 ，然后把Demo库下载下来，把里面的 app/src/main/jni 目录下的 include 、src、还有javaWarpper.cpp 文件复制到 jni 目录下，把 assets/lpr/ 目录下的文件全部复制到我们项目的 assets目录下的lpr文件夹。如下图：<br><img src="https://i.loli.net/2019/09/29/ETQ79hYSBjPaIAt.png" alt="Snipaste_2019-09-29_10-30-22.png"></p><p>然后项目 app文件下新建 CMakeLists.txt 文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># Sets the minimum version of CMake required to build the native</span><br><span class="line"># library. You should either keep the default value or only pass a</span><br><span class="line"># value of 3.4.0 or lower.</span><br><span class="line"></span><br><span class="line">cmake_minimum_required(VERSION 3.4.1)</span><br><span class="line"></span><br><span class="line"># Creates and names a library, sets it as either STATIC</span><br><span class="line"># or SHARED, and provides the relative paths to its source code.</span><br><span class="line"># You can define multiple libraries, and CMake builds it for you.</span><br><span class="line"># Gradle automatically packages shared libraries with your APK.</span><br><span class="line">include_directories(src/main/jni/include)</span><br><span class="line"></span><br><span class="line">include_directories(src/main/jni)</span><br><span class="line">aux_source_directory(src/main/jni SOURCE_FILES)</span><br><span class="line">aux_source_directory(src/main/jni/src SOURCE_FILES_CORE)</span><br><span class="line">list(APPEND SOURCE_FILES $&#123;SOURCE_FILES_CORE&#125;)</span><br><span class="line"></span><br><span class="line">#修改修改为自己的opencv-android-sdk 的JNI路径</span><br><span class="line">set(OpenCV_DIR D:/OpenCV-android-sdk/sdk/native/jni)</span><br><span class="line">find_package(OpenCV REQUIRED)</span><br><span class="line"></span><br><span class="line">add_library( # Sets the name of the library.</span><br><span class="line">        lpr</span><br><span class="line">        # Sets the library as a shared library.</span><br><span class="line">        SHARED</span><br><span class="line">        # Provides a relative path to your source file(s).</span><br><span class="line">        # Associated headers in the same location as their source</span><br><span class="line">        # file are automatically included.</span><br><span class="line">        $&#123;SOURCE_FILES&#125;)</span><br><span class="line"></span><br><span class="line"># Searches for a specified prebuilt library and stores the path as a</span><br><span class="line"># variable. Because system libraries are included in the search path by</span><br><span class="line"># default, you only need to specify the name of the public NDK library</span><br><span class="line"># you want to add. CMake verifies that the library exists before</span><br><span class="line"># completing its build.</span><br><span class="line"></span><br><span class="line">find_library( # Sets the name of the path variable.</span><br><span class="line">        log-lib</span><br><span class="line"></span><br><span class="line">        # Specifies the name of the NDK library that</span><br><span class="line">        # you want CMake to locate.</span><br><span class="line">        log)</span><br><span class="line"></span><br><span class="line"># Specifies libraries CMake should link to your target library. You</span><br><span class="line"># can link multiple libraries, such as libraries you define in the</span><br><span class="line"># build script, prebuilt third-party libraries, or system libraries.</span><br><span class="line"></span><br><span class="line">target_link_libraries( # Specifies the target library.</span><br><span class="line">        lpr</span><br><span class="line">        $&#123;OpenCV_LIBS&#125;</span><br><span class="line">        # Links the target library to the log library</span><br><span class="line">        # included in the NDK.</span><br><span class="line">        $&#123;log-lib&#125;)</span><br></pre></td></tr></table></figure><p>接下来修改 app的build.gradle 文件，最终配置如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">29</span></span><br><span class="line">    buildToolsVersion <span class="string">"29.0.0"</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.stefan.plate_recognition"</span></span><br><span class="line">        minSdkVersion <span class="number">28</span></span><br><span class="line">        targetSdkVersion <span class="number">29</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"androidx.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">        ndk &#123;</span><br><span class="line">            <span class="comment">//选择要添加的对应 cpu 类型的 .so 库。</span></span><br><span class="line">            abiFilters <span class="string">'armeabi-v7a'</span></span><br><span class="line">            <span class="comment">// 还可以添加 'x86', 'x86_64', 'mips', 'mips64'</span></span><br><span class="line">            <span class="comment">//moduleName "native-lib"</span></span><br><span class="line">            <span class="comment">//abiFilters "x86","x86_64","arm64-v8a"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags <span class="string">"-std=gnu++11"</span></span><br><span class="line">                <span class="comment">// 注意！！！！       注意！！！！！！</span></span><br><span class="line">                <span class="comment">//如果是用 Linux 开发的的用户下面这行代码不用动，如果是 Win 用户请把 下面这行代码注释了</span></span><br><span class="line">                <span class="comment">//arguments "-DANDROID_TOOLCHAIN=gcc", "-DANDROID_ARM_NEON=TRUE", "-DANDROID_STL_FORCE_FEATURES=OFF"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            path <span class="string">"CMakeLists.txt"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="string">'androidx.appcompat:appcompat:1.1.0'</span></span><br><span class="line">    implementation <span class="string">'androidx.constraintlayout:constraintlayout:1.1.3'</span></span><br><span class="line">    implementation <span class="string">'com.google.android.material:material:1.0.0'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test:runner:1.2.0'</span></span><br><span class="line">    androidTestImplementation <span class="string">'androidx.test.espresso:espresso-core:3.2.0'</span></span><br><span class="line">    implementation <span class="keyword">project</span>(path: <span class="string">':openCVLibrary346'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目下新建PlateRecognition 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stefan.platerecognition.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> : Stefan</span></span><br><span class="line"><span class="comment"> * time   : 2019/09/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlateRecognition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"lpr"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">InitPlateRecognizer</span><span class="params">(String casacde_detection,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           String finemapping_prototxt, String finemapping_caffemodel,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           String segmentation_prototxt, String segmentation_caffemodel,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           String charRecognization_proto, String charRecognization_caffemodel,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           String segmentation_free_prototxt, String segmentation_free_caffemodel)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">ReleasePlateRecognizer</span><span class="params">(<span class="keyword">long</span> object)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">SimpleRecognization</span><span class="params">(<span class="keyword">long</span> inputMat, <span class="keyword">long</span> object)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里包名和我不一样，到javaWartpper.cpp 文件修改成和你对应的。<br><img src="https://i.loli.net/2019/09/29/Pxgj15aw9dEKy8U.png" alt="Snipaste_2019-09-29_11-12-25.png"></p><p>DeepAssetUtil：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stefan.platerecognition.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepAssetUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ApplicationDir = <span class="string">"lpr"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CASCADE_FILENAME = <span class="string">"cascade.xml"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HORIZONAL_FINEMAPPING_PROTOTXT = <span class="string">"HorizonalFinemapping.prototxt"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HORIZONAL_FINEMAPPING_CAFFEMODEL = <span class="string">"HorizonalFinemapping.caffemodel"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEGMENTATION_PROTOTXT = <span class="string">"Segmentation.prototxt"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEGMENTATION_CAFFEMODEL = <span class="string">"Segmentation.caffemodel"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RECOGNIZATION_PROTOTXT = <span class="string">"CharacterRecognization.prototxt"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RECOGNIZATION_CAFFEMODEL = <span class="string">"CharacterRecognization.caffemodel"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FREE_INCEPTION_PROTOTXT = <span class="string">"SegmenationFree-Inception.prototxt"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FREE_INCEPTION_CAFFEMODEL = <span class="string">"SegmenationFree-Inception.caffemodel"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SDCARD_DIR = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + ApplicationDir; <span class="comment">//解压文件存放位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CopyAssets</span><span class="params">(Context context, String assetDir, String dir)</span> </span>&#123;</span><br><span class="line">        String[] files;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获得Assets文件</span></span><br><span class="line">            files = context.getAssets().list(assetDir);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        File mWorkingPath = <span class="keyword">new</span> File(dir);</span><br><span class="line">        <span class="comment">// 如果文件路径不存在</span></span><br><span class="line">        <span class="keyword">if</span> (!mWorkingPath.exists()) &#123;</span><br><span class="line">            <span class="comment">// 创建文件夹</span></span><br><span class="line">            <span class="keyword">if</span> (!mWorkingPath.mkdirs()) &#123;</span><br><span class="line">                <span class="comment">// 文件夹创建不成功时调用</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String file : files) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 根据路径判断是文件夹还是文件</span></span><br><span class="line">                <span class="keyword">if</span> (!file.contains(<span class="string">"."</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">0</span> == assetDir.length()) &#123;</span><br><span class="line">                        CopyAssets(context, file, dir + file + <span class="string">"/"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        CopyAssets(context, assetDir + <span class="string">"/"</span> + file, dir + <span class="string">"/"</span> + file + <span class="string">"/"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                File outFile = <span class="keyword">new</span> File(mWorkingPath, file);</span><br><span class="line">                <span class="keyword">if</span> (outFile.exists())</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                InputStream in;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> != assetDir.length()) &#123;</span><br><span class="line">                    in = context.getAssets().open(assetDir + <span class="string">"/"</span> + file);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    in = context.getAssets().open(file);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                OutputStream out = <span class="keyword">new</span> FileOutputStream(outFile);</span><br><span class="line">                <span class="comment">// Transfer bytes from in to out</span></span><br><span class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len;</span><br><span class="line">                <span class="keyword">while</span> ((len = in.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    out.write(buf, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                in.close();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFilesFromAssets</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        DeepAssetUtil.CopyAssets(context, ApplicationDir, SDCARD_DIR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化识别资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">initRecognizer</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        String cascade_filename = SDCARD_DIR + File.separator + CASCADE_FILENAME;</span><br><span class="line">        String finemapping_prototxt = SDCARD_DIR + File.separator + HORIZONAL_FINEMAPPING_PROTOTXT;</span><br><span class="line">        String finemapping_caffemodel = SDCARD_DIR + File.separator + HORIZONAL_FINEMAPPING_CAFFEMODEL;</span><br><span class="line">        String segmentation_prototxt = SDCARD_DIR + File.separator + SEGMENTATION_PROTOTXT;</span><br><span class="line">        String segmentation_caffemodel = SDCARD_DIR + File.separator + SEGMENTATION_CAFFEMODEL;</span><br><span class="line">        String character_prototxt = SDCARD_DIR + File.separator + RECOGNIZATION_PROTOTXT;</span><br><span class="line">        String character_caffemodel = SDCARD_DIR + File.separator + RECOGNIZATION_CAFFEMODEL;</span><br><span class="line">        String segmentation_free_prototxt = SDCARD_DIR + File.separator + FREE_INCEPTION_PROTOTXT;</span><br><span class="line">        String segmentation_free_caffemodel = SDCARD_DIR + File.separator + FREE_INCEPTION_CAFFEMODEL;</span><br><span class="line">        copyFilesFromAssets(context);</span><br><span class="line">        <span class="comment">//调用JNI 加载资源函数</span></span><br><span class="line">        <span class="keyword">return</span> PlateRecognition.InitPlateRecognizer(</span><br><span class="line">                cascade_filename,</span><br><span class="line">                finemapping_prototxt, finemapping_caffemodel,</span><br><span class="line">                segmentation_prototxt, segmentation_caffemodel,</span><br><span class="line">                character_prototxt, character_caffemodel,</span><br><span class="line">                segmentation_free_prototxt, segmentation_free_caffemodel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新大陆安卓端代码笔记（四）</title>
      <link href="/2019/09/22/Android_Code_newland_four/"/>
      <url>/2019/09/22/Android_Code_newland_four/</url>
      
        <content type="html"><![CDATA[<h2 id="新大陆安卓端代码笔记（四）"><a href="#新大陆安卓端代码笔记（四）" class="headerlink" title="新大陆安卓端代码笔记（四）"></a>新大陆安卓端代码笔记（四）</h2><p>在之前的博客中，主要记录了我阅读demo代码的收获，这一个博客记录我自己做一个app过程中遇到的问题和解决方案。</p><p>文章不严谨和疏漏的地方在所难免，如果可以的话，请留言给我，感激不尽。</p><a id="more"></a><h2 id="1-Android-当用户名和密码都不为空时，按钮才可用"><a href="#1-Android-当用户名和密码都不为空时，按钮才可用" class="headerlink" title="1.Android 当用户名和密码都不为空时，按钮才可用"></a>1.Android 当用户名和密码都不为空时，按钮才可用</h2><p>这里要明白一个地方，这个问题的关键点不在Button，而是在于EditText。因为你需要打开app一开始就设置Button不可用，因为一开始是没有输入的。而后是不能对它进行操作的。</p><p>所以，先在要在.xml里设置一下  android:enabled=”false”。</p><p>主要就是去设置文本框的监听事件，由于有两个文本框，所以直接调用两次就行，如果去嵌套着调用，既麻烦，还容易出错。</p><p>下面给出一种解决方案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 2019/9/22 若账号或密码有一项为空，则登录按钮不能点击。</span></span><br><span class="line"></span><br><span class="line">TextWatcher textWatcher = <span class="keyword">new</span> TextWatcher() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username.getText().length()==<span class="number">0</span>||password.getText().length()==<span class="number">0</span>)&#123;</span><br><span class="line">            login.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            login.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">username.addTextChangedListener(textWatcher);</span><br><span class="line">password.addTextChangedListener(textWatcher);</span><br><span class="line"></span><br><span class="line">login.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"Test!!! "</span> ,Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中，TextWatcher这个接口是专门用来监听文本框变化的。</p><h2 id="2-随机生成验证码，如果验证码输入错误则自动更新一次验证码"><a href="#2-随机生成验证码，如果验证码输入错误则自动更新一次验证码" class="headerlink" title="2.随机生成验证码，如果验证码输入错误则自动更新一次验证码"></a>2.随机生成验证码，如果验证码输入错误则自动更新一次验证码</h2><p>这里用来生成图片验证码的java工具类是别人是轮子。大致思路是在一块固定宽高的画布上，画上固定个数的随机数字和字母，再画上固定条数的干扰线<br>随机数和干扰线的颜色随机生成，随机数的样式随机生成。</p><p>CodeUtils.java如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shashank.platform.loginui.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Stefan on 2019/9/22.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] CHARS = &#123;</span><br><span class="line">            <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</span><br><span class="line">            <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>,</span><br><span class="line">            <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>,</span><br><span class="line">            <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>,</span><br><span class="line">            <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CodeUtils mCodeUtils;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPaddingLeft, mPaddingTop;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder mBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">private</span> Random mRandom = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Default Settings</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CODE_LENGTH = <span class="number">4</span>;<span class="comment">//验证码的长度  这里是6位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_FONT_SIZE = <span class="number">60</span>;<span class="comment">//字体大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_LINE_NUMBER = <span class="number">3</span>;<span class="comment">//多少条干扰线</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_PADDING_LEFT = <span class="number">20</span>; <span class="comment">//左边距</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RANGE_PADDING_LEFT = <span class="number">30</span>;<span class="comment">//左边距范围值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_PADDING_TOP = <span class="number">70</span>;<span class="comment">//上边距</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RANGE_PADDING_TOP = <span class="number">15</span>;<span class="comment">//上边距范围值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_WIDTH = <span class="number">300</span>;<span class="comment">//默认宽度.图片的总宽</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_HEIGHT = <span class="number">100</span>;<span class="comment">//默认高度.图片的总高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_COLOR = <span class="number">0xDF</span>;<span class="comment">//默认背景颜色值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CodeUtils <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mCodeUtils == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mCodeUtils = <span class="keyword">new</span> CodeUtils();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mCodeUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成验证码图片</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">createBitmap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaddingLeft = <span class="number">0</span>; <span class="comment">//每次生成验证码图片时初始化</span></span><br><span class="line">        mPaddingTop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        Bitmap bitmap = Bitmap.createBitmap(DEFAULT_WIDTH, DEFAULT_HEIGHT, Bitmap.Config.ARGB_8888);</span><br><span class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);</span><br><span class="line"></span><br><span class="line">        code = createCode();</span><br><span class="line"></span><br><span class="line">        canvas.drawColor(Color.rgb(DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_COLOR));</span><br><span class="line">        Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">        paint.setTextSize(DEFAULT_FONT_SIZE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; code.length(); i++) &#123;</span><br><span class="line">            randomTextStyle(paint);</span><br><span class="line">            randomPadding();</span><br><span class="line">            canvas.drawText(code.charAt(i) + <span class="string">""</span> , mPaddingLeft, mPaddingTop, paint);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//干扰线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DEFAULT_LINE_NUMBER; i++) &#123;</span><br><span class="line">            drawLine(canvas, paint);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        canvas.save();<span class="comment">//保存</span></span><br><span class="line">        canvas.restore();</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到图片中的验证码字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成验证码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mBuilder.delete(<span class="number">0</span>, mBuilder.length()); <span class="comment">//使用之前首先清空内容</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DEFAULT_CODE_LENGTH; i++) &#123;</span><br><span class="line">            mBuilder.append(CHARS[mRandom.nextInt(CHARS.length)]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成干扰线</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(Canvas canvas, Paint paint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> color = randomColor();</span><br><span class="line">        <span class="keyword">int</span> startX = mRandom.nextInt(DEFAULT_WIDTH);</span><br><span class="line">        <span class="keyword">int</span> startY = mRandom.nextInt(DEFAULT_HEIGHT);</span><br><span class="line">        <span class="keyword">int</span> stopX = mRandom.nextInt(DEFAULT_WIDTH);</span><br><span class="line">        <span class="keyword">int</span> stopY = mRandom.nextInt(DEFAULT_HEIGHT);</span><br><span class="line">        paint.setStrokeWidth(<span class="number">1</span>);</span><br><span class="line">        paint.setColor(color);</span><br><span class="line">        canvas.drawLine(startX, startY, stopX, stopY, paint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机颜色</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">randomColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mBuilder.delete(<span class="number">0</span>, mBuilder.length()); <span class="comment">//使用之前首先清空内容</span></span><br><span class="line"></span><br><span class="line">        String haxString;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            haxString = Integer.toHexString(mRandom.nextInt(<span class="number">0xFF</span>));</span><br><span class="line">            <span class="keyword">if</span> (haxString.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                haxString = <span class="string">"0"</span> + haxString;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mBuilder.append(haxString);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Color.parseColor(<span class="string">"#"</span> + mBuilder.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机文本样式</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">randomTextStyle</span><span class="params">(Paint paint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> color = randomColor();</span><br><span class="line">        paint.setColor(color);</span><br><span class="line">        paint.setFakeBoldText(mRandom.nextBoolean());  <span class="comment">//true为粗体，false为非粗体</span></span><br><span class="line">        <span class="keyword">float</span> skewX = mRandom.nextInt(<span class="number">11</span>) / <span class="number">10</span>;</span><br><span class="line">        skewX = mRandom.nextBoolean() ? skewX : -skewX;</span><br><span class="line">        paint.setTextSkewX(skewX); <span class="comment">//float类型参数，负数表示右斜，整数左斜</span></span><br><span class="line">        paint.setUnderlineText(<span class="keyword">true</span>); <span class="comment">//true为下划线，false为非下划线</span></span><br><span class="line">        paint.setStrikeThruText(<span class="keyword">true</span>); <span class="comment">//true为删除线，false为非删除线</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机间距</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">randomPadding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaddingLeft += BASE_PADDING_LEFT + mRandom.nextInt(RANGE_PADDING_LEFT);</span><br><span class="line">        mPaddingTop = BASE_PADDING_TOP + mRandom.nextInt(RANGE_PADDING_TOP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.xml文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"15dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginRight</span>=<span class="string">"15dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/et_phoneCodes"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginRight</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textStyle</span>=<span class="string">"bold"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textColor</span>=<span class="string">"#96ffffff"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:textSize</span>=<span class="string">"16sp"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:hint</span>=<span class="string">"@string/pic_number"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/image"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到这里为止，图片验证码的准备工作已经做好了。接下来就是把图片验证码的逻辑放到MainActivity里。显然我们把它放在button的login的点击事件里比较好。当用户按下login时，我们进行验证码比对，如果输入正确则跳转到联网登陆，不正确则刷新验证码，要求用户重新输入。</p><p>关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 2019/9/22 登陆按键的点击事件</span></span><br><span class="line">login.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 2019/9/22  对图片验证码进行验证，验证成功则进行登陆</span></span><br><span class="line">        codeStr = et_phoneCodes.getText().toString().trim();</span><br><span class="line">        Log.e(<span class="string">"codeStr"</span>, codeStr);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == codeStr || TextUtils.isEmpty(codeStr)) &#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"Please Enter confirmation code."</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String code = CodeUtils.getCode();</span><br><span class="line">        Log.e(<span class="string">"code"</span>, code);</span><br><span class="line">        <span class="keyword">if</span> (code.equalsIgnoreCase(codeStr)) &#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"Welcome Home!."</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">            signIn();<span class="comment">//验证码正确后进行账号和密码的验证</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"Please Enter the Right confirmation code."</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">            bitmap = CodeUtils.getInstance().createBitmap();</span><br><span class="line">            code = CodeUtils.getInstance().getCode();</span><br><span class="line">            image.setImageBitmap(bitmap);<span class="comment">//输入错误后更换验证码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完成以后，就可以看到效果了。</p><p><img src="https://i.loli.net/2019/09/24/QWkqxtdp9Lv1uOw.png" alt="login.png"></p><p>好了，验证码这一个任务已完成。</p><h2 id="3-从云平台获取温度数据并显示在仪表盘上"><a href="#3-从云平台获取温度数据并显示在仪表盘上" class="headerlink" title="3.从云平台获取温度数据并显示在仪表盘上"></a>3.从云平台获取温度数据并显示在仪表盘上</h2><p>这里又要再次借用一下别人写好的轮子了。</p><p>绘制温度仪表盘的工具类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.shashank.platform.loginui;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Stefan on 2019/9/23.</span></span><br><span class="line"><span class="comment">//TempView.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.RectF;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.TypedValue;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TempView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控件宽</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控件高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</span><br><span class="line">    <span class="keyword">private</span> String mTempTitle = <span class="string">"温度(℃)"</span>;</span><br><span class="line">    <span class="keyword">private</span> String mHumTitle = <span class="string">"湿度(%)"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刻度高 短针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mScaleHeight = dp2px(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刻度高 长针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mScaleHeight1 = dp2px(<span class="number">15</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刻度盘/</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Paint mDialPaint;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本画笔</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Paint mTitlePaint;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 画湿度圆环的画笔</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Paint mHumCirclePaint;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前湿度值的小圆点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Paint mHumValueCirclePaint;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 湿度圆环左边和右边的小圆点画笔</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Paint mHumLeftCirclePaint;</span><br><span class="line">    <span class="keyword">private</span> Paint mHumRightCirclePaint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前温度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTemperature = <span class="number">15</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最低温度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMinTemp = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最高温度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMaxTemp = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前湿度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHumidity = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最低湿度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMinHum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最高湿度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMaxHum = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 温度每份的角度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mAngleOneTem = (<span class="keyword">float</span>) <span class="number">270</span> / (mMaxTemp - mMinTemp);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 湿度每份的角度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mAngleOneHum = (<span class="keyword">float</span>) <span class="number">270</span> / (mMaxHum - mMinHum);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 温度，刻度的半径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTemDialRadius;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 湿度，内圈半径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHumInSideRadius;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 湿度，圆环宽度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHumCriWidth = dp2px(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刻度和文字颜色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mTextColor = <span class="string">"#666666"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未达到的温度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mDialBackGroundColor = <span class="string">"#666666"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已经达到的温度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mDialForegroundColor = <span class="string">"#1FC8A2"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 湿度圆环背景色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mHumCriBackground = <span class="string">"#666666"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 湿度圆环前景色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mHumCriForeground = <span class="string">"#1FC8A2"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前湿度的小圆点颜色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mHumCriValue = <span class="string">"#eeeeee"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前湿度的小圆点的背景色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mHumCriValueBackGround = <span class="string">"#30333333"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TempView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TempView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TempView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//温度刻度盘</span></span><br><span class="line">        mDialPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mDialPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mDialPaint.setColor(Color.parseColor(mDialBackGroundColor));</span><br><span class="line">        mDialPaint.setStrokeWidth(dp2px(<span class="number">2</span>));</span><br><span class="line">        mDialPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文字描述</span></span><br><span class="line">        mTitlePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mTitlePaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mTitlePaint.setTextSize(sp2px(<span class="number">15</span>));</span><br><span class="line">        mTitlePaint.setColor(Color.parseColor(mTextColor));</span><br><span class="line">        mTitlePaint.setStyle(Paint.Style.STROKE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//湿度圆环</span></span><br><span class="line">        mHumCirclePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mHumCirclePaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mHumCirclePaint.setColor(Color.parseColor(mHumCriBackground));</span><br><span class="line">        mHumCirclePaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mHumCirclePaint.setStrokeWidth(mHumCriWidth);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当前湿度值</span></span><br><span class="line">        mHumValueCirclePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mHumValueCirclePaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mHumValueCirclePaint.setColor(Color.parseColor(mHumCriValue));</span><br><span class="line">        mHumValueCirclePaint.setStyle(Paint.Style.FILL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//湿度圆环左边的小圆点</span></span><br><span class="line">        mHumLeftCirclePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mHumLeftCirclePaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mHumLeftCirclePaint.setColor(Color.parseColor(mHumCriForeground));</span><br><span class="line">        mHumLeftCirclePaint.setStyle(Paint.Style.FILL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//湿度圆环右边的小圆点</span></span><br><span class="line">        mHumRightCirclePaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mHumRightCirclePaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mHumRightCirclePaint.setColor(Color.parseColor(mHumCriBackground));</span><br><span class="line">        mHumRightCirclePaint.setStyle(Paint.Style.FILL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> specSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="comment">// 参考宽，处理成正方形</span></span><br><span class="line">        setMeasuredDimension(specSize, specSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="comment">// 控件宽、高</span></span><br><span class="line">        mWidth = mHeight = Math.min(h, w);</span><br><span class="line">        <span class="comment">// 温度，刻度的半径</span></span><br><span class="line">        mTemDialRadius = mWidth / <span class="number">2</span> - dp2px(<span class="number">70</span>);</span><br><span class="line">        <span class="comment">// 湿度，内圈半径=刻度的内圈+最长刻度+15像素</span></span><br><span class="line">        mHumInSideRadius = mTemDialRadius + mScaleHeight1 + dp2px(<span class="number">15</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="comment">//画温度刻度盘和内的刻度</span></span><br><span class="line">        drawTempDial(canvas);</span><br><span class="line">        <span class="comment">//画湿度圆弧</span></span><br><span class="line">        drawHumArc(canvas);</span><br><span class="line">        <span class="comment">//画左边和左边的小圆点</span></span><br><span class="line">        drwaHumArcLeftAndRight(canvas);</span><br><span class="line">        <span class="comment">//当前湿度值</span></span><br><span class="line">        drawHumValueArc(canvas);</span><br><span class="line">        <span class="comment">//湿度外边的刻度</span></span><br><span class="line">        drawHumText(canvas);</span><br><span class="line">        <span class="comment">//画温湿度标题文字</span></span><br><span class="line">        drawTemText(canvas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 画温度刻度 和温度内圈文字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawTempDial</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        canvas.save();</span><br><span class="line">        canvas.translate(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 顺时针旋转135度</span></span><br><span class="line">        canvas.rotate(-<span class="number">135</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mMinTemp; i &lt;= mMaxTemp; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= mTemperature) &#123;</span><br><span class="line">                mDialPaint.setColor(Color.parseColor(mDialForegroundColor));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mDialPaint.setColor(Color.parseColor(mDialBackGroundColor));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//从刻度的内圈开始，往外画</span></span><br><span class="line">                canvas.drawLine(<span class="number">0</span>, -mTemDialRadius, <span class="number">0</span>, -mTemDialRadius - mScaleHeight1, mDialPaint);</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">float</span> tempWidth = mDialPaint.measureText(i + <span class="string">""</span>);</span><br><span class="line">                    canvas.drawText(i + <span class="string">""</span>, <span class="number">0</span> - tempWidth / <span class="number">2</span>, -mTemDialRadius + dp2px(<span class="number">20</span>), mTitlePaint);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                canvas.drawLine(<span class="number">0</span>, -mTemDialRadius, <span class="number">0</span>, -mTemDialRadius - mScaleHeight, mDialPaint);</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.rotate(mAngleOneTem);</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 画温湿度标题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> canvas</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawTemText</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        canvas.save();</span><br><span class="line">        canvas.translate(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">float</span> tempWidth = mTitlePaint.measureText(mTempTitle);</span><br><span class="line">        <span class="keyword">float</span> humWidth = mTitlePaint.measureText(mHumTitle);</span><br><span class="line">        canvas.drawText(mTempTitle, -tempWidth / <span class="number">2</span>, mTemDialRadius + dp2px(<span class="number">5</span>), mTitlePaint);</span><br><span class="line">        canvas.drawText(mHumTitle, -humWidth / <span class="number">2</span>, mHumInSideRadius + dp2px(<span class="number">7</span>), mTitlePaint);</span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 画湿度圆环</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawHumArc</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        canvas.save();</span><br><span class="line">        canvas.translate(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">        canvas.rotate(<span class="number">135</span>);</span><br><span class="line">        mHumCirclePaint.setColor(Color.parseColor(mHumCriBackground));</span><br><span class="line">        RectF rectF = <span class="keyword">new</span> RectF(-mHumInSideRadius, -mHumInSideRadius, mHumInSideRadius, mHumInSideRadius);</span><br><span class="line">        <span class="comment">//画背景</span></span><br><span class="line">        canvas.drawArc(rectF, <span class="number">0</span>, <span class="number">270</span>, <span class="keyword">false</span>, mHumCirclePaint);</span><br><span class="line">        mHumCirclePaint.setColor(Color.parseColor(mHumCriForeground));</span><br><span class="line">        <span class="comment">//画前景</span></span><br><span class="line">        canvas.drawArc(rectF, <span class="number">0</span>, mAngleOneHum * mHumidity, <span class="keyword">false</span>, mHumCirclePaint);</span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 画当前湿度值的小圆点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawHumValueArc</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        canvas.save();</span><br><span class="line">        canvas.translate(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//旋转到0，再旋转到当前湿度值</span></span><br><span class="line">        canvas.rotate(-<span class="number">135</span> + mAngleOneHum * mHumidity);</span><br><span class="line">        <span class="comment">//画背景</span></span><br><span class="line">        mHumValueCirclePaint.setColor(Color.parseColor(mHumCriValueBackGround));</span><br><span class="line">        canvas.drawCircle(<span class="number">0</span>, -mHumInSideRadius, (mHumCriWidth + dp2px(<span class="number">10</span>)) / <span class="number">2</span>, mHumValueCirclePaint);</span><br><span class="line">        <span class="comment">//画前景</span></span><br><span class="line">        mHumValueCirclePaint.setColor(Color.parseColor(mHumCriValue));</span><br><span class="line">        canvas.drawCircle(<span class="number">0</span>, -mHumInSideRadius, (mHumCriWidth + dp2px(<span class="number">7</span>)) / <span class="number">2</span>, mHumValueCirclePaint);</span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左边右边分别画一个小圆点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> canvas</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drwaHumArcLeftAndRight</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        canvas.save();</span><br><span class="line">        canvas.translate(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//旋转到0</span></span><br><span class="line">        canvas.rotate(-<span class="number">135</span>);</span><br><span class="line">        canvas.drawCircle(<span class="number">0</span>, -mHumInSideRadius, mHumCriWidth / <span class="number">2</span>, mHumLeftCirclePaint);</span><br><span class="line">        canvas.rotate(<span class="number">270</span>);</span><br><span class="line">        canvas.drawCircle(<span class="number">0</span>, -mHumInSideRadius, mHumCriWidth / <span class="number">2</span>, mHumRightCirclePaint);</span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 画湿度的文字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawHumText</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        canvas.save();</span><br><span class="line">        canvas.translate(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 顺时针旋转135度</span></span><br><span class="line">        canvas.rotate(-<span class="number">135</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mMinHum; i &lt;= mMaxHum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">float</span> tempWidth = mTitlePaint.measureText(i + <span class="string">""</span>);</span><br><span class="line">                canvas.drawText(i + <span class="string">""</span>, <span class="number">0</span> - tempWidth / <span class="number">2</span>, -mHumInSideRadius - mHumCriWidth, mTitlePaint);</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.rotate(mAngleOneHum);</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMinTemp</span><span class="params">(<span class="keyword">int</span> minTemp)</span> </span>&#123;</span><br><span class="line">        setData(minTemp, mMaxTemp, mTemperature, mMinHum, mMaxHum, mHumidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxTemp</span><span class="params">(<span class="keyword">int</span> maxTemp)</span> </span>&#123;</span><br><span class="line">        setData(mMinTemp, maxTemp, mTemperature, mMinHum, mMaxHum, mHumidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTemp</span><span class="params">(<span class="keyword">int</span> temp)</span> </span>&#123;</span><br><span class="line">        setData(mMinTemp, mMaxTemp, temp, mMinHum, mMaxHum, mHumidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTempTitle</span><span class="params">(String tempTitle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mTempTitle = tempTitle;</span><br><span class="line">        invalidate();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMinHum</span><span class="params">(<span class="keyword">int</span> minHum)</span> </span>&#123;</span><br><span class="line">        setData(mMinTemp, mMaxTemp, mTemperature, minHum, mMaxHum, mHumidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxHum</span><span class="params">(<span class="keyword">int</span> maxHum)</span> </span>&#123;</span><br><span class="line">        setData(mMinTemp, mMaxTemp, mTemperature, mMinHum, maxHum, mHumidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHum</span><span class="params">(<span class="keyword">int</span> hum)</span> </span>&#123;</span><br><span class="line">        setData(mMinTemp, mMaxTemp, mTemperature, mMinHum, mMaxHum, hum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHumTitle</span><span class="params">(String humTitle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mHumTitle = humTitle;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minTemp 最小温度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxTemp 最大温度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temp    设置的温度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minHum  最小湿度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxHum  最大湿度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hum     当前湿度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> minTemp, <span class="keyword">int</span> maxTemp, <span class="keyword">int</span> temp, <span class="keyword">int</span> minHum, <span class="keyword">int</span> maxHum, <span class="keyword">int</span> hum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mMinTemp = minTemp;</span><br><span class="line">        <span class="keyword">this</span>.mMaxTemp = maxTemp;</span><br><span class="line">        <span class="keyword">if</span> (temp &lt; minTemp) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mTemperature = minTemp;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp &gt; maxTemp) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mTemperature = maxTemp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.mTemperature = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.mMinHum = minHum;</span><br><span class="line">        <span class="keyword">this</span>.mMaxHum = maxHum;</span><br><span class="line">        <span class="keyword">if</span> (hum &lt; minHum) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mHumidity = minHum;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hum &gt; maxHum) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mHumidity = maxHum;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.mHumidity = hum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mAngleOneTem = (<span class="keyword">float</span>) <span class="number">270</span> / (mMaxTemp - mMinTemp);</span><br><span class="line">        mAngleOneHum = (<span class="keyword">float</span>) <span class="number">270</span> / (mMaxHum - mMinHum);</span><br><span class="line"></span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(<span class="keyword">float</span> dp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,</span><br><span class="line">                getResources().getDisplayMetrics());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">sp2px</span><span class="params">(<span class="keyword">float</span> sp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, sp,</span><br><span class="line">                getResources().getDisplayMetrics());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码比较长，里面提供了设置温度和湿度的函数接口，到时候只需要实例化这个仪表盘对象，再调用setTemp()函数即可。</p><blockquote><p>值得注意的是，这个仪表盘可以显示温度和湿度，并且提供了函数修改仪表盘上的最大和最小刻度，以及修改Title的函数。后面很多情况都可以用这个轮子。</p></blockquote><p>接下来就是在login跳转后的新的activity中写一个getTemperature()的函数了。这里需要结合新大陆的SDK来进行。<br>核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 2019/9/24 从云平台获取温度数据，显示在仪表盘上。注意apitTag要和云平台标识名一致</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTemperature</span><span class="params">()</span></span>&#123;</span><br><span class="line">    netWorkBusiness.getSensor(deviceID, <span class="string">"currentTemp"</span>, <span class="keyword">new</span> NCallBack&lt;BaseResponseEntity&lt;SensorInfo&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(<span class="keyword">final</span> Call&lt;BaseResponseEntity&lt;SensorInfo&gt;&gt; call, <span class="keyword">final</span> Response&lt;BaseResponseEntity&lt;SensorInfo&gt;&gt; response)</span> </span>&#123;</span><br><span class="line">            BaseResponseEntity baseResponseEntity = response.body();</span><br><span class="line">            <span class="keyword">if</span> (baseResponseEntity!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//获取到了内容,使用json解析.</span></span><br><span class="line">                <span class="keyword">final</span> Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">                JSONObject jsonObject;</span><br><span class="line">                String msg=gson.toJson(baseResponseEntity);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jsonObject = <span class="keyword">new</span> JSONObject(msg);   <span class="comment">//解析数据.</span></span><br><span class="line"></span><br><span class="line">                    JSONObject resultObj = (JSONObject) jsonObject.get(<span class="string">"ResultObj"</span>);</span><br><span class="line">                    String TempValue=resultObj.getString(<span class="string">"Value"</span>);</span><br><span class="line">                    tempurature=Double.valueOf(TempValue).intValue();</span><br><span class="line"></span><br><span class="line">                    mDeviceTempHum.setTemp(tempurature);<span class="comment">//显示温度数据到仪表盘</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(BaseResponseEntity&lt;SensorInfo&gt; response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="keyword">final</span> Call&lt;BaseResponseEntity&lt;SensorInfo&gt;&gt; call, <span class="keyword">final</span> Throwable t)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(ShowTemp.<span class="keyword">this</span>,<span class="string">"温度获取失败"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是利用线程每隔2分钟调用一次getTemperature()函数了。</p><p>先插播一个我在新建一个activitity过程中遇到的问题。</p><p>就是Android的顶部导航栏变成空白，导致界面非常不好看。</p><p>分两步：</p><p>首先在Showtemp这个activity的java代码中添加下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 2019/9/23 状态栏设置</span></span><br><span class="line">    <span class="keyword">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT)&#123;</span><br><span class="line">        Window window = <span class="keyword">this</span>.getWindow();</span><br><span class="line">        window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if里面的是Android SDK版本，其实可以不用加进去，因为我们用的29了。<br>然后在其对应的xml文件中加入下面代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:fitsSystemWindows="true"</span><br></pre></td></tr></table></figure><p>这样以后，界面如图：</p><p><img src="https://i.loli.net/2019/09/24/mlaTytPpI68ukbc.png" alt="Snipaste_2019-09-24_10-11-55.png"></p><h2 id="4-线程的使用"><a href="#4-线程的使用" class="headerlink" title="4.线程的使用"></a>4.线程的使用</h2><p>核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 2019/9/24 每个2分钟刷新温度数据并且显示出来</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshData</span><span class="params">()</span></span>&#123;</span><br><span class="line">    message = Message.obtain();<span class="comment">//从消息池获取空消息对象</span></span><br><span class="line">    message.what = FLAG_MSG;<span class="comment">//标识信息，以便用不同的方式处理Message</span></span><br><span class="line">    handler.sendMessage(message);<span class="comment">//立刻发送消息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"HandlerLeak"</span>)</span><br><span class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(msg.what==FLAG_MSG)&#123;</span><br><span class="line">            getTemperature();</span><br><span class="line">        &#125;</span><br><span class="line">        message = handler.obtainMessage(FLAG_MSG);<span class="comment">//从消息池获取空消息对象，标识为FLAG_MSG</span></span><br><span class="line">        handler.sendMessageDelayed(message,<span class="number">2000</span>); <span class="comment">// 延时2s发送</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-温度到达上限报警"><a href="#5-温度到达上限报警" class="headerlink" title="5.温度到达上限报警"></a>5.温度到达上限报警</h2><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"SetTextI18n"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//标题居中</span></span><br><span class="line">    TextView title = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</span><br><span class="line">    title.setText(<span class="string">"Warning!"</span>);</span><br><span class="line">    title.setPadding(<span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    title.setGravity(Gravity.CENTER);</span><br><span class="line">    <span class="comment">//创建对话框对象</span></span><br><span class="line">    AlertDialog alertDialog = <span class="keyword">new</span> AlertDialog.Builder(ShowTemp.<span class="keyword">this</span>).create();</span><br><span class="line">    alertDialog.setIcon(R.drawable.advise); <span class="comment">//设置对话框的图标</span></span><br><span class="line">    alertDialog.setCustomTitle(title);<span class="comment">//设置标题</span></span><br><span class="line">    <span class="comment">//设置要显示的内容</span></span><br><span class="line">    alertDialog.setMessage(<span class="string">"Temperature exceeds limit!"</span>);</span><br><span class="line">    alertDialog.setButton(DialogInterface.BUTTON_NEGATIVE, <span class="string">"Cancel reminder"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">            alarmFlag = <span class="keyword">false</span>;</span><br><span class="line">            allowCount = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    alertDialog.setButton(DialogInterface.BUTTON_POSITIVE, <span class="string">"Remind later"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">            alarmFlag = <span class="keyword">false</span>;</span><br><span class="line">            allowCount = <span class="keyword">true</span>;</span><br><span class="line">            count = <span class="number">0</span>;<span class="comment">//每点击一次稍后提醒就把count置0，重新计数2分钟</span></span><br><span class="line">            refreshCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    alertDialog.show();<span class="comment">//显示对话框</span></span><br><span class="line">    Button mNegativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);</span><br><span class="line">    Button mPositiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);</span><br><span class="line"></span><br><span class="line">    LinearLayout.LayoutParams mNegativeButtonLL = (LinearLayout.LayoutParams) mNegativeButton.getLayoutParams();</span><br><span class="line">    mNegativeButtonLL.weight = <span class="number">1</span>;</span><br><span class="line">    mNegativeButton.setLayoutParams(mNegativeButtonLL);</span><br><span class="line"></span><br><span class="line">    LinearLayout.LayoutParams mPositiveButtonLL = (LinearLayout.LayoutParams) mPositiveButton.getLayoutParams();</span><br><span class="line">    mPositiveButtonLL.weight = <span class="number">1</span>;</span><br><span class="line">    mPositiveButton.setLayoutParams(mPositiveButtonLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当点击取消提醒时，把允许弹窗的提示标志位置否。点击稍后提醒则开始计时。达到设定的时间后再次把允许弹窗的提示标志位置真。</p><p>当然可以弹窗时可以设置手机响铃和震动等，这个比较简单，这里就不贴具体代码了。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【教师节】谢谢老师为我们所作的一切</title>
      <link href="/2019/09/10/Teachers_day/"/>
      <url>/2019/09/10/Teachers_day/</url>
      
        <content type="html"><![CDATA[<p>高中毕业后，每当我觉得孤独时，我总会清晰地回忆起您在课堂上和课堂外告诉我们的一句话：</p><blockquote><p>带着勤奋和严谨工作、带着正直和善良做人、怀着爱心和温暖生活。</p></blockquote><p>清晰到足够我回忆起每个细节，似乎那天刚刚高二分班后第一次见面，您叫我去黑板上翻译英语短语的事情就发生在昨天。<br>谢谢您，阳老师，谢谢您曾经为我们所作的一切。教师节快乐！</p><a id="more"></a><p>Dear Miss Yang,</p><p>Time flies by, and a world of changes has occurred. Years have passed, it has been two years since I graduated from high school. The first time I met you  in high school seems to be yesterday. You asked me to translate English phrases on the blackboard. I still remember that day clearly.</p><p>Time went by, and I did a lot of wrong things. I let many people down. I regret very much when I think of it in my free time. Sorry , I am sorry about everything.</p><p>After graduating from high school, whenever I feel lonely and helpless, I often remember that you used to tell us that <strong>we should work hard, work with integrity, be kind and honest, and live with love and warmth.</strong></p><p>Our parents gave us a life and it was you who taught us how to live it. You introduced honesty, integrity and passion to our character. Happy teacher’s day 2019!</p><p>Thank you , For everything that you have done for us!</p><p>Sincerely</p><p>Your Student Stefan</p><hr><p>高中毕业后，每当我觉得孤独时，我总会清晰地回忆起您在课堂上和课堂外告诉我们的一句话：</p><blockquote><p>带着勤奋和严谨工作、带着正直和善良做人、怀着爱心和温暖生活。</p></blockquote><p>清晰到足够我回忆起每个细节，似乎那天刚刚高二分班后第一次见面，您叫我去黑板上翻译英语短语的事情就发生在昨天。</p><p><strong>谢谢您，阳老师，谢谢您曾经为我们所作的一切。教师节快乐！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>新大陆安卓端代码笔记（三）</title>
      <link href="/2019/09/06/Android_Code_newland_three/"/>
      <url>/2019/09/06/Android_Code_newland_three/</url>
      
        <content type="html"><![CDATA[<h2 id="新大陆安卓端代码笔记（三）"><a href="#新大陆安卓端代码笔记（三）" class="headerlink" title="新大陆安卓端代码笔记（三）"></a>新大陆安卓端代码笔记（三）</h2><p>在<a href="https://stefancharles.xyz/2019/09/04/Android_Code_newland_two/">新大陆安卓端代码笔记（二）</a>博客中，主要介绍了登陆的MenuActivity的前半部分，这一个博客将着手于MenuActivity中后半部分的一些关键点。</p><p>在阅读本博客前，推荐先阅读<a href="https://stefancharles.xyz/2019/09/06/ThreadAndMessage/">【Android】线程与消息处理</a>。因为本博客后文会着重写到关于新大陆安卓端的线程和消息处理方面的点。</p><p>文章不严谨和疏漏的地方在所难免，如果可以的话，请留言给我，感激不尽。</p><a id="more"></a><h2 id="1-轮询刷新数据"><a href="#1-轮询刷新数据" class="headerlink" title="1.轮询刷新数据"></a>1.轮询刷新数据</h2><p><img src="https://i.loli.net/2019/09/08/2TaYPwukiOSrZ36.png" alt="2323.png"></p><p>当确定了设备后，就需要每隔指定时间查询和更新“排队人数”。</p><p><img src="https://i.loli.net/2019/09/09/epmZXCsfKxAOP7I.png" alt="refreash.png"></p><p>在阅读下文前，推荐先阅读<a href="https://stefancharles.xyz/2019/09/06/ThreadAndMessage/">【Android】线程与消息处理</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message = Message.obtain();<span class="comment">//从消息池获取空消息对象</span></span><br><span class="line">message.what = FLAG_MSG;<span class="comment">//标识信息，以便用不同的方式处理Message</span></span><br><span class="line">handler.sendMessage(message);<span class="comment">//立刻发送消息</span></span><br></pre></td></tr></table></figure><h3 id="内部类泄露"><a href="#内部类泄露" class="headerlink" title="内部类泄露"></a>内部类泄露</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"HandlerLeak"</span>)</span><br></pre></td></tr></table></figure><p>关于内部类泄露，有位大佬在<a href="https://www.jianshu.com/p/21068fde1c82" target="_blank" rel="noopener">他的博客</a>里是这么写的：</p><blockquote><p>由于(匿名)内部类隐式地持有一个外部类的引用, 故而当内部类中执行的事情长于外部类的生命周期时, 就会导致外部类的泄露。常见的此类泄露包括Handler泄露, Thread泄露…, 这些也是我们经常会作为(匿名)内部类在Activity中使用的。</p></blockquote><p>因为这个Handler是一个内部类(默认持有一个外部类也就是我们的HandlerLeakActivity的引用), 如果这个Handler的Looper/MQ所在的Thread与Main Thread不同, 则没有问题. 但是如果Handler的Looper/MQ就是Main Thread(本例中就是), 那么问题就来了:</p><p>这个Handler发送的message会放到MQ中, 这个message会对Handler有一个引用, 而Handler有HandlerLeakActivity的引用. 当我们进入这个Activity, 然后退出, 理当销毁这个Activity并回收了. 但是因为这个message会延时60s, 故而导致这个mHandler被引用, 从而activity被引用着, 而无法回收释放内存。</p><p>这里就不细说，感兴趣的同学可以细读以下别人的博客。</p><h3 id="每隔5秒发送消息"><a href="#每隔5秒发送消息" class="headerlink" title="每隔5秒发送消息"></a>每隔5秒发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(msg.what==FLAG_MSG)&#123;</span><br><span class="line">              getpeoplenumber();</span><br><span class="line">          &#125;</span><br><span class="line">          message = handler.obtainMessage(FLAG_MSG);<span class="comment">//从消息池获取空消息对象，标识为FLAG_MSG</span></span><br><span class="line">          handler.sendMessageDelayed(message,<span class="number">5000</span>); <span class="comment">// 延时5秒发送</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>这里新创建一个消息处理类，每个MQ中的Message都要交由对应的handleMessage()方法处理，原因就是比对FLAG_MSG，如果是，则执行 getpeoplenumber()。然后再从消息池中获取一个空消息对象，标记为FLAG_MSG，并隔5秒再发送。也就是5秒后又执行一次 getpeoplenumber()。</p><p>这样也就实现了循环刷新数据。</p><h2 id="2-获取排队人数"><a href="#2-获取排队人数" class="headerlink" title="2.获取排队人数"></a>2.获取排队人数</h2><p>调用netWorkBusiness对象的一个getSensor() 方法，获取响应体存入BaseResponseEntity类实例化的baseResponseEntity对象，如果这个对象不为空，则使用json解析数据。提取其中Value的值即为排队人数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> Boolean flag1 = <span class="keyword">true</span>; <span class="comment">//是否再次提醒</span></span><br><span class="line"> <span class="keyword">if</span> (num &lt;= <span class="number">4</span>&amp;&amp;flag1) &#123;</span><br><span class="line">    dialog();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当获取到的前面排队的人数小于等于4并且再次提醒为真时，弹出对话框。对话框中有“取消提醒”和“退出排队”两个Button。当按下“取消提醒”则把 flag1置false。当按下“退出排队”时，需要把人数减少一个，把数据同步到云平台，再把flag置false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Boolean flag = <span class="keyword">true</span>; <span class="comment">//是否获取数据标志</span></span><br><span class="line"><span class="keyword">private</span> Boolean flag1 = <span class="keyword">true</span>; <span class="comment">//是否再次提醒</span></span><br></pre></td></tr></table></figure><h2 id="3-dialog-对话提示框"><a href="#3-dialog-对话提示框" class="headerlink" title="3.dialog()对话提示框"></a>3.dialog()对话提示框</h2><p>当前面排队人数只有三个人时，需要弹出对话框进行提示。这里用的Java写界面，这里就不过多强调了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dialog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//标题居中</span></span><br><span class="line">    TextView title = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</span><br><span class="line">    title.setText(<span class="string">"提示"</span>);</span><br><span class="line">    title.setPadding(<span class="number">0</span>,<span class="number">25</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    title.setGravity(Gravity.CENTER);</span><br><span class="line">    <span class="comment">//创建对话框对象</span></span><br><span class="line">    AlertDialog alertDialog = <span class="keyword">new</span> AlertDialog.Builder(MenuActivity.<span class="keyword">this</span>).create();</span><br><span class="line">    alertDialog.setIcon(R.drawable.advise); <span class="comment">//设置对话框的图标</span></span><br><span class="line">    alertDialog.setCustomTitle(title);<span class="comment">//设置标题</span></span><br><span class="line">    <span class="comment">//设置要显示的内容</span></span><br><span class="line">    alertDialog.setMessage(<span class="string">"前面仅剩3人,请立即到现场等候办理业务"</span>);</span><br><span class="line">    <span class="comment">//添加取消提醒按钮</span></span><br><span class="line">    alertDialog.setButton(DialogInterface.BUTTON_NEGATIVE,<span class="string">"取消提醒"</span>,<span class="keyword">new</span> DialogInterface.OnClickListener()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog,<span class="keyword">int</span> which)</span></span>&#123;</span><br><span class="line">        flag1 = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//添加放弃排队按钮</span></span><br><span class="line">    alertDialog.setButton(DialogInterface.BUTTON_POSITIVE, <span class="string">"放弃排队"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//放弃排队，人数减一</span></span><br><span class="line">            num = num -<span class="number">1</span>;</span><br><span class="line">            redusepeoplenumber(deviceID,<span class="string">"number_down"</span>,num);</span><br><span class="line">            <span class="comment">//放弃排队后，按键置灰，不更新数据</span></span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            ConfirmDevice.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">            GetData.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">            GetPastdata.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    alertDialog.show();<span class="comment">//显示对话框</span></span><br><span class="line">    <span class="comment">//按钮剧中设置</span></span><br><span class="line">    Button mNegativeButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);</span><br><span class="line">    Button mPositiveButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);</span><br><span class="line"></span><br><span class="line">    LinearLayout.LayoutParams mNegativeButtonLL = (LinearLayout.LayoutParams) mNegativeButton.getLayoutParams();</span><br><span class="line">    mNegativeButtonLL.weight = <span class="number">1</span>;</span><br><span class="line">    mNegativeButton.setLayoutParams(mNegativeButtonLL);</span><br><span class="line"></span><br><span class="line">    LinearLayout.LayoutParams mPositiveButtonLL = (LinearLayout.LayoutParams) mPositiveButton.getLayoutParams();</span><br><span class="line">    mPositiveButtonLL.weight = <span class="number">1</span>;</span><br><span class="line">    mPositiveButton.setLayoutParams(mPositiveButtonLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-放弃排队时同步数据到云平台"><a href="#4-放弃排队时同步数据到云平台" class="headerlink" title="4.放弃排队时同步数据到云平台"></a>4.放弃排队时同步数据到云平台</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redusepeoplenumber</span><span class="params">(String id,String apiTag,Object value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//设备id,标识符，值</span></span><br><span class="line">        netWorkBusiness.control(id, apiTag, value, <span class="keyword">new</span> Callback&lt;BaseResponseEntity&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;BaseResponseEntity&gt; call, Response&lt;BaseResponseEntity&gt; response)</span> </span>&#123;</span><br><span class="line">                BaseResponseEntity&lt;User&gt; baseResponseEntity = response.body(); <span class="comment">//获得返回体</span></span><br><span class="line">                <span class="keyword">if</span>( baseResponseEntity == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    Toast.makeText(MenuActivity.<span class="keyword">this</span>,<span class="string">"请求内容为空"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;BaseResponseEntity&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(MenuActivity.<span class="keyword">this</span>,<span class="string">"请求失败"</span>+t.getMessage(),Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-获取过去数据Activity"><a href="#5-获取过去数据Activity" class="headerlink" title="5.获取过去数据Activity"></a>5.获取过去数据Activity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GetPastdata.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dstatus == <span class="number">0</span>)&#123;</span><br><span class="line">            Intent intent=<span class="keyword">new</span> Intent(MenuActivity.<span class="keyword">this</span>,PastdataActivity.class);</span><br><span class="line">            Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">            bundle.putString(<span class="string">"accessToken"</span>,accessToken);</span><br><span class="line">            intent.putExtras(bundle);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">            finish();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Toast.makeText(MenuActivity.<span class="keyword">this</span>,<span class="string">"设备输入不正确或未确定设备"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>点击“查看历史数据”按钮时，新建一个Activity。跳转到另外一个界面。</p><p>由于需要绘制图表，所以这个界面需要图表控件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> LineChart lineChart;<span class="comment">//声明图表控件</span></span><br><span class="line">lineChart = findViewById(R.id.pastline);</span><br></pre></td></tr></table></figure><p>首先依然需要accessToken，使用Bundle接收从上一个Activity传过来的accessToken。实例化一个netWorkBusiness对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bundle bundle = getIntent().getExtras();</span><br><span class="line">String accessToken = bundle.getString(<span class="string">"accessToken"</span>);   <span class="comment">//获得传输秘钥</span></span><br><span class="line">netWorkBusiness = <span class="keyword">new</span> NetWorkBusiness(accessToken,<span class="string">"http://api.nlecloud.com:80/"</span>);</span><br></pre></td></tr></table></figure><p>然后展示图标控件。获取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lineChart = findViewById(R.id.pastline);</span><br><span class="line">showChart(lineChart);</span><br><span class="line">getPnumdata();</span><br></pre></td></tr></table></figure><h2 id="6-设置图表显示样式"><a href="#6-设置图表显示样式" class="headerlink" title="6.设置图表显示样式"></a>6.设置图表显示样式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showChart</span><span class="params">(LineChart lineChart)</span></span>&#123;</span><br><span class="line">    lineChart.setDrawBorders(<span class="keyword">false</span>);<span class="comment">//是否在折线图上添加边框</span></span><br><span class="line">    lineChart.setNoDataText(<span class="string">"暂无数据"</span>); <span class="comment">//没有数据时显示</span></span><br><span class="line">    lineChart.getAxisRight().setEnabled(<span class="keyword">false</span>);<span class="comment">//不显示y轴右边的值</span></span><br><span class="line">    XAxis xAxis = lineChart.getXAxis();</span><br><span class="line">    xAxis.setDrawAxisLine(<span class="keyword">false</span>);<span class="comment">//不显示x轴</span></span><br><span class="line">    <span class="comment">//设置x轴数据位置</span></span><br><span class="line">    xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);</span><br><span class="line">    xAxis.setTextColor(Color.BLACK);</span><br><span class="line">    xAxis.setTextSize(<span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-从云平台获取过去的人数响应体"><a href="#7-从云平台获取过去的人数响应体" class="headerlink" title="7.从云平台获取过去的人数响应体"></a>7.从云平台获取过去的人数响应体</h2><p>netWorkBusiness下有个getSensorData()方法。这里有很多参数说明在注释中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询传感数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deviceId  设备ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ApiTags   传感标识名（可选，多个用逗号分隔，最多50个）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Method    查询方式（1：XX分钟内 2：XX小时内 3：XX天内 4：XX周内 5：XX月内 6：按startDate与endDate指定日期查询）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> TimeAgo   与Method一起配对使用（当Method=1~5时），表示以现在起"多长时间范围内"的数据，例：(Method=2,TimeAgo=30)表示现在起30小时内的历史数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> StartDate 起始时间（可选，格式YYYY-MM-DD HH:mm:ss）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> EndDate   结束时间（可选，格式YYYY-MM-DD HH:mm:ss）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Sort      时间排序方式，DESC:倒序，ASC升序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> PageSize  指定每次要请求的数据条数，默认20，最多3000</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> PageIndex 指定页码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSensorData</span><span class="params">(String deviceId, String ApiTags, String Method, String TimeAgo, String StartDate, String EndDate, String Sort, String PageSize, String PageIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">                          NCallBack&lt;BaseResponseEntity&lt;SensorDataPageDTO&gt;&gt; callback)</span> </span>&#123;</span><br><span class="line">    apiService.getSensorData(deviceId, ApiTags, Method, TimeAgo, StartDate, EndDate, Sort, PageSize, PageIndex, accessToken).enqueue(callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-解析x轴和y轴数据并显示"><a href="#8-解析x轴和y轴数据并显示" class="headerlink" title="8.解析x轴和y轴数据并显示"></a>8.解析x轴和y轴数据并显示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">JSONObject jsonObject = <span class="keyword">null</span>;</span><br><span class="line">String msg = gson.toJson(baseResponseEntity);</span><br><span class="line">jsonObject = <span class="keyword">new</span> JSONObject(msg);   <span class="comment">//解析数据.</span></span><br><span class="line">JSONObject resultobj = jsonObject.getJSONObject(<span class="string">"ResultObj"</span>);</span><br><span class="line"><span class="keyword">int</span> count = Integer.parseInt(resultobj.get(<span class="string">"Count"</span>).toString());    <span class="comment">//获取记录数10</span></span><br><span class="line">JSONArray jsonArray = resultobj.getJSONArray(<span class="string">"DataPoints"</span>);</span><br><span class="line">JSONObject jsonObject1 = jsonArray.getJSONObject(<span class="number">0</span>);</span><br><span class="line">JSONArray jsonArray1 = jsonObject1.getJSONArray(<span class="string">"PointDTO"</span>);</span><br><span class="line">List&lt;HashMap&lt;String,Object&gt;&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">List&lt;Entry&gt; entries = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//C++模板</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">JSONObject resultObj1 = jsonArray1.getJSONObject(i);</span><br><span class="line">Pnum = resultObj1.get(<span class="string">"Value"</span>).toString();</span><br><span class="line">Time = resultObj1.get(<span class="string">"RecordTime"</span>).toString();</span><br><span class="line">entries.add(<span class="keyword">new</span> Entry(Float.parseFloat(Pnum),i));</span><br><span class="line">list.add(Time);</span><br><span class="line">&#125;</span><br><span class="line">LineDataSet lineDataSet = <span class="keyword">new</span> LineDataSet(entries,<span class="string">"历史排队人数"</span>);</span><br><span class="line">LineData Pdata = <span class="keyword">new</span> LineData(list,lineDataSet);</span><br><span class="line">lineChart.setData(Pdata);</span><br><span class="line">lineChart.setScaleEnabled(<span class="keyword">true</span>);</span><br><span class="line">lineChart.invalidate();</span><br></pre></td></tr></table></figure><p>这一段大致就是一层一层解析数据，找到自己需要的x轴和y轴的数据。</p><h2 id="JSONObject和JSONArray"><a href="#JSONObject和JSONArray" class="headerlink" title="JSONObject和JSONArray"></a>JSONObject和JSONArray</h2><h3 id="1-JSONObject"><a href="#1-JSONObject" class="headerlink" title="1.JSONObject"></a>1.JSONObject</h3><p> json对象，就是一个键对应一个值，使用的是大括号{ }，如：{key:value}</p><h3 id="2-JSONArray"><a href="#2-JSONArray" class="headerlink" title="2.JSONArray"></a>2.JSONArray</h3><p>json数组，使用中括号[ ],只不过数组里面的项也是json键值对格式的。Json对象中添加的是键值对，JSONArray中添加的是Json对象。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Android】线程与消息处理</title>
      <link href="/2019/09/06/ThreadAndMessage/"/>
      <url>/2019/09/06/ThreadAndMessage/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>对于比较耗时间的操作，通过会为其开辟一个单独的线程来执行，以尽可能减少用户的等待时间。在Android中，默认情况下，所有的操作都是在主线程下进行的，主线程负责管理与UI相关的事件，而在用户自己创建的子线程中，不能对UI组件进行操作。因此，Android提供了消息处理机制传递机制解决问题。</p><p>主要包括：</p><ul><li>1.如何创建和开启线程</li><li>2.如何让线程休眠</li><li>3.如何中断线程</li><li>4.循环者Looper</li><li>5.消息处理类Handler的应用</li><li>6.消息类Message的应用</li></ul><a id="more"></a><h2 id="1-创建线程"><a href="#1-创建线程" class="headerlink" title="1.创建线程"></a>1.创建线程</h2><p>在Android中，有两种创建线程的方法：</p><ul><li>可以使用Thread类的构造方法创建线程对象，并重写run()方法实现</li><li>通过实现runnable接口实现</li></ul><h3 id="通过Thread类的构造方法创建线程"><a href="#通过Thread类的构造方法创建线程" class="headerlink" title="通过Thread类的构造方法创建线程"></a>通过Thread类的构造方法创建线程</h3><p>在Android中，可以使用Thread类提供的构造方法来创建线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread(Runnable runnable)</span><br></pre></td></tr></table></figure><p>这个构造方法的参数runnable可以通过创建一个 Runnable类的对象并重写其run()方法实现。</p><p>例如创建一个名为thread的线程，示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//TODO...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="通过实现Runnable接口创建线程"><a href="#通过实现Runnable接口创建线程" class="headerlink" title="通过实现Runnable接口创建线程"></a>通过实现Runnable接口创建线程</h3><p>实现Runnable接口语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br></pre></td></tr></table></figure><p>当一个类实现Runnable接口后，还需要实现其run()方法，在run()方法中，可以编写需要执行的操作。</p><p>例如，要创建一个实现了Runnable接口的Activity，示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstaceState)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(saveInstanceState);</span><br><span class="line">    setContentView(R.layout.main);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//TODO...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-开启线程"><a href="#2-开启线程" class="headerlink" title="2.开启线程"></a>2.开启线程</h2><p>创建线程后，还需要开启线程，线程才能被执行。Thread类有start()方法用来启动线程。</p><p>例如有一个名为thread的线程，想要开启它，代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread.start();</span><br></pre></td></tr></table></figure><h2 id="3-线程的休眠"><a href="#3-线程的休眠" class="headerlink" title="3.线程的休眠"></a>3.线程的休眠</h2><p>线程的休眠就是让线程暂停一段时间后再执行。想要线程休眠一秒，代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="4-中断线程"><a href="#4-中断线程" class="headerlink" title="4.中断线程"></a>4.中断线程</h2><p>例如有一个名为thread的线程，想要中断它，代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">thread.interrupt();</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>值得注意的点是，如果在线程中执行了wait(),join(),sleep()方法时，线程的中断状态会被清除并抛出InterrupedException.</li></ul><p>如果想要在线程中执行wait(),join(),sleep()方法，就需要一个布尔型的标记变量记录线程的中断状态。可以通过这个标记变量来<strong>控制</strong>循环的执行和停止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isInterrput = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!isInterrupt)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当需要中断线程的时候，把isInterrput的值设置为true。</p><h2 id="5-Handler消息传递机制"><a href="#5-Handler消息传递机制" class="headerlink" title="5.Handler消息传递机制"></a>5.Handler消息传递机制</h2><p>在前面已经写到了在Android中如何创建，开启，休眠和中断线程。不过此时并没有在新创建的子线程中对UI界面上的内容进行操作。</p><p>假设直接在子线程run()中直接修改UI中的文本框或者其他，将会抛出异常。 </p><p>所以Android引入了 Handler消息传递机制，这样，在新创建的线程中操作UI界面。</p><h2 id="6-关于Looper"><a href="#6-关于Looper" class="headerlink" title="6.关于Looper"></a>6.关于Looper</h2><p>在细讲Handler之前，先得说下这个Looper。</p><blockquote><p>在Android中，一个线程对应一个Looper对象，一个Looper对象又对应一个MessageQueue，也就是MessageQueue被封装到了Looper中。MessageQueue用来存放Message,其Message按照FIFO原则执行。</p></blockquote><p>Looper对象用来为一个线程开启消息循环，从而操作MessageQueue。默认情况下，Android中新创建的线程是没有开启消息循环的，<strong>但主线程除外</strong>。<br>系统自动为主线程创建Looper对象，开启消息循环。<br>所以<strong>在主线程中</strong>，可以用下面的代码创建Handler对象，而不会出错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Handler handler2 = <span class="keyword">new</span> Handler():</span><br></pre></td></tr></table></figure><p>如果想要在非主线程中创建Handler对象，首先需要<strong>Looper类</strong>的prepare()方法来初始化一个<strong>Looper对象</strong>，然后创建Handler对象，再使用Looper类的loop()方法启动Looper，从消息队列中获取和处理消息。</p><blockquote><p>这里具体代码我暂时不举例了，后面有时间就补上。</p></blockquote><h2 id="7-Handler（消息处理类）"><a href="#7-Handler（消息处理类）" class="headerlink" title="7.Handler（消息处理类）"></a>7.Handler（消息处理类）</h2><p>消息处理类（ Handler）允许发送和处理Message和Runnable对象到其所在的线程的MessageQueue中。<br>Handler主要有以下作用：</p><ul><li><p>将Message和Runnable应用post()或者sendMessage()方法发送到MessageQueue中，在发送的时候可以指定延迟时间，发送时间和要携带的Bundle数据。当MessageQueue循环到这个特定的Message时，调用相应的Handler对象的handlerMessage()方法对其进行处理。</p></li><li><p>在子线程中与主线程进行通信，也就是在工作线程中与UI线程进行通信。</p></li></ul><blockquote><p>在一个线程中，只能有以一个Looper和MessageQueue，但是可以有多个Handler，这些Handler可以共享一个Looper和MessageQueue。</p></blockquote><h2 id="8-Message（消息类）"><a href="#8-Message（消息类）" class="headerlink" title="8.Message（消息类）"></a>8.Message（消息类）</h2><p>一个MessageQueue中可以有多个Message对象。每个Message对象可以通过Message.obtain或者Handler.obtainMessage()方法获得。</p><p>一个Message对象具有以下属性：</p><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">arg1</td><td align="center">int</td><td align="center">存放整形数据</td></tr><tr><td align="center">arg2</td><td align="center">int</td><td align="center">存放整形数据</td></tr><tr><td align="center">obj</td><td align="center">Object</td><td align="center">存放发送给接收器的Object类型的任意对象</td></tr><tr><td align="center">replyTo</td><td align="center">Messenger</td><td align="center">指定这个Messgae发送到何处的可选Messager对象</td></tr><tr><td align="center">what</td><td align="center">int</td><td align="center">指定用户自定义的消息代码，这样接收者可以了解这个消息的信息</td></tr></tbody></table><blockquote><p>使用Message类的属性可以携带int型数据，如果要携带其他类型的数据，可以先把数据保存到Bundle对象中，然后通过Message类的setData()方法将其添加到Message中。</p></blockquote><p>有以下几个点值得注意：</p><ul><li>尽管Message有public的默认构造方法，但是通常使用Message.obtain()或者Handler.obtainMessage()方法来从消息池中获取空消息对象。以节省资源。</li><li>如果一个Message只需要携带int，则用Message类自带的arg1,arg2比用Bundle更节省内存。</li><li>尽可能使用Message. what来标识信息，以便用不同方式处理Message。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新大陆安卓端代码笔记（二）</title>
      <link href="/2019/09/04/Android_Code_newland_two/"/>
      <url>/2019/09/04/Android_Code_newland_two/</url>
      
        <content type="html"><![CDATA[<h2 id="新大陆安卓端代码笔记（二）"><a href="#新大陆安卓端代码笔记（二）" class="headerlink" title="新大陆安卓端代码笔记（二）"></a>新大陆安卓端代码笔记（二）</h2><p>在<a href="https://stefancharles.xyz/2019/09/04/Android_Code_newland_one/">新大陆安卓端代码笔记（一）</a>中，主要介绍了登陆的activity，这一个博客将着手于MenuActivity中的关键点。</p><p>文章不严谨和疏漏的地方在所难免，如果可以的话，请留言给我，感激不尽。</p><a id="more"></a><h3 id="1-初始化控件"><a href="#1-初始化控件" class="headerlink" title="1.初始化控件"></a>1.初始化控件</h3><p>菜单界面大致如图：</p><p><img src="https://i.loli.net/2019/09/04/dfbN2RUaeDhG4El.png" alt="11.png"></p><p>在MenuActivity中首先对这些控件进行初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    EquipmentID = findViewById(R.id.equimentID); <span class="comment">//设备id</span></span><br><span class="line">    Pnumber = findViewById(R.id.pnumber);<span class="comment">//排队人数</span></span><br><span class="line">    Waittime = findViewById(R.id.waittime); <span class="comment">//等待时间</span></span><br><span class="line">    ConfirmDevice = findViewById(R.id.confirmDevice); <span class="comment">//确认设备</span></span><br><span class="line">    GetData = findViewById(R.id.getData); <span class="comment">//最新数据</span></span><br><span class="line">    GetPastdata = findViewById(R.id.getPastdata);<span class="comment">//历史数据</span></span><br><span class="line">    Bundle bundle = getIntent().getExtras();</span><br><span class="line">    accessToken = bundle.getString(<span class="string">"accessToken"</span>); <span class="comment">//获得传输密钥</span></span><br><span class="line">    netWorkBusiness = <span class="keyword">new</span> NetWorkBusiness(accessToken,<span class="string">"http://api.nlecloud.com:80/"</span>);<span class="comment">//进行登录连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个不怎么需要注意的点是，这里已经不在需要强制转换了。<br>findViewById前的强制类型转换是多余的。<br>如下所示是不必要的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mRvMsg = (RecyclerView)findViewById(R.id.rv_msg);</span><br><span class="line">mEtPort = (EditText) findViewById(R.id.et_port);</span><br></pre></td></tr></table></figure><h3 id="2-“确定设备”的点击事件"><a href="#2-“确定设备”的点击事件" class="headerlink" title="2.“确定设备”的点击事件"></a>2.“确定设备”的点击事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ConfirmDevice.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        getDeviceInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>点击确定设备按钮，调用getDeviceInfo()函数来确定设备是否存在。</p><p><img src="https://i.loli.net/2019/09/04/2LedotrxkgXKwfZ.png" alt="22.png"></p><p>这里涉及到Gson。</p><blockquote><p>Gson是一个可以用来将Java对象转换为JSON字符串的Java库。当然，它也可以把JSON字符串转换为等价的Java对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">"maplejaw"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age=<span class="number">18</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">//无参构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"> User obj = <span class="keyword">new</span> User();</span><br><span class="line"> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"> String json = gson.toJson(obj); </span><br><span class="line">  <span class="comment">// ==&gt; json is &#123;"name":"maplejaw","age":18&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line"> User obj2 = gson.fromJson(json, User.class);</span><br></pre></td></tr></table></figure><h4 id="提取Gson中设备存在的关键字Status"><a href="#提取Gson中设备存在的关键字Status" class="headerlink" title="提取Gson中设备存在的关键字Status"></a>提取Gson中设备存在的关键字Status</h4><p>首先需要知道获取设备ID返回的内容。</p><p>先去<a href="http://www.nlecloud.com/doc/api" target="_blank" rel="noopener">查询新大陆API</a>查看我们所需要的API请求方式和地址，包体请求参数等。</p><p>然后去<a href="http://www.nlecloud.com/tool/debugtool" target="_blank" rel="noopener">API在线调试</a>填入刚刚找到的相关请求网址等。</p><p><img src="https://i.loli.net/2019/09/04/fHgkdLWcZD1Upy7.png" alt="33.png"></p><p>从上面可以看出，如果设备存在，则Status返回0，否则返回非0.<br>所以这也就有以下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dstatus = (<span class="keyword">int</span>) jsonObject.get(<span class="string">"Status"</span>);</span><br><span class="line"><span class="keyword">if</span>(dstatus==<span class="number">0</span>)&#123;</span><br><span class="line">Toast.makeText(MenuActivity.<span class="keyword">this</span>,<span class="string">"欢迎使用设备"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Toast.makeText(MenuActivity.<span class="keyword">this</span>,<span class="string">"设备不存在,请确认"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line"><span class="keyword">return</span>;&#125;</span><br></pre></td></tr></table></figure><p>需要值得注意的是，AccessToken那一栏需要先用正确的账号登陆去发POST请求，得到AccessToken（很长）后复制进来。</p><h3 id="3-基本程序单元Activity"><a href="#3-基本程序单元Activity" class="headerlink" title="3.基本程序单元Activity"></a>3.基本程序单元Activity</h3><p>在Android中，Activity代表手机屏幕的一屏，在一个Activity中可以添加很多组件，这些组件负责具体的功能。<br>在一个Android应用中，可以有多个Activity，这些Activity组成了Activity栈，当前的Activity在栈顶，之前的Activity被压入下面，成为非活动的Activity。</p><h4 id="在Activity的生命周期中，有4个状态："><a href="#在Activity的生命周期中，有4个状态：" class="headerlink" title="在Activity的生命周期中，有4个状态："></a>在Activity的生命周期中，有4个状态：</h4><ul><li>活动状态：当前的Activity，在栈顶，可以获得焦点</li><li>暂停状态：没有焦点的Activity，可见，低内存时不被系统结束</li><li>停止状态：不可见，但是这个Activity保存状态和信息，低内存时可能被系统结束</li><li>销毁状态：Activity结束</li></ul><h4 id="一个Activity被系统回调的方法"><a href="#一个Activity被系统回调的方法" class="headerlink" title="一个Activity被系统回调的方法"></a>一个Activity被系统回调的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onCreate();<span class="comment">//创建Activity时</span></span><br><span class="line">onStart();<span class="comment">//启动Activity时</span></span><br><span class="line">onRestart():<span class="comment">//重启Activity时</span></span><br><span class="line">onPause():<span class="comment">//暂停Activity时</span></span><br><span class="line">onResume():<span class="comment">//Activity从暂停状态--&gt;活动状态</span></span><br><span class="line">onStop();<span class="comment">//停止Activity时</span></span><br><span class="line">onDestory():<span class="comment">//销毁Activity时</span></span><br></pre></td></tr></table></figure><h4 id="创建Activity"><a href="#创建Activity" class="headerlink" title="创建Activity"></a>创建Activity</h4><p>大致分为两个步骤：</p><p>（1）创建一个Activity，一般是继承某个Activity类，或者Activity子类。<br>具体代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)重写需要回调的方法。一般都要重写onCreate()方法，并且在该方法中调用setContentView()方法设置要显示的视图。<br>具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置Activity"><a href="#配置Activity" class="headerlink" title="配置Activity"></a>配置Activity</h4><p>创建了Activity后，还需要在AndroidManifest.xml中进行配置。如果没有配置就启动Activity则会报错。<br>在<application></application>标记中添加<activity></activity>标记。</p><p>格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:icon</span>=<span class="string">"@drawable/xx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:name</span>=<span class="string">"实现类"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:lable</span>=<span class="string">"说明文字"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:theme</span>=<span class="string">"主题"</span></span></span><br><span class="line"><span class="tag"><span class="attr">...</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>一个地方值得注意：icon栏中图标文件名不包括其拓展名</li></ul><h4 id="启动Activity"><a href="#启动Activity" class="headerlink" title="启动Activity"></a>启动Activity</h4><p>假设一个Android项目中有很多的Activity，这个时候要设置一个应用启动的入口Activity。<br>在AndroidManifest.xml中，如下代码设置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以使用startActivity()方法来启动需要的Activity，语法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent)</span></span></span><br></pre></td></tr></table></figure><ul><li>值得注意的是，该方法没有返回值，只有一个Intent类型的入口参数。</li></ul><blockquote><p>Intent是Android应用各组件之间的通信方式，一个Activity用过Intent来表达自己的“意图”，在创建Intent对象时，需要指定想要启动的Activity。</p></blockquote><p>关于Intent的具体用法我会在后面具体写。语法举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,MenuActivity.class);</span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">bundle.putString(<span class="string">"accessToken"</span>,accessToken);</span><br><span class="line">intent.putExtras(bundle);</span><br><span class="line">startActivity(intent);</span><br><span class="line">finish();</span><br></pre></td></tr></table></figure><ul><li>当然这里还涉及到bundle的用法，前面我稍微写了一部分，但是感觉理解的不够精髓，后面再详细写这个。</li></ul><h4 id="关闭Activity"><a href="#关闭Activity" class="headerlink" title="关闭Activity"></a>关闭Activity</h4><p>就如上面我举例的代码片段。方法是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>在对应的事件或者你觉得需要的地方调用finish()方法即可。</p><h3 id="4-多个Activity的使用"><a href="#4-多个Activity的使用" class="headerlink" title="4.多个Activity的使用"></a>4.多个Activity的使用</h3><p>在Android应用中，很多Activity之间经常需要交换数据，下面介绍怎么使用Bundle在Activity之间交换数据，以及如何调用另外一个Activity并返回结果。</p><h4 id="使用Bundle在Activity之间交换数据"><a href="#使用Bundle在Activity之间交换数据" class="headerlink" title="使用Bundle在Activity之间交换数据"></a>使用Bundle在Activity之间交换数据</h4><p>在Android中，可以将要保存的数据放在Bundle对象中，然后通过Intent提供的putExtras()方法将要携带的数据保存在Intent中。<br>在MainActivity中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,MenuActivity.class);</span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">bundle.putString(<span class="string">"accessToken"</span>,accessToken);</span><br><span class="line">intent.putExtras(bundle);</span><br><span class="line">startActivity(intent);</span><br><span class="line">finish();</span><br></pre></td></tr></table></figure><p>在MenuActivity中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bundle bundle = getIntent().getExtras();</span><br><span class="line">accessToken = bundle.getString(<span class="string">"accessToken"</span>); <span class="comment">//获得传输密钥</span></span><br></pre></td></tr></table></figure><h4 id="调用另外Activity并返回结果"><a href="#调用另外Activity并返回结果" class="headerlink" title="调用另外Activity并返回结果"></a>调用另外Activity并返回结果</h4><p>有时需要在一个Activity中调用另外一个Activity，当用户在第二个Activity中操作好后，程序自动返回到第一个Activity。<br>第一个Activity必须能够获取用户在第二个Activity中选择的结果。这个也是通过Intent和bundle来实现，不过区别在于这个时候需要使用startActivityForResult()方法来启动另外一个Activity。</p><h5 id="（1）在MainActivity中设置请求码常量"><a href="#（1）在MainActivity中设置请求码常量" class="headerlink" title="（1）在MainActivity中设置请求码常量"></a>（1）在MainActivity中设置请求码常量</h5><p>请求码即requestCode，这个可以自己设置一个值，这是为了让程序知道返回的数据是来自于哪一个新的Activity。<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> CODE = <span class="number">0x01</span>;</span><br></pre></td></tr></table></figure><h5 id="（2）启用新的Activity"><a href="#（2）启用新的Activity" class="headerlink" title="（2）启用新的Activity"></a>（2）启用新的Activity</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startActivityForResult(intent,CODE);</span><br></pre></td></tr></table></figure><h5 id="（3）在新的Activity中设置返回的结果码"><a href="#（3）在新的Activity中设置返回的结果码" class="headerlink" title="（3）在新的Activity中设置返回的结果码"></a>（3）在新的Activity中设置返回的结果码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</span><br><span class="line">    setResult(<span class="number">0x01</span>,intent);</span><br><span class="line">    finish():</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（4）在第一个Activity中重写onActivityResult-方法"><a href="#（4）在第一个Activity中重写onActivityResult-方法" class="headerlink" title="（4）在第一个Activity中重写onActivityResult()方法"></a>（4）在第一个Activity中重写onActivityResult()方法</h5><p>在这个方法中，需要判断resultCode结果码和预先设置的相同，如果相同则做应该做的事情。关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode,<span class="keyword">int</span> resultCode ,Intent data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityResult(requestCode , resultCode, data);</span><br><span class="line">    <span class="keyword">if</span>(requestCode == CODE &amp;&amp; resultCode == CODE)&#123;</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>.....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Intent对象"><a href="#5-Intent对象" class="headerlink" title="5.Intent对象"></a>5.Intent对象</h3><p>在Intent对象中，包含接收这个Intent的组件感兴趣的信息（比如执行的操作和数据），以及Android系统感兴趣的信息（比如处理这个 Intent的类别和任何启动目标Activity的说明）</p><p>Intent可以分为显式和隐式两类。</p><blockquote><p>显式Intent通过组件名称来指定目标组件。由于其他应用程序的组件名称对于开发人员通常是未知的，所以显式Intent通常用于应用程序内部消息，例如Activity启动子Service或者其他Activity。</p></blockquote><blockquote><p>隐式Intent不指定组件名称，通常用来激活其他应用程序的组件。在缺乏指定目标时，Android系统需要找到处理Intent的最佳组件。即单个的Activity或者Service来执行请求动作或者一组BroadcastReceiver来响应广播通知。这个是通过比较Intent对象内容和Intent过滤器来实现的。</p></blockquote><blockquote><p>Intent过滤器是与组件关联的结构，它可以潜在地接受Intent。如果组件没有任何Intent过滤器，就只能接受显式Intent；如果组件有Intent过滤器，则可以接受显式和隐式的Intent。</p></blockquote><p>Intent包括：</p><ul><li>组件名称(Component Name)</li><li>动作(Action)</li><li>数据(Data)</li><li>种类(Category)</li><li>额外(Extras)</li><li>标记(Flags)</li></ul><p>等内容。<br>关于上面的内容不详细展开，具体的可以去Android的官方文档查看。<br>这里写一些需要注意的点。</p><p>举例：<br>标准Activity动作：常量ACTION_MAIN对应说明为“作为初始的Activity启动，没有数据输入/输出”。</p><p><strong>在使用这些动作的时候，需要将其转换为对应字符串信息。例如将ACTION_MAIN转换为android.intent.action.MAIN。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>关于Intent过滤器本身还有很多内容，我这里暂时不深究。因为这次项目中涉及不深，后面有机会再加。</li></ul><h2 id="下一篇博客传送门"><a href="#下一篇博客传送门" class="headerlink" title="下一篇博客传送门"></a>下一篇博客传送门</h2><p>点击这里—&gt;<a href="https://stefancharles.xyz/2019/09/04/Android_Code_newland_three/">新大陆安卓端代码笔记（三）</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新大陆安卓端代码笔记（一）</title>
      <link href="/2019/09/04/Android_Code_newland_one/"/>
      <url>/2019/09/04/Android_Code_newland_one/</url>
      
        <content type="html"><![CDATA[<h2 id="新大陆安卓端代码笔记（一）"><a href="#新大陆安卓端代码笔记（一）" class="headerlink" title="新大陆安卓端代码笔记（一）"></a>新大陆安卓端代码笔记（一）</h2><p>距离比赛还有一个月，暑假就稍微学了一下安卓端的皮毛，现在临时我被任命为一个参赛小组的安卓端代码的负责人。生活太难了。</p><p>学习过程中记录一下学习过程中的心得和问题，以备不时之需。</p><p>文章不严谨和疏漏的地方在所难免，如果可以的话，请留言给我，感激不尽。</p><a id="more"></a><h3 id="Bundle-的使用"><a href="#Bundle-的使用" class="headerlink" title="Bundle 的使用"></a>Bundle 的使用</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Bundle类是一个key-value对，“A mapping from String values to various Parcelable types.”</p><p>两个activity之间的通讯可以通过bundle类来实现</p><h4 id="步骤代码"><a href="#步骤代码" class="headerlink" title="步骤代码"></a>步骤代码</h4><h4 id="1-new一个bundle类"><a href="#1-new一个bundle类" class="headerlink" title="1.new一个bundle类"></a>1.new一个bundle类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bundle bundle=<span class="keyword">new</span> Bundle();</span><br></pre></td></tr></table></figure><h4 id="2-bundle压入数据"><a href="#2-bundle压入数据" class="headerlink" title="2.bundle压入数据"></a>2.bundle压入数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle.putString(<span class="string">"accessToken"</span>,accessToken);</span><br></pre></td></tr></table></figure><h4 id="3-new一个intent对象，并将bundle加入intent中"><a href="#3-new一个intent对象，并将bundle加入intent中" class="headerlink" title="3.new一个intent对象，并将bundle加入intent中"></a>3.new一个intent对象，并将bundle加入intent中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent intent=<span class="keyword">new</span> Intent();</span><br><span class="line">intent.setClass=(MainActivity.<span class="keyword">this</span>,target.class);</span><br><span class="line">intent.putExtras(bundle);</span><br><span class="line"><span class="comment">//or use </span></span><br><span class="line"><span class="comment">// intent putExtra("acesstoken",bundle);</span></span><br></pre></td></tr></table></figure><h4 id="4-在目标class中提取数据"><a href="#4-在目标class中提取数据" class="headerlink" title="4.在目标class中提取数据"></a>4.在目标class中提取数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bundle bundle = getIntent().getExtras();   </span><br><span class="line">String data = bundle.getString(<span class="string">"Data"</span>);<span class="comment">//读出数据</span></span><br></pre></td></tr></table></figure><h4 id="5-详细使用"><a href="#5-详细使用" class="headerlink" title="5.详细使用"></a>5.详细使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bundle bundle = getIntent().getExtras();</span><br><span class="line">accessToken = bundle.getString(<span class="string">"accessToken"</span>); <span class="comment">//获得传输密钥</span></span><br></pre></td></tr></table></figure><p>getIntent得到一个Intent，是指上一个activity启动的intent，这个方法返回intent对象，然后调用intent.getExtras（）得到intent所附带的额外数据。</p><p>其实可以这么看，在MainActivity中，我们先需要登陆，看下面这段代码：</p><p><img src="https://i.loli.net/2019/09/04/IYZLBJqyQngNd5p.png" alt="mainact.png"></p><p>在一开始实例化一个netWorkBusiness对象，这个对象里有一个signIn的方法，实例化的时候NetWorkBusiness类需要两个参数，一个是accessToken，另外一个是platformAddress。正确登陆后才能获取accessToken，这里还没登陆，所以先传入空，但是不影响。因为可以查看NetWorkBusiness类中其对应方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signIn</span><span class="params">(SignIn signIn, Callback&lt;BaseResponseEntity&lt;User&gt;&gt; callback)</span> </span>&#123;</span><br><span class="line">        apiService.signIn(signIn).enqueue(callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这里有没有正确的accessToken并不影响signIn方法的调用。<br>下面再获取BaseResponseEntity，包括以下数据成员，</p><p><img src="https://i.loli.net/2019/09/04/bTLNha3uKV8FlOm.png" alt="2.png"></p><p>BaseResponseEntity<t>中的T是User，包括下面数据成员，</t></p><p><img src="https://i.loli.net/2019/09/04/tkaDs6uW3xgJ29o.png" alt="3.png"></p><p>下图：</p><p><img src="https://i.loli.net/2019/09/04/DULS4btgymApjuV.png" alt="4.png"></p><p>关键在于，实例化的baseResponseEntity对象中，有<user>类的一个方法叫做getResultObj()，这个方法返回ResultObj，getAccessToken()也是其方法，返回accessToken。</user></p><p>蓝色圈的语句是把用户名和密码配置保存起来，下次打开app的时候可以直接登陆。<br>我认为这里可能有很不安全的因素，一般使用SharedPreferences来保存软件配置信息，这里密码直接如从保存应该不安全。</p><p>这个项目这里不是重点，所以就不做深究。</p><p>上图橙色圈的语句为下一个界面“埋下伏笔”，将获取好了的accessToken传递到MenuActivity。<br>如下图：</p><p><img src="https://i.loli.net/2019/09/04/dmoI7qb5eCNV34n.png" alt="5.png"></p><p>在MenuActivity中的init()函数中接住accessToken，并new一个netWorkBusiness对象。</p><h4 id="额外的点"><a href="#额外的点" class="headerlink" title="额外的点"></a>额外的点</h4><p>这里账号密码保存再多写几句。</p><p>在这篇博客中非常不详细地介绍了<br><a href="https://stefancharles.xyz/2019/09/04/SharedPreferences/">SharedPreferences</a>，这用来保存第一次输入的账号和密码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sp = getSharedPreferences(<span class="string">"nlecloud"</span>,MODE_PRIVATE);</span><br><span class="line">editor = sp.edit();</span><br></pre></td></tr></table></figure><p>这里sp对象用来读取SharedPreferences中的数据，editor用来向SharedPreferences中写入数据。<br>sp的声明是 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SharedPreferences sp；</span><br></pre></td></tr></table></figure><p>sp是SharedPreferences的类型的对象。</p><p>（经过罗老板的指点）第一句调用getSharedPreferences方法背后生成一个名为nlecloud的SharedPreferences文件，</p><p>第二句，editor的声明是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SharedPreferences.Editor editor;</span><br></pre></td></tr></table></figure><p>差不多理解为editor是SharedPreferences的叫做Editor的子类的类型的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(sp.getString(<span class="string">"username"</span>,_username)!=<span class="keyword">null</span>&amp;&amp;sp.getString(<span class="string">"passwod"</span>,_password)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(!sp.getString(<span class="string">"username"</span>,_username).equals(<span class="string">""</span>)&amp;&amp;!sp.getString(<span class="string">"password"</span>,_password).equals(<span class="string">""</span>))&#123;</span><br><span class="line">               username.setText(sp.getString(<span class="string">"username"</span>,<span class="string">"1"</span>)); <span class="comment">//判断SharedPreferences文件中，用户名、密码是否存在</span></span><br><span class="line">               password.setText(sp.getString(<span class="string">"password"</span>,<span class="string">"2"</span>)); <span class="comment">//第二个参数是该值如果获取不到的默认值</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>下一次应用开启时执行上面的过程。</p><h3 id="下一篇博客传送门"><a href="#下一篇博客传送门" class="headerlink" title="下一篇博客传送门"></a>下一篇博客传送门</h3><p>点击这里—&gt;<a href="https://stefancharles.xyz/2019/09/04/Android_Code_newland_two/">新大陆安卓端代码笔记（二）</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Android】数据存储 SharedPreferences 存储类</title>
      <link href="/2019/09/04/SharedPreferences/"/>
      <url>/2019/09/04/SharedPreferences/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在Android开发中，经常需要将少量简单类型数据保存在本地，如：用户设置，用户登录名等。这些需要保存的数据可能一两个字符串，像这样的数据一般选择使用SharedPreferences来保存。</p><blockquote><p>SharedPreferences：一个轻量级的存储类，特别适合用于保存软件配置参数。用xml文件存放数据。SharedPreferences可以保存的数据类型有：int、boolean、float、long、String、StringSet。</p></blockquote><a id="more"></a><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><p>保存数据一般分为四个步骤：</p><ul><li>使用Activity类的getSharedPreferences方法获得SharedPreferences对象；</li><li>使用SharedPreferences接口的edit获得SharedPreferences.Editor对象；</li><li>通过SharedPreferences.Editor接口的putXXX方法保存key-value对；</li><li>通过过SharedPreferences.Editor接口的commit方法保存key-value对。</li></ul><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><ul><li>使用Activity类的getSharedPreferences方法获得SharedPreferences对象；</li><li>通过SharedPreferences对象的getXXX方法获取数据；</li></ul><h2 id="示例方法"><a href="#示例方法" class="headerlink" title="示例方法"></a>示例方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SharedPreferences sp;</span><br><span class="line">sp = getSharedPreferences(<span class="string">"nlecloud"</span>,MODE_PRIVATE;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>name：命名</li><li>mode：模式，包括</li><li>MODE_PRIVATE（只能被自己的应用程序访问）</li><li>MODE_WORLD_READABLE（除了自己访问外还可以被其它应该程序读取）</li><li>MODE_WORLD_WRITEABLE（除了自己访问外还可以被其它应该程序读取和写入）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SharedPreferences.Editor editor;</span><br><span class="line">editor = sp.edit();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SharedPreferences </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WareHouse</title>
      <link href="/2019/08/30/projects/Warehouse/"/>
      <url>/2019/08/30/projects/Warehouse/</url>
      
        <content type="html"><![CDATA[<h2 id="WareHouse-Management"><a href="#WareHouse-Management" class="headerlink" title="WareHouse Management"></a>WareHouse Management</h2><h3 id="本文分为以下几个部分："><a href="#本文分为以下几个部分：" class="headerlink" title="本文分为以下几个部分："></a>本文分为以下几个部分：</h3><ul><li>1.团队成员</li><li>2.需求分析</li><li>3.系统设计</li><li>4.程序实现</li><li>5.程序测试</li></ul><a id="more"></a><h3 id="1-团队成员"><a href="#1-团队成员" class="headerlink" title="1.团队成员"></a>1.团队成员</h3><p>点击 <a href="https://stefancharles.xyz/friends/">这里</a> 查看团队成员。</p><h3 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2.需求分析"></a>2.需求分析</h3><h4 id="①-环境说明"><a href="#①-环境说明" class="headerlink" title="① 环境说明"></a>① 环境说明</h4><ul><li>Windows 10 1903</li><li>Qt 5.9.0</li><li>C++</li></ul><h4 id="②-功能需求说明"><a href="#②-功能需求说明" class="headerlink" title="② 功能需求说明"></a>② 功能需求说明</h4><p><img src="https://i.loli.net/2019/08/30/FCsVB1rckbUve8L.png" alt="ana.png"></p><h4 id="③-约束说明"><a href="#③-约束说明" class="headerlink" title="③ 约束说明"></a>③ 约束说明</h4><p><img src="https://i.loli.net/2019/08/30/5rZVzhUFWKJNYPm.png" alt="yueshu.png"></p><h4 id="④-逻辑说明"><a href="#④-逻辑说明" class="headerlink" title="④ 逻辑说明"></a>④ 逻辑说明</h4><ul><li>在卖出时，如果所有货物已经全部卖出，要提示用户“所有货物已卖出”，并删除该货物在数据库中的记录；如果卖出数量大于库存，则卖出失败。</li><li>查找包含两个子功能，查询记录和显示结果，表格中说明的是查找商品的约束条件，显示库存不需用用户输入其他信息。</li><li>每类货物有一个ID，ID相同被看作为同一类</li><li>查找功能两个查询条件是或的关系，即只要输入ID或商品名字就可以查询，如果两个都输入那么将会输入ID匹配以及name匹配的所有货物。</li><li>最大容量1500.</li></ul><h4 id="⑤-数据流图"><a href="#⑤-数据流图" class="headerlink" title="⑤ 数据流图"></a>⑤ 数据流图</h4><p><img src="https://i.loli.net/2019/08/30/ufFe2o4msaSgqbU.png" alt="数据流.png"></p><h4 id="⑥-用例图"><a href="#⑥-用例图" class="headerlink" title="⑥ 用例图"></a>⑥ 用例图</h4><p><img src="https://i.loli.net/2019/08/30/O4pvBYzkHIVRebE.png" alt="uml.png"></p><h3 id="3-系统设计"><a href="#3-系统设计" class="headerlink" title="3.系统设计"></a>3.系统设计</h3><h4 id="①-类图设计"><a href="#①-类图设计" class="headerlink" title="① 类图设计"></a>① 类图设计</h4><p><img src="https://i.loli.net/2019/08/30/76LD51PFXidCqxm.png" alt="类图.png"></p><h4 id="②-MVP架构说明"><a href="#②-MVP架构说明" class="headerlink" title="② MVP架构说明"></a>② MVP架构说明</h4><p> MVP从MVC演变而来，通过表示器将视图与模型巧妙地分开。在该模式中，视图通常由表示器初始化，它呈现用户界面（UI）并接受用户所发出命令，但不对用户的输入作任何逻辑处理，而仅仅是将用户输入转发给表示器。通常每一个视图对应一个表示器，但是也可能一个拥有较复杂业务逻辑的视图会对应多个表示器，每个表示器完成该视图的一部分业务处理工作，降低了单个表示器的复杂程度，一个表示器也能被多个有着相同业务需求的视图复用，增加单个表示器的复用度。表示器包含大多数表示逻辑，用以处理视图，与模型交互以获取或更新数据等。模型描述了系统的处理逻辑，模型对于表示器和视图一无所知。</p><p><img src="https://i.loli.net/2019/08/30/7fvDaUJBdsrLjKT.png" alt="ui.png"></p><p> 目的是实现一种动态的程序设计，使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。除此之外，此模式透过对复杂度的简化，使程序结构更加直观。软件系统透过对自身基本部分分离的同时也赋予了各个基本部分应有的功能。专业人员可以依据自身的专长分组。</p><p><img src="https://i.loli.net/2019/08/30/czepSv4ZIqXiEPL.png" alt="sources.png"></p><ul><li>①     MainWindow负责用户界面，即View，获取用户输入或将执行结果显示给用户，在仓库管理系统中，它主要是获取用户指令是买入、卖出、查找还是清空仓库，并根据用户不同的输入来改变界面以适合相应的操作。然后如果是买入、卖出或者查找，还需要用户输入货物的相关信息。等这些信息都录入完毕，它就向下层发送相关指令，进行处理。最后等下层处理完后，会返回处理结果，MainWindown在负责把处理结果显示给用户。</li><li>②    Warehouse负责逻辑处理，即Presenter, 根据用户的输入，进行判断，并将需要进行数据库操作的信号传给下层，同时负责把下层处理结果传递给上层。</li><li>③    Database负责数据库操作，即Modle,接收从上层传来的数据，并按照指令更新数据库或返回相应数据。</li><li>④    Goods类是表示货物的实体类。是为了方便表示而存在。</li></ul><h4 id="③-异常处理"><a href="#③-异常处理" class="headerlink" title="③ 异常处理"></a>③ 异常处理</h4><ul><li>①    在程序中使用try，throw,catch异常处理方法。在遇到系统无法处理的异常情况时，会直接抛出异常，显示给用户，部分异常抛出信息中有对用户操作的建议，比如“物品Id和name不匹配”。</li></ul><ul><li>②    为了避免用户输入导致系统奔溃，收到用户输入后在Warehouse类中进行检查其是否符合上表中的约束，在保证安全后在传给下层。</li></ul><h4 id="④-已实现和未实现的内容"><a href="#④-已实现和未实现的内容" class="headerlink" title="④ 已实现和未实现的内容"></a>④ 已实现和未实现的内容</h4><ul><li><input checked disabled type="checkbox"> 使用登录界面，保证只有密码用户才能进入系统</li><li><input checked disabled type="checkbox"> 较为漂亮的UI界面</li><li><input checked disabled type="checkbox"> 登录界面掩码</li><li><input checked disabled type="checkbox"> 使用本地数据库管理仓库数据</li><li><input checked disabled type="checkbox"> 核心业务与上层UI分离</li><li><input checked disabled type="checkbox"> 对商品CRUD的操作</li><li><input disabled type="checkbox"> 连接云数据库，例如阿里云主机</li><li><input disabled type="checkbox"> FluentDesing</li><li><input disabled type="checkbox"> 新建登录用户</li></ul><h3 id="4-程序实现"><a href="#4-程序实现" class="headerlink" title="4.程序实现"></a>4.程序实现</h3><h4 id="1-good-h"><a href="#1-good-h" class="headerlink" title="1.good.h"></a>1.good.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> GOOD_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GOOD_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Goods();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> Id_i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(QString name_i)</span></span>;</span><br><span class="line">    <span class="function">QString <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count_i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    QString name;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// GOOD_H</span></span></span><br></pre></td></tr></table></figure><h4 id="2-login-h"><a href="#2-login-h" class="headerlink" title="2.login.h"></a>2.login.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LOGIN_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGIN_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> :</span> <span class="keyword">public</span> QDialog</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Login</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~Login();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_pushButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Login *ui;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// LOGIN_H</span></span></span><br></pre></td></tr></table></figure><h4 id="3-MainWindow-h"><a href="#3-MainWindow-h" class="headerlink" title="3.MainWindow.h"></a>3.MainWindow.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"warehouse.h"</span></span></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~MainWindow();</span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_addGoods_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_delGoods_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_showGoods_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_search_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_empty_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_ok_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_exit_clicked</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line">    <span class="keyword">char</span> commod;</span><br><span class="line">    Warehouse wre;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br></pre></td></tr></table></figure><h4 id="4-Warehouse-h"><a href="#4-Warehouse-h" class="headerlink" title="4.Warehouse.h"></a>4.Warehouse.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WAREHOUSE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WAREHOUSE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"good.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"database.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALL 1500</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warehouse</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warehouse</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Warehouse();</span><br><span class="line">    ~Warehouse();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">empty</span><span class="params">()</span></span>;<span class="comment">//初始化储存商品信息的vector</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">inputCheck</span><span class="params">(<span class="built_in">string</span> &amp;id, QString &amp;name, <span class="built_in">string</span> &amp;count)</span></span>;<span class="comment">//检查用户输入的商品名和数量是否合法</span></span><br><span class="line">    <span class="comment">//买入：</span></span><br><span class="line">    <span class="comment">//买入，对应买入模块，表示当前进货一批数量为count的name商品</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">add_goods</span><span class="params">(<span class="built_in">string</span> id,QString name, <span class="built_in">string</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新库存列表，对应新增商品子功能，新增name商品且初始数量为count</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">add_to_list</span><span class="params">(<span class="keyword">int</span> id,QString name, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//卖出：</span></span><br><span class="line">    <span class="comment">//卖出，对应卖出模块，表示当前出货一批数量为count的name商品</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">delete_goods</span><span class="params">(<span class="built_in">string</span> id,<span class="built_in">string</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询：</span></span><br><span class="line">    <span class="comment">///显示当前库存列表，包括商品名及其库存量</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show_goods</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//查看仓库中的name商品</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">find_goods</span><span class="params">(QString id, QString name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">readGoodsFromDataBase</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;Goods&gt; goods;</span><br><span class="line">    Database db;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">stringToNum</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span><span class="params">(str)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        iss &gt;&gt; num;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125; <span class="comment">//模板，将字符串类型的变量变为int型</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// WAREHOUSE_H</span></span></span><br></pre></td></tr></table></figure><h4 id="5-连接QSQLITE"><a href="#5-连接QSQLITE" class="headerlink" title="5.连接QSQLITE"></a>5.连接QSQLITE</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"database.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSqlDatabase&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSqlError&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSqlQuery&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QVariant&gt;</span></span></span><br><span class="line"><span class="keyword">bool</span> Database::connect(<span class="keyword">const</span> QString &amp;dbName)</span><br><span class="line">&#123;</span><br><span class="line">    QSqlDatabase db = QSqlDatabase::addDatabase(<span class="string">"QSQLITE"</span>);</span><br><span class="line">    db.setHostName(<span class="string">"localhost"</span>);</span><br><span class="line">    db.setDatabaseName(<span class="string">"dbname"</span>);</span><br><span class="line">    db.setUserName(<span class="string">"stefan"</span>);</span><br><span class="line">    db.setPassword(<span class="string">"pwd123"</span>);</span><br><span class="line">    db.setDatabaseName(dbName);</span><br><span class="line">    <span class="keyword">if</span> (!db.open()) &#123;</span><br><span class="line">        QMessageBox::critical(<span class="number">0</span>, QObject::tr(<span class="string">"Database Error"</span>), db.lastError().text());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">bool</span> Database::creatDataBase()</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (connect(<span class="string">"demo.db"</span>))</span><br><span class="line">     &#123;</span><br><span class="line">         QSqlQuery query;</span><br><span class="line">           <span class="comment">//判断表是否已经存在</span></span><br><span class="line">         QString sql = QString(<span class="string">"select * from sqlite_master where name='%1'"</span>).arg(<span class="string">"goods"</span>);</span><br><span class="line">         query.exec(sql);</span><br><span class="line">         <span class="keyword">if</span>(query.next())</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">         query.finish();</span><br><span class="line">         <span class="keyword">if</span> (!query.exec(<span class="string">"CREATE TABLE goods("</span></span><br><span class="line">                         <span class="string">"id INT,"</span></span><br><span class="line">                         <span class="string">"name VARCHAR,"</span></span><br><span class="line">                         <span class="string">"number INT)"</span>)) &#123;</span><br><span class="line">             QMessageBox::critical(<span class="number">0</span>, QObject::tr(<span class="string">"Database Error"</span>),</span><br><span class="line">                                   query.lastError().text());</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">bool</span> Database::writeAnItemToDataBase(<span class="keyword">int</span> id_in, QString name_in, <span class="keyword">int</span> number_in)</span><br><span class="line"> &#123;</span><br><span class="line">     QSqlQuery query;</span><br><span class="line">    <span class="keyword">if</span>(number_in == <span class="number">-1</span>)</span><br><span class="line">    &#123;<span class="comment">//删除指定商品</span></span><br><span class="line">        query.prepare(<span class="string">"delete from goods where id = :id_in"</span>);</span><br><span class="line">        query.bindValue(<span class="string">":id_in"</span>, id_in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!query.exec())</span><br><span class="line">        &#123;</span><br><span class="line">            QMessageBox::critical(<span class="number">0</span>, QObject::tr(<span class="string">"Database Error -1"</span>),</span><br><span class="line">                                  query.lastError().text());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    query.prepare(<span class="string">"select * from goods where id = :id_in"</span>);</span><br><span class="line">    query.bindValue(<span class="string">":id_in"</span>, id_in);</span><br><span class="line">    query.exec();</span><br><span class="line">    <span class="keyword">if</span>(query.next())</span><br><span class="line">    &#123;<span class="comment">//如果该商品存在，那么更新它的数据</span></span><br><span class="line">        query.finish();</span><br><span class="line">        query.prepare(<span class="string">"update goods set number = :number_in where id = :id_in"</span>);</span><br><span class="line">        query.bindValue(<span class="string">":id_in"</span>,id_in);</span><br><span class="line">        query.bindValue(<span class="string">":number_in"</span>, number_in);</span><br><span class="line">        <span class="keyword">if</span>(!query.exec())</span><br><span class="line">        &#123;</span><br><span class="line">            QMessageBox::critical(<span class="number">0</span>, QObject::tr(<span class="string">"Database Error-2"</span>),</span><br><span class="line">                                  query.lastError().text());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;<span class="comment">//如果不存在这个商品，那个添加这个商品</span></span><br><span class="line">        query.finish();</span><br><span class="line">        query.prepare(<span class="string">"insert into goods(id, name, number) values(:id_in,:name_in,:number_in)"</span>);</span><br><span class="line">        query.bindValue(<span class="string">":id_in"</span>,id_in);</span><br><span class="line">        query.bindValue(<span class="string">":name_in"</span>,name_in);</span><br><span class="line">        query.bindValue(<span class="string">":number_in"</span>, number_in);</span><br><span class="line">        <span class="keyword">if</span>(!query.exec())</span><br><span class="line">        &#123;</span><br><span class="line">            QMessageBox::critical(<span class="number">0</span>, QObject::tr(<span class="string">"Database Error-3"</span>),</span><br><span class="line">                                  query.lastError().text());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="6-UI-一览"><a href="#6-UI-一览" class="headerlink" title="6.UI 一览"></a>6.UI 一览</h4><p><img src="https://i.loli.net/2019/08/30/hujPw2xdQaW5RHb.png" alt="loginui.png"></p><p><img src="https://i.loli.net/2019/08/30/iKLYHlT1Qhj2fG8.png" alt="warnui.png"></p><p><img src="https://i.loli.net/2019/08/30/MuCzjT179Ism34y.png" alt="yanma.png"></p><p><img src="https://i.loli.net/2019/08/30/F9LDmQ5rVsvtnAO.png" alt="mainui.png"></p><p><img src="https://i.loli.net/2019/08/30/rf6GDKMV3ksXHN1.png" alt="listui.png"></p><h3 id="5-程序测试"><a href="#5-程序测试" class="headerlink" title="5.程序测试"></a>5.程序测试</h3><h4 id="1-黑盒测试"><a href="#1-黑盒测试" class="headerlink" title="1.黑盒测试"></a>1.黑盒测试</h4><h4 id="2-白盒测试"><a href="#2-白盒测试" class="headerlink" title="2.白盒测试"></a>2.白盒测试</h4><h4 id="3-系统测试"><a href="#3-系统测试" class="headerlink" title="3.系统测试"></a>3.系统测试</h4>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础操作</title>
      <link href="/2019/08/18/top/"/>
      <url>/2019/08/18/top/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="输入密码，查看文章" />    <label for="pass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+/x4vin2ggqF0KDHL9mzvv6oVsdvMfQtExVCoufr+pa6bBtavI0MREFDxhPpLum4+4HQ4U/FCHImBdbC+Mgfbwi7XpaaMf5ZvAnTOH0xD5IRvKGifUmWit9RIyRC/hZRvClF6m4swVi0nY1vpeJafIY/upwZyS/834r3vQc5eiCfYJZ4r5GfmgxI4qAxNdCFJNZ7PVQyLTzGmRBzmPXPwnsN9vQ7Oqk5+kKwwN/PvqDgMmNdC9mMFEpGoBYs4BvGN43sQ2LMjkajuRKEGxx3/ESc0gQ+TCQCbxT8eVDBikGQUJTKo0h9EPXDq/xZhv9gywS1xYz5Czr076qyHlkpd6AGpTgslxLf8XuxmkNi4pyPuwnybF7RRhXS37A+2fMXb/EmkXczLd6Qp4tanumPPdHqlSiWdTHeYe0EmeVGB8V40mZqfB9+ChT9patTtbzINLVc2ysDaLSth9VvEkqQaz6uR5PcKh5IIRgJ8BvLDChqqd0Vn7gH7HDG0cZQwCeMSMyexQ83rw/JaP/9h+G8gLtnzmuuZu5S64nS1sWX0jhH3HPtw9rLohQr9fSXFdKadQeYgX/7oyXEck4I5UJEs+x62fC0zM8SDntT6yklLQ0Vd1wevUCz4XQO5Sesy6kQiJIYzJh1Lt3pn8sPOmiI1wPhxLiIRD/sxUCWMXlPFdSbJXU9o6eYdvixZ0w6jXsiiQoCAwY4nZxrvLd4k5dc0gBONWDe2oLT7R0Jf3itlyHxeRT4xBweRT7+y27+7cd5R0se4elYJecMw4FdLJGiwnBs3hBi5uCqRuCEnk7RARSM5wFBwltF8OeFSkxl8kdmjVkW9v5PxChfjmVWdbXXN6zRakeA70a8oPuobszlDx1mebNMNPRCOfcY+uENywlEL/P660NYilsU5Br1c80RyKvwB+Jbfv06FUGdfA3cn1O/G8spyrbsxiyzdsE3yG3+mrBzOC0wuUw5pBW/tn1+T2JsxxxA6VuJstPRUXLD8pP9kgm7A+yStHMea+ghBbp/3iz8Ny8tEkwlZgFVs6XZ6rTYLItXUNI7fNdtz6tMtTae9pQLVsEEn4BhXeyKlbu+Ax9LQgogy/i4ieTCrXwqGII8y7VW/X7e9l7ZhoaTCQ2gRx7m+SGrC2PQOP5NrtfzcqdKgAizlGfOdgL2UpLshLAWW/4zO8JgTK8EOGXJvkVb+zcSTuJgARHjrlliFWX/i2uQskBQRTkwebEnkHsLAU2DnhI4yXoJEDz17G3yDqOs08TwuVpdq0opI+DDv4jlzVWLR1HFeYJB48ITqw3ZENnirJNYuZiBLm1zbXH2kPF8UqA3ZeGeCi+tMtfh1SXCsYw+YWgIizVvixZVjQQnlvNk5+VNWVc1lFKygz/AcqSiOPS66UOWKveJ5paFiGoOYOWQhrWagGez1aJKkPDeUqSttPpD6OnSgxUliRtcuX+WViaSapn+TEfWdbIu5Jl0FREX3QOLozz9ANYjJYeXdV2F/idCMRVNU73zmeuYD/pQPM2UiNy9uWiilktvfeclHRo40lxCEnwPSHkrtpHQezglXeLFx/JypQNHwMBPXOGQX7Oc+b9XBYYm7s2oWWyaW8fOZlvDvxUkmdH1xsuqklOpd1wwK0oTaW/yubr+A3p8rN0ls76nlOTLyHzSSemzZueAiAKmRYjkL16wLGrCnOSnDNusjhC4vaKr+KbT7rjXxUQa0qUpj+kI7livPhB+9nspDtN5a+1DnrJRr3t40s8dA9YDhHsFKHhM4EnflnO1wMMAU8s1vY4WBEka8z69IuOKyg6vhFIYc/bM7mFYcdK6aRFLGYTtKOcfXlYCwmvGGUtd2k99HprYIaMZbW3quLpta1hIkj5VGpT95k8mLHcIqv191Vnk7Xtu0iZ3GvLBmkKR6crlXndLakBdzqLcOOnEgdxV5AX8QUea9Px07SuqT01fEibExmhWHY7J+tzJ2Y2FNieWJV5v4B2IUo0qCeh5pUTM+roPPCI2ub4uhcEw5C2PKVoS01tCcg3/HIcXvzE7JiANovi3Qvvp4dgL0v1N1W9RlV5M6HtJS0nhjfnBgjJ2ntoX7eJ3Pzklu4a//K0iDwKHTjugpRJIfFgRIMlEgSngyClcStwpbANurvrdKydAWV8U4Mdki9ECrK5sB3DFOajWAID5LhyJp9uWRi+MD4wv85QcEMzMDYgc8y8G6qby9uoOP28RJQeDgyVLyZ5dj/miE5oHaThl8ch+rtfu0DOCuZ3bEMU2QY3V77cUbzq1j8IqbXFfIYiPbM2cW5dUcdg0McwILTmGi9dnXEOSc6w9R6mesaqLwTlJb8h7ai48H8+clgKhzBFMeEK+BgJf5A/L5hzhf/iLluyWDbq2rRyLKyyola4RG8dkO7c9pRFce7hWUWmH6hUORneVNVqyscSUwiI89hG00IXI7czVnnP9g6zFux5O0GcnHgOMSnZ5FaTmK0REvkskADKu/JUICEy5FPzF3w5VdrWMafrFcWkRkBKchCrP+mfkMwtCtLajXoHzE+yt2Ils14PHL6NyG9wwzqHDLvfkPP/D9ih5QPxyNKiUT2zf1wOFUOPuzq+q8YOnreGskqFT5nKI4dyXuuKi0uFqNaxO9yRrdb37n4aqdCCMlOF0FN7jlZnAIpHfrNu2TjZOIc5kKbUasD4GN2/CKjsfElcHH57NlyJ10R+kkuM/HcCsxQM07/O/uq0hH86MTb7xMDEJA6JxFJM0qNz3q9A/3lgWdCQ2VOEH1kDNd+kO3AnO1RgmgZ/rzJXGFSetLCfjdIgDJp6xKoZ05qG3RaJQFn+INA0Hb+g49lvFZBpQA5F/7zDYP4YLbO1mY9xbsrSwgL8oj0pQbNh0K7Oz/ZYGXBYSsHNBV38iH7cMzUUUmkOJ2bSQ/LyYVo4dyolUGBbVw1t1SFuzt4RezGKyhv3kKvup6MjPyU4LS+96uJqcinADtNQs7yqwuIXvN2BHScMZEHr5dSG5MPnrsmb/3U/5blgtAhMW1Z5QWWuB4M2/bKAuvCMBDy5o0YFh+iMJ9PNZSYYOGg7sAPqhsJQuVZviztz3UI5EA5Sj1Fb5tCQeikaIvzkNv5UDpdz0HKI8hfTNo0A3kCP7BBxChAo3B48+hl8tKMT4Nl60G14bwOfBimc8OJnnaK3BMuZ9eKEUmS3y2q4ndBiK40t2U1cX/gDV03GueTdmo2VkoviRz8Xj+ZJUTc0mqEZkhB/xpH1hxrhzzAL1yAm7o4mHQSi2pE+GjiAH3x8esrSfvflnkZEdEQn8UFf9tzkjV34tHBxoCPIgM1LlGZbXERQ/xMCd49XvoylQR1kgOJL+DXdDCzYBVrNr1YhsDaBCPbMaPwI/vBc4IBISG0khIXbcw92jioqs6SVxcjTIWhdkTMSkNF0L2JvpuKt5kYbEvcgbNucMYxOoxam1fSCLLedS7uaQHei6mZEhZAzaRg57JAqfWBAeY70GwOnWfLjnJGBiHQywAQK5kzOtGvsIU1HhOqeUzdjW54OXlAl0WQ3OZ7EbUn9QxqPgEQ8uU4cWxHc7H6RjiD+xeVupG8er7fsAbv9azK1lo5nxsW3vp+q6c7X5DOMdpK49uIW9qwqezdmpoyGJ/qzYdtcPFtb6CGRHNxNrm6F7evud4LnP29EGkEId0GhgSRQspRnTxxEr4oATIMLGui7kjJtKtE2G/cQNo0/jCciahRLQ+yC07Yj2EKJBl0UBKDZ2AlkmmouzKzFA3aK/QqeEg/et2czG/fk8la7+oHqt8ekBqyBNWHPHShr/99VYCN9WrIpXEyWjMC0u1O0Pjz+aFMdHshWRYmlOVCsEh82q2jEgZjwiOarsgT3A0XmtSYCWQcGxl8I4sfzLKAW3G7C69N1lNN5UtEmaznAMS0NVI0cRDs4JUpfS6FUojRi/ViQhqOKOpnz1AGl4k4eE6dlLRAY3f3nbMz6xXihjSiny88JcNAfN3T7rvi5tSD+Iq7Em4I+WSxdvVUVrc85jYfK7qipj54k8QbwR8j8uJ0P24wvudBoiLU3u7lBYaU0mNU7B3wmskB4CA9Qzi1UFGS89PVh+xyTNOy9zoQ9kaFzN8AlOhHZugurp2pCMRwqbxVrU8pJ6z+Y963B05/e9WtVstDn9bBsMH98ySE4/KWLK/BLCkbPX4Qhu4Uwx0h0qPCKQVMs6snrenJc2I90cGgl+bb2VIIqiQ+oNT/3l3iN6nd6k3lxLeADxGeq8BXL1bX04zJrLkpC6g/3CGf5t+jrtxI0A3mxC6MzkJRGBE4NiQrGMgD+QbjLxsnchapFpeuNVMS8ktXlq/S6PEXce8A81zSMSFx7VVD75u+PmLJcq0RuQ0DaOlbuq+Cy1LJwhz07BBkgG3RPwReDSH2P5gZ+UHU10A3pfxFcWSTmrb7b1cfEd9lA7UdTEqCKEVyvk8+sIqRbcXJPxV3a5/PQ3WdAM9I5aRPRxnkg6gTxY1gIEL8xHJQ+samLwzBx6yffeTDEGEYG+H/ZajYg8zY7OES9NTqUPy+QEr+GT1pyVjvtaxg9OeR1aeg1UH3RWXFHtoNwl5AQxJoicTJ7juwiahtceRQF0x6n3j6gFoqVCk8X+NrAml2n9/8PPlzEMhf7KuOl+1OYk/Th9pAvh3B+nt3K2SBfTZBuk7bfBJSHbu+F8oRVJjBxzk0jbAXF34J7LeE6y56FSUs+5xfL3A9AfD8MYaJlduMT+HZBrq1WyvbwBDuGkvBvd7Yc4GSCn1o3br1huYju4YOkbdFNj6lnwNkgt0llZAoSepvAEs+PWYoB1Por/US097+hixhomO7IzpnebKIqdyf8q9N92816mvD65hg9CtenXBpfV8kQe6KsyGysjJIQjTEok2WVVd4CyhkvhrZ1H2u2j/ovXaWqV3YEXBmuT94aCLY+gKxKxHdOnFVjT5fiZrWwtXzI5QHu6mITFujrJzuYf8GFg2+fymFgfUXabySYE0wGcIJNSblT6N+ZyR+YJuOIfXHPovvKuTI/ffhqJQ4j7DWrg4+PirX/LZoCexIaDOfEaq8HzsIqOIzOOBClK03ZAlvyMppdK/6TvX9uda0adAJleO88pZ801twe8we8eAcksUFsGgthgM5PaPGMAlzbF0qQY5MeDxoU7Sa5paY8ex3VNACodrt3XeXd001RRpZAJHkFRAEr8RPOL3ic3Dqp4VsPJjOUwJfGu6G0iuIcfR8Zo1jhS43ZUPNyLPdFZB8GbQmQLB9wUmL280ER1oI0WLihac3tGs5mAe0AV5lRKFVp1xAzQ3NSdGfiU8M9UUMb2IdRwD6KrhSVS1I/KFVjdcfV2GZwXN/Ee7jkDRCB8RH+IUhtqWtgQ+1pU2kVy1i+hB4y/V9KZe88aW/E9WWSn4ms1qfRoVDIbY1e7L50VPWSt0yvulxCOSvprQQ22BkSDAHYh+HtwzMj//C5bpm2WSotSevBgCh+1tiIXUE4nA2pQ9r52zm0ECkW7T++Y5h1r8KsOx9GpnYVxomIEFAE5G61RnQmF9Z+NzRT3cvuPw4Uh6Ew9A9ZnHAsjbobEmKg04ixf0L0ztQaGHlC76CYT2rdHLa5wuwrxPXGx281G6jS2uQEnthjxDLWiVPIlGI3im1GDMVG+9uBKA2AQrNdxEqRoi4wuIqIiY2D0jLEvT7F0OeG9CyiTriUg4OrwjV9jvw/2VMpqvP95BAGV8pHUI7esC5s9Vl1gXjFhlJMlWy7DcGuNUCaLOs1B3yLL8dY2/4U+TItlfYczBRriffJM7/owVFT8T1qqk0dFFUh5A8vfnCIrCS4GgPMUYUuyXl4SUvISt59fe9wOVzndy7IaJN7vuaCuIdmucN5ZmGUXonImvMOtPdaEh18HX0kLoHMXhnL+qlOllS3Agv7sVt5i/Js+wS8cBHe8uRoLMA4jJruq4ZKQZn5ah2HlfdY1XGPZCA4RyDBIhhSc9786D3nP/GC88PW3zBjGRBn6GlGBCSV4dlZe0WwIp1R081YKC/TZGD3Qz8UyULFnJq1qx2sbIBfKZabFG6jOL203P8V9j9wDrJclTJIN2pmT0UZpu0t2ss9JuDi20bfDVYVAUEm8QVY/2BRyVySFRN205ToI8WOhtyRjXI1d7Myyfb21CWZ5SowSixkVH1cvti8QWSm+ELWCsSQswZTfM+716sUWQAxVTOgkcy5SKvT88UgENQCeSD3RPZzewwjfoibZhiBgaS3cKMckDw1cGO6JBR1wIMSt5+Fc7ocUtn5+ywI3oBG0Ol7z4rteCsE1ICsvAWB7ZmVmWMlKv2jWAeFVzjLBrNxqkKUFmpds1xv39cTOXkiI26Mo7fsPFCOYLf62qL+1Pvcrx6GQrC1y4/ATyDNPFVxNEhiGZkNLHGXwLTJUxX81tytCBb45tNrW2OP5I7aYCtogH5HWiOp4V/uPDDuTYDAvS/Fgxoeq7rHa+L6iytOKL4qO257ek4yszNEGGMB+V21DrGIgY+ZcJADVnEOA5AyKR3mkIeJWMiWhK6L06ZOGJqM7tPY+qWaKsnf3e5inWTW6t9FCqzzTKB7xU2Fgsm1hqSH+GAli7EXA92AsnIz+EUrTbGKU7pAe6mqb1pyR2RHMa7CWbzqhpyQGn0n73rbGiJa6Ob7IiUDpEYvhu72h0oz2o04fi9KM3+vlFMEcLRgmj7TqtJAQ9znarMtuNAUZbgF/4eXMnwCGsVbQOniENSoZj/JaB5mIqbutznt/aCwsZ1QioZZeC3vPb6Sbw2eyGmYumh6fl+3Mm/AQWI0gbfXTeWgDNKQ32+s4Dtv4b/3Qb5e5rkhGYqWh6VKAq+pkQUb+eqlmlFXMcS+a1RNm4ATS0vkwtNaYL9W9jiPltKygLw3kelbtD55Ym1IvfODgkTFOeeihX0hUztXftqsUuineDPjZqXCt6ISIEGNic8fyQQVFsXLaxc5VzJr6DyYfhk1HX2t8B/GYozDvP/mjsBHBoFtyKmv+tMF9Yj+g7TXoQtY0dkGuhVDIJrMDowPxscGVg7H2it1qJ65U0cHZ2kXbzN88pFoeX0ZNIVNnl0GpYChegnXl492ic+5VeJcbq/0ZtLOQyCB7B2cGw0mKvWKVoyiNe09uZsQbIrH6GzPaU8yrATZsfZFt9vZIGpq31PbadU3nw9Z7MwxiWnwAy3orv7XRvB2b2LmqlKIG5uk/jRDB7008Bs05RAL03b4EutKHZxfr1KSHHY/ZIIT8fQBTDBDriVQ1M0pf4Lk7Vxsu/KsslYOiJlTs4cJ4IklIbd8ZpyDsCYFlPmtHqOJFNxnm8x4g22GlZ8BHeeoCD9BucL0olL8BK0p0ii3nUpSyWr3jk=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
